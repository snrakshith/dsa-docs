[{"content":"","date":"2024-03-01","id":0,"permalink":"/","summary":"","tags":[],"title":"Preperation Sheet"},{"content":"","date":"2023-09-07","id":1,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"\r// 17. Checking for Armstrong Numbers in a Range const armstrongNumbersInRange = (start, end) =\u0026gt; { const isArmstrong = (num) =\u0026gt; num === [...num.toString()].reduce( (sum, digit) =\u0026gt; sum + Math.pow(digit, num.toString().length), 0 ); return Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start).filter( isArmstrong ); }; console.log(armstrongNumbersInRange(1, 500)); // [1, 153, 370, 371, 407] // 18. Generating Multiplication Tables const multiplicationTable = (num) =\u0026gt; { for (let i = 1; i \u0026lt;= 5; i++) { console.log(`${num} x ${i} = ${num * i}`); } }; multiplicationTable(4); // 19. Finding Prime Numbers in a Range const primesInRange = (start, end) =\u0026gt; { const isPrime = (num) =\u0026gt; num \u0026gt; 1 \u0026amp;\u0026amp; Array.from({ length: Math.sqrt(num) }, (_, i) =\u0026gt; i + 2).every( (i) =\u0026gt; num % i !== 0 ); return Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start).filter( isPrime ); }; console.log(primesInRange(10, 30)); // [11, 13, 17, 19, 23, 29] // 20. Checking for Perfect Numbers const isPerfectNumber = (num) =\u0026gt; Array.from({ length: num - 1 }, (_, i) =\u0026gt; i + 1) .filter((i) =\u0026gt; num % i === 0) .reduce((a, b) =\u0026gt; a + b, 0) === num; console.log(isPerfectNumber(28) ? \u0026#34;Perfect Number\u0026#34; : \u0026#34;Not Perfect\u0026#34;); // Perfect Number // 21. Sum of Even Numbers in a Range const sumEvenNumbersInRange = (start, end) =\u0026gt; Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start) .filter((n) =\u0026gt; n % 2 === 0) .reduce((a, b) =\u0026gt; a + b, 0); console.log(sumEvenNumbersInRange(1, 10)); // 30 // 22. Sum of Odd Numbers in a Range const sumOddNumbersInRange = (start, end) =\u0026gt; Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start) .filter((n) =\u0026gt; n % 2 !== 0) .reduce((a, b) =\u0026gt; a + b, 0); console.log(sumOddNumbersInRange(1, 10)); // 25 // 23. Fibonacci Number at Specific Position const fibonacciAtPosition = (n) =\u0026gt; n \u0026lt;= 1 ? n : fibonacciAtPosition(n - 1) + fibonacciAtPosition(n - 2); console.log(fibonacciAtPosition(5)); // 5 // 24. Prime Numbers Less Than Given Number const primesLessThan = (limit) =\u0026gt; Array.from({ length: limit - 2 }, (_, i) =\u0026gt; i + 2).filter( (isPrime) =\u0026gt; isPrime \u0026gt; 1 \u0026amp;\u0026amp; Array.from({ length: Math.sqrt(isPrime) }, (_, j) =\u0026gt; j + 2).every( (k) =\u0026gt; isPrime % k !== 0 ) ); console.log(primesLessThan(20)); // [2, 3, 5, 7, 11, 13, 17, 19] // 25. Number of Digits in a Number const countDigits = (num) =\u0026gt; num.toString().length; console.log(countDigits(12345)); // 5 // 26. Checking if a Number is Narcissistic const isNarcissistic = (num) =\u0026gt; num === [...num.toString()].reduce( (sum, digit) =\u0026gt; sum + Math.pow(digit, num.toString().length), 0 ); console.log(isNarcissistic(153) ? \u0026#34;Narcissistic Number\u0026#34; : \u0026#34;Not Narcissistic\u0026#34;); // Narcissistic Number // 27. Generating a Pattern of Numbers const numberPattern = (rows) =\u0026gt; { let count = 1; for (let i = 1; i \u0026lt;= rows; i++) { console.log([...Array(i)].map(() =\u0026gt; count++).join(\u0026#34; \u0026#34;)); } }; numberPattern(3); // 28. Sum of the Digits of the Factorial of a Number const sumOfFactorialDigits = (num) =\u0026gt; { const factorial = (n) =\u0026gt; (n \u0026lt;= 1 ? 1 : n * factorial(n - 1)); return [...factorial(num).toString()].reduce((sum, digit) =\u0026gt; sum + +digit, 0); }; console.log(sumOfFactorialDigits(4)); // 6 // 29. Largest Palindrome in a String const largestPalindrome = (str) =\u0026gt; { let longest = \u0026#34;\u0026#34;; for (let i = 0; i \u0026lt; str.length; i++) { for (let j = i + 1; j \u0026lt;= str.length; j++) { const subStr = str.slice(i, j); if ( subStr === subStr.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;) \u0026amp;\u0026amp; subStr.length \u0026gt; longest.length ) { longest = subStr; } } } return longest; }; console.log(largestPalindrome(\u0026#34;babad\u0026#34;)); // \u0026#34;bab\u0026#34; or \u0026#34;aba\u0026#34; // 30. Finding Missing Numbers in a Sequence const missingNumbers = (sequence, n) =\u0026gt; Array.from({ length: n }, (_, i) =\u0026gt; i + 1).filter( (num) =\u0026gt; !sequence.includes(num) ); console.log(missingNumbers([1, 2, 4, 5], 5)); // [3] ","date":"0001-01-01","id":2,"permalink":"/prep-1/prep-1/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 17. Checking for Armstrong Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003earmstrongNumbersInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisArmstrong\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eisArmstrong\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earmstrongNumbersInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 153, 370, 371, 407]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 18. Generating Multiplication Tables\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e x \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e = \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 19. Finding Prime Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimesInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimesInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [11, 13, 17, 19, 23, 29]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 20. Checking for Perfect Numbers\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e28\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Perfect Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Perfect\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Perfect Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 21. Sum of Even Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumEvenNumbersInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumEvenNumbersInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 30\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 22. Sum of Odd Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOddNumbersInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOddNumbersInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 25\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 23. Fibonacci Number at Specific Position\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 24. Prime Numbers Less Than Given Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimesLessThan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elimit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003elimit\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimesLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [2, 3, 5, 7, 11, 13, 17, 19]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 25. Number of Digits in a Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountDigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountDigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12345\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 26. Checking if a Number is Narcissistic\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisNarcissistic\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisNarcissistic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e153\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Narcissistic Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Narcissistic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Narcissistic Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 27. Generating a Pattern of Numbers\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enumberPattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e([...\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)].\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003enumberPattern\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 28. Sum of the Digits of the Factorial of a Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfFactorialDigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfFactorialDigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 6\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 29. Largest Palindrome in a String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elargestPalindrome\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elargestPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;babad\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;bab\u0026#34; or \u0026#34;aba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 30. Finding Missing Numbers in a Sequence\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emissingNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eincludes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emissingNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"\r// 17. Armstrong Numbers in a Range const armstrongInRange = (start, end) =\u0026gt; { const result = []; for (let i = start; i \u0026lt;= end; i++) { const digits = String(i).split(\u0026#39;\u0026#39;); const sum = digits.reduce((acc, digit) =\u0026gt; acc + Math.pow(+digit, digits.length), 0); if (sum === i) result.push(i); } return result; }; console.log(armstrongInRange(1, 500)); // [1, 153, 370, 371, 407] // 18. Multiplication Table const multiplicationTable = (num) =\u0026gt; { for (let i = 1; i \u0026lt;= 10; i++) { console.log(`${num} x ${i} = ${num * i}`); } }; multiplicationTable(4); // 19. Prime Numbers in a Range const primeInRange = (start, end) =\u0026gt; { const primes = []; for (let num = start; num \u0026lt;= end; num++) { let isPrime = num \u0026gt; 1 \u0026amp;\u0026amp; Array.from({ length: num - 2 }, (\\_, i) =\u0026gt; i + 2) .every(divisor =\u0026gt; num % divisor !== 0); if (isPrime) primes.push(num); } return primes; }; console.log(primeInRange(10, 30)); // [11, 13, 17, 19, 23, 29] // 20. Perfect Number const isPerfectNumber = (num) =\u0026gt; { const sum = Array.from({ length: num - 1 }, (\\_, i) =\u0026gt; i + 1) .filter(divisor =\u0026gt; num % divisor === 0) .reduce((acc, divisor) =\u0026gt; acc + divisor, 0); return sum === num ? \u0026#39;Perfect Number\u0026#39; : \u0026#39;Not a Perfect Number\u0026#39;; }; console.log(isPerfectNumber(28)); // Perfect Number // 21. Sum of Even Numbers in a Range const sumEvenInRange = (start, end) =\u0026gt; { return Array.from({ length: end - start + 1 }, (\\_, i) =\u0026gt; start + i) .filter(num =\u0026gt; num % 2 === 0) .reduce((acc, num) =\u0026gt; acc + num, 0); }; console.log(sumEvenInRange(1, 10)); // 30 // 22. Sum of Odd Numbers in a Range const sumOddInRange = (start, end) =\u0026gt; { return Array.from({ length: end - start + 1 }, (\\_, i) =\u0026gt; start + i) .filter(num =\u0026gt; num % 2 !== 0) .reduce((acc, num) =\u0026gt; acc + num, 0); }; console.log(sumOddInRange(1, 10)); // 25 // 23. Fibonacci Number at Specific Position const fibonacciAtPosition = (position) =\u0026gt; { if (position \u0026lt;= 1) return position; let [a, b] = [0, 1]; for (let i = 2; i \u0026lt;= position; i++) [a, b] = [b, a + b]; return b; }; console.log(fibonacciAtPosition(5)); // 5 // 24. Prime Numbers Less Than Given Number const primesLessThan = (num) =\u0026gt; { const primes = []; for (let i = 2; i \u0026lt; num; i++) { if (primeInRange(i, i).length) primes.push(i); } return primes; }; console.log(primesLessThan(20)); // [2, 3, 5, 7, 11, 13, 17, 19] // 25. Count Digits in a Number const countDigits = (num) =\u0026gt; String(num).length; console.log(countDigits(12345)); // 5 // 26. Narcissistic Number const isNarcissistic = (num) =\u0026gt; { const digits = String(num).split(\u0026#39;\u0026#39;); const sum = digits.reduce((acc, digit) =\u0026gt; acc + Math.pow(+digit, digits.length), 0); return sum === num ? \u0026#39;Narcissistic Number\u0026#39; : \u0026#39;Not a Narcissistic Number\u0026#39;; }; console.log(isNarcissistic(153)); // Narcissistic Number // 27. Number Pattern Generation const generatePattern = (rows) =\u0026gt; { let current = 1; for (let i = 1; i \u0026lt;= rows; i++) { console.log(Array.from({ length: i }, () =\u0026gt; current++).join(\u0026#39; \u0026#39;)); } }; generatePattern(3); // 28. Sum of Digits of Factorial const sumDigitsOfFactorial = (num) =\u0026gt; { const factorial = (n) =\u0026gt; (n \u0026lt;= 1 ? 1 : n \\* factorial(n - 1)); return String(factorial(num)) .split(\u0026#39;\u0026#39;) .reduce((acc, digit) =\u0026gt; acc + +digit, 0); }; console.log(sumDigitsOfFactorial(4)); // 6 // 29. Largest Palindrome in a String const largestPalindrome = (str) =\u0026gt; { let largest = \u0026#39;\u0026#39;; for (let i = 0; i \u0026lt; str.length; i++) { for (let j = i; j \u0026lt; str.length; j++) { const substring = str.slice(i, j + 1); if (substring === substring.split(\u0026#39;\u0026#39;).reverse().join(\u0026#39;\u0026#39;) \u0026amp;\u0026amp; substring.length \u0026gt; largest.length) { largest = substring; } } } return largest; }; console.log(largestPalindrome(\u0026#34;babad\u0026#34;)); // \u0026#34;bab\u0026#34; or \u0026#34;aba\u0026#34; // 30. Finding Missing Numbers in a Sequence const findMissingNumbers = (sequence, n) =\u0026gt; { const fullSet = new Set(Array.from({ length: n }, (\\_, i) =\u0026gt; i + 1)); const sequenceSet = new Set(sequence); return [...fullSet].filter(num =\u0026gt; !sequenceSet.has(num)); }; console.log(findMissingNumbers([1, 2, 4, 5], 5)); // [3] ","date":"0001-01-01","id":3,"permalink":"/prep-1/prep-1/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 17. Armstrong Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003earmstrongInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earmstrongInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 153, 370, 371, 407]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 18. Multiplication Table\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e x \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e = \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 19. Prime Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimeInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edivisor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003edivisor\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimeInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [11, 13, 17, 19, 23, 29]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 20. Perfect Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edivisor\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003edivisor\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edivisor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003edivisor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Perfect Number\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Not a Perfect Number\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e28\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Perfect Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 21. Sum of Even Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumEvenInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumEvenInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 30\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 22. Sum of Odd Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOddInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOddInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 25\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 23. Fibonacci Number at Specific Position\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eposition\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 24. Prime Numbers Less Than Given Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimesLessThan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimeInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimes\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimesLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [2, 3, 5, 7, 11, 13, 17, 19]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 25. Count Digits in a Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountDigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountDigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12345\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 26. Narcissistic Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisNarcissistic\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Narcissistic Number\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;Not a Narcissistic Number\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisNarcissistic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e153\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Narcissistic Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 27. Number Pattern Generation\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecurrent\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egeneratePattern\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 28. Sum of Digits of Factorial\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumDigitsOfFactorial\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumDigitsOfFactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 6\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 29. Largest Palindrome in a String\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elargestPalindrome\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elargest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003elargest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003elargest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elargest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elargestPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;babad\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;bab\u0026#34; or \u0026#34;aba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 30. Finding Missing Numbers in a Sequence\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMissingNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efullSet\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"err\"\u003e\\\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esequenceSet\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003efullSet\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003esequenceSet\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ehas\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMissingNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"Here are JavaScript/ES6 implementations for these problems:\n31. Generating Pascal’s Triangle function generatePascalsTriangle(rows) { const triangle = []; for (let i = 0; i \u0026lt; rows; i++) { const row = Array(i + 1).fill(1); for (let j = 1; j \u0026lt; i; j++) { row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]; } triangle.push(row); } return triangle.map((row) =\u0026gt; row.join(\u0026#34; \u0026#34;)).join(\u0026#34;\\n\u0026#34;); } console.log(generatePascalsTriangle(4));\r32. Finding the Median of an Array function findMedian(array) { const sorted = array.slice().sort((a, b) =\u0026gt; a - b); const mid = Math.floor(sorted.length / 2); return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid]; } console.log(findMedian([3, 1, 2, 4, 5])); // 3 33. Calculating the Power of a Number const power = (base, exponent) =\u0026gt; base ** exponent; console.log(power(2, 3)); // 8 34. Checking for an Anagram function areAnagrams(string1, string2) { const normalize = (str) =\u0026gt; str.split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); return normalize(string1) === normalize(string2); } console.log(areAnagrams(\u0026#34;listen\u0026#34;, \u0026#34;silent\u0026#34;)); // true 35. Finding the Sum of Prime Numbers in a Range function isPrime(num) { if (num \u0026lt; 2) return false; for (let i = 2; i \u0026lt;= Math.sqrt(num); i++) { if (num % i === 0) return false; } return true; } function sumOfPrimes(range) { const [start, end] = range; let sum = 0; for (let i = start; i \u0026lt;= end; i++) { if (isPrime(i)) sum += i; } return sum; } console.log(sumOfPrimes([1, 10])); // 17 36. Finding the N-th Triangular Number const triangularNumber = (n) =\u0026gt; (n * (n + 1)) / 2; console.log(triangularNumber(4)); // 10 37. Checking for Perfect Squares const isPerfectSquare = (number) =\u0026gt; Number.isInteger(Math.sqrt(number)); console.log(isPerfectSquare(16)); // true 38. Finding the Sum of Squares of Digits function sumOfSquares(number) { return String(number) .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Math.pow(Number(digit), 2), 0); } console.log(sumOfSquares(123)); // 14 39. Generating a Square Matrix function generateMatrix(size) { let num = 1; return Array.from({ length: size }, () =\u0026gt; Array.from({ length: size }, () =\u0026gt; num++) ); } console.log(generateMatrix(3));\r40. Sum of Digits Until Single Digit function sumUntilSingleDigit(number) { while (number \u0026gt; 9) { number = String(number) .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Number(digit), 0); } return number; } console.log(sumUntilSingleDigit(9875)); // 2 41. Count Specific Digits function countDigit(number, digit) { return String(number) .split(\u0026#34;\u0026#34;) .filter((d) =\u0026gt; Number(d) === digit).length; } console.log(countDigit(122333, 3)); // 3 42. Generating Fibonacci Sequence Using Recursion function fibonacci(n) { if (n \u0026lt;= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } console.log(Array.from({ length: 5 }, (_, i) =\u0026gt; fibonacci(i))); // [0, 1, 1, 2, 3] 43. Finding All Divisors function findDivisors(number) { return Array.from({ length: number }, (_, i) =\u0026gt; i + 1).filter( (i) =\u0026gt; number % i === 0 ); } console.log(findDivisors(12)); // [1, 2, 3, 4, 6, 12] 44. Finding the Average of Numbers const average = (array) =\u0026gt; array.reduce((sum, num) =\u0026gt; sum + num, 0) / array.length; console.log(average([1, 2, 3, 4, 5])); // 3 45. Finding the Mode function findMode(array) { const freqMap = array.reduce( (map, num) =\u0026gt; ((map[num] = (map[num] || 0) + 1), map), {} ); const maxFreq = Math.max(...Object.values(freqMap)); return +Object.keys(freqMap).find((key) =\u0026gt; freqMap[key] === maxFreq); } console.log(findMode([1, 2, 2, 3, 4, 4, 4])); // 4 46. String Length Without Built-In Functions function stringLength(str) { let length = 0; for (let char of str) length++; return length; } console.log(stringLength(\u0026#34;hello\u0026#34;)); // 5 47. Generating a Number Pyramid function generatePyramid(rows) { return Array.from({ length: rows }, (_, i) =\u0026gt; Array.from({ length: i + 1 }, (_, j) =\u0026gt; j + 1).join(\u0026#34;\u0026#34;) ).join(\u0026#34;\\n\u0026#34;); } console.log(generatePyramid(4));\r48. Sum of Prime Factors function sumOfPrimeFactors(number) { const factors = []; for (let i = 2; i \u0026lt;= number; i++) { while (number % i === 0) { factors.push(i); number /= i; } } return [...new Set(factors)].reduce((sum, factor) =\u0026gt; sum + factor, 0); } console.log(sumOfPrimeFactors(12)); // 5 49. Finding the Second Largest Number function secondLargest(array) { const unique = [...new Set(array)]; unique.sort((a, b) =\u0026gt; b - a); return unique[1]; } console.log(secondLargest([10, 20, 4, 45, 99])); // 45 50. Longest Substring Without Repeating Characters function longestUniqueSubstring(string) { let max = 0, start = 0, seen = {}, longest = \u0026#34;\u0026#34;; for (let end = 0; end \u0026lt; string.length; end++) { const char = string[end]; if (char in seen \u0026amp;\u0026amp; seen[char] \u0026gt;= start) { start = seen[char] + 1; } seen[char] = end; if (end - start + 1 \u0026gt; max) { max = end - start + 1; longest = string.slice(start, end + 1); } } return longest; } console.log(longestUniqueSubstring(\u0026#34;abcabcbb\u0026#34;)); // \u0026#34;abc\u0026#34; Let me know if you\u0026rsquo;d like explanations for any of these!\n","date":"0001-01-01","id":4,"permalink":"/prep-1/prep-1/","summary":"\u003cp\u003eHere are JavaScript/ES6 implementations for these problems:\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"31-generating-pascals-triangle\"\u003e\u003cstrong\u003e31. Generating Pascal’s Triangle\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePascalsTriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePascalsTriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"32-finding-the-median-of-an-array\"\u003e\u003cstrong\u003e32. Finding the Median of an Array\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efloor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"33-calculating-the-power-of-a-number\"\u003e\u003cstrong\u003e33. Calculating the Power of a Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epower\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eexponent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"nx\"\u003eexponent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 8\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"34-checking-for-an-anagram\"\u003e\u003cstrong\u003e34. Checking for an Anagram\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eareAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eareAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;listen\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;silent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"35-finding-the-sum-of-prime-numbers-in-a-range\"\u003e\u003cstrong\u003e35. Finding the Sum of Prime Numbers in a Range\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 17\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"36-finding-the-n-th-triangular-number\"\u003e\u003cstrong\u003e36. Finding the N-th Triangular Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangularNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etriangularNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"37-checking-for-perfect-squares\"\u003e\u003cstrong\u003e37. Checking for Perfect Squares\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectSquare\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"38-finding-the-sum-of-squares-of-digits\"\u003e\u003cstrong\u003e38. Finding the Sum of Squares of Digits\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 14\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"39-generating-a-square-matrix\"\u003e\u003cstrong\u003e39. Generating a Square Matrix\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egenerateMatrix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egenerateMatrix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"40-sum-of-digits-until-single-digit\"\u003e\u003cstrong\u003e40. Sum of Digits Until Single Digit\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumUntilSingleDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumUntilSingleDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9875\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"41-count-specific-digits\"\u003e\u003cstrong\u003e41. Count Specific Digits\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e122333\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"42-generating-fibonacci-sequence-using-recursion\"\u003e\u003cstrong\u003e42. Generating Fibonacci Sequence Using Recursion\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [0, 1, 1, 2, 3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"43-finding-all-divisors\"\u003e\u003cstrong\u003e43. Finding All Divisors\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 2, 3, 4, 6, 12]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"44-finding-the-average-of-numbers\"\u003e\u003cstrong\u003e44. Finding the Average of Numbers\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"45-finding-the-mode\"\u003e\u003cstrong\u003e45. Finding the Mode\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"46-string-length-without-built-in-functions\"\u003e\u003cstrong\u003e46. String Length Without Built-In Functions\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"47-generating-a-number-pyramid\"\u003e\u003cstrong\u003e47. Generating a Number Pyramid\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"48-sum-of-prime-factors\"\u003e\u003cstrong\u003e48. Sum of Prime Factors\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e)].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"49-finding-the-second-largest-number\"\u003e\u003cstrong\u003e49. Finding the Second Largest Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e99\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 45\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"50-longest-substring-without-repeating-characters\"\u003e\u003cstrong\u003e50. Longest Substring Without Repeating Characters\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;abcabcbb\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003cp\u003eLet me know if you\u0026rsquo;d like explanations for any of these!\u003c/p\u003e","tags":[],"title":""},{"content":"Here are JavaScript/ES6 implementations for these problems:\n31. Generating Pascal’s Triangle function generatePascalsTriangle(rows) { const triangle = []; for (let i = 0; i \u0026lt; rows; i++) { const row = Array(i + 1).fill(1); for (let j = 1; j \u0026lt; i; j++) { row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]; } triangle.push(row); } return triangle.map((row) =\u0026gt; row.join(\u0026#34; \u0026#34;)).join(\u0026#34;\\n\u0026#34;); } console.log(generatePascalsTriangle(4));\r32. Finding the Median of an Array function findMedian(array) { const sorted = array.slice().sort((a, b) =\u0026gt; a - b); const mid = Math.floor(sorted.length / 2); return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid]; } console.log(findMedian([3, 1, 2, 4, 5])); // 3 33. Calculating the Power of a Number const power = (base, exponent) =\u0026gt; base ** exponent; console.log(power(2, 3)); // 8 34. Checking for an Anagram function areAnagrams(string1, string2) { const normalize = (str) =\u0026gt; str.split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); return normalize(string1) === normalize(string2); } console.log(areAnagrams(\u0026#34;listen\u0026#34;, \u0026#34;silent\u0026#34;)); // true 35. Finding the Sum of Prime Numbers in a Range function isPrime(num) { if (num \u0026lt; 2) return false; for (let i = 2; i \u0026lt;= Math.sqrt(num); i++) { if (num % i === 0) return false; } return true; } function sumOfPrimes(range) { const [start, end] = range; let sum = 0; for (let i = start; i \u0026lt;= end; i++) { if (isPrime(i)) sum += i; } return sum; } console.log(sumOfPrimes([1, 10])); // 17 36. Finding the N-th Triangular Number const triangularNumber = (n) =\u0026gt; (n * (n + 1)) / 2; console.log(triangularNumber(4)); // 10 37. Checking for Perfect Squares const isPerfectSquare = (number) =\u0026gt; Number.isInteger(Math.sqrt(number)); console.log(isPerfectSquare(16)); // true 38. Finding the Sum of Squares of Digits function sumOfSquares(number) { return String(number) .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Math.pow(Number(digit), 2), 0); } console.log(sumOfSquares(123)); // 14 39. Generating a Square Matrix function generateMatrix(size) { let num = 1; return Array.from({ length: size }, () =\u0026gt; Array.from({ length: size }, () =\u0026gt; num++)); } console.log(generateMatrix(3));\r40. Sum of Digits Until Single Digit function sumUntilSingleDigit(number) { while (number \u0026gt; 9) { number = String(number) .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Number(digit), 0); } return number; } console.log(sumUntilSingleDigit(9875)); // 2 41. Count Specific Digits function countDigit(number, digit) { return String(number) .split(\u0026#34;\u0026#34;) .filter((d) =\u0026gt; Number(d) === digit).length; } console.log(countDigit(122333, 3)); // 3 42. Generating Fibonacci Sequence Using Recursion function fibonacci(n) { if (n \u0026lt;= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } console.log(Array.from({ length: 5 }, (_, i) =\u0026gt; fibonacci(i))); // [0, 1, 1, 2, 3] 43. Finding All Divisors function findDivisors(number) { return Array.from({ length: number }, (_, i) =\u0026gt; i + 1).filter((i) =\u0026gt; number % i === 0); } console.log(findDivisors(12)); // [1, 2, 3, 4, 6, 12] 44. Finding the Average of Numbers const average = (array) =\u0026gt; array.reduce((sum, num) =\u0026gt; sum + num, 0) / array.length; console.log(average([1, 2, 3, 4, 5])); // 3 45. Finding the Mode function findMode(array) { const freqMap = array.reduce((map, num) =\u0026gt; ((map[num] = (map[num] || 0) + 1), map), {}); const maxFreq = Math.max(...Object.values(freqMap)); return +Object.keys(freqMap).find((key) =\u0026gt; freqMap[key] === maxFreq); } console.log(findMode([1, 2, 2, 3, 4, 4, 4])); // 4 46. String Length Without Built-In Functions function stringLength(str) { let length = 0; for (let char of str) length++; return length; } console.log(stringLength(\u0026#34;hello\u0026#34;)); // 5 47. Generating a Number Pyramid function generatePyramid(rows) { return Array.from({ length: rows }, (_, i) =\u0026gt; Array.from({ length: i + 1 }, (_, j) =\u0026gt; j + 1).join(\u0026#34;\u0026#34;)).join(\u0026#34;\\n\u0026#34;); } console.log(generatePyramid(4));\r48. Sum of Prime Factors function sumOfPrimeFactors(number) { const factors = []; for (let i = 2; i \u0026lt;= number; i++) { while (number % i === 0) { factors.push(i); number /= i; } } return [...new Set(factors)].reduce((sum, factor) =\u0026gt; sum + factor, 0); } console.log(sumOfPrimeFactors(12)); // 5 49. Finding the Second Largest Number function secondLargest(array) { const unique = [...new Set(array)]; unique.sort((a, b) =\u0026gt; b - a); return unique[1]; } console.log(secondLargest([10, 20, 4, 45, 99])); // 45 50. Longest Substring Without Repeating Characters function longestUniqueSubstring(string) { let max = 0, start = 0, seen = {}, longest = \u0026#34;\u0026#34;; for (let end = 0; end \u0026lt; string.length; end++) { const char = string[end]; if (char in seen \u0026amp;\u0026amp; seen[char] \u0026gt;= start) { start = seen[char] + 1; } seen[char] = end; if (end - start + 1 \u0026gt; max) { max = end - start + 1; longest = string.slice(start, end + 1); } } return longest; } console.log(longestUniqueSubstring(\u0026#34;abcabcbb\u0026#34;)); // \u0026#34;abc\u0026#34; Let me know if you\u0026rsquo;d like explanations for any of these!\n","date":"0001-01-01","id":5,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003cp\u003eHere are JavaScript/ES6 implementations for these problems:\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"31-generating-pascals-triangle\"\u003e\u003cstrong\u003e31. Generating Pascal’s Triangle\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePascalsTriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePascalsTriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"32-finding-the-median-of-an-array\"\u003e\u003cstrong\u003e32. Finding the Median of an Array\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efloor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"33-calculating-the-power-of-a-number\"\u003e\u003cstrong\u003e33. Calculating the Power of a Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epower\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eexponent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"nx\"\u003eexponent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 8\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"34-checking-for-an-anagram\"\u003e\u003cstrong\u003e34. Checking for an Anagram\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eareAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eareAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;listen\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;silent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"35-finding-the-sum-of-prime-numbers-in-a-range\"\u003e\u003cstrong\u003e35. Finding the Sum of Prime Numbers in a Range\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 17\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"36-finding-the-n-th-triangular-number\"\u003e\u003cstrong\u003e36. Finding the N-th Triangular Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangularNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etriangularNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"37-checking-for-perfect-squares\"\u003e\u003cstrong\u003e37. Checking for Perfect Squares\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectSquare\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"38-finding-the-sum-of-squares-of-digits\"\u003e\u003cstrong\u003e38. Finding the Sum of Squares of Digits\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 14\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"39-generating-a-square-matrix\"\u003e\u003cstrong\u003e39. Generating a Square Matrix\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egenerateMatrix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egenerateMatrix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"40-sum-of-digits-until-single-digit\"\u003e\u003cstrong\u003e40. Sum of Digits Until Single Digit\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumUntilSingleDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumUntilSingleDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9875\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"41-count-specific-digits\"\u003e\u003cstrong\u003e41. Count Specific Digits\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e122333\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"42-generating-fibonacci-sequence-using-recursion\"\u003e\u003cstrong\u003e42. Generating Fibonacci Sequence Using Recursion\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [0, 1, 1, 2, 3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"43-finding-all-divisors\"\u003e\u003cstrong\u003e43. Finding All Divisors\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 2, 3, 4, 6, 12]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"44-finding-the-average-of-numbers\"\u003e\u003cstrong\u003e44. Finding the Average of Numbers\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"45-finding-the-mode\"\u003e\u003cstrong\u003e45. Finding the Mode\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e{});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"46-string-length-without-built-in-functions\"\u003e\u003cstrong\u003e46. String Length Without Built-In Functions\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"47-generating-a-number-pyramid\"\u003e\u003cstrong\u003e47. Generating a Number Pyramid\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"48-sum-of-prime-factors\"\u003e\u003cstrong\u003e48. Sum of Prime Factors\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e)].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"49-finding-the-second-largest-number\"\u003e\u003cstrong\u003e49. Finding the Second Largest Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e99\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 45\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"50-longest-substring-without-repeating-characters\"\u003e\u003cstrong\u003e50. Longest Substring Without Repeating Characters\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;abcabcbb\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003cp\u003eLet me know if you\u0026rsquo;d like explanations for any of these!\u003c/p\u003e","tags":[],"title":""},{"content":"31. Generating Pascal’s Triangle function generatePascalsTriangle(rows) { const triangle = []; for (let i = 0; i \u0026lt; rows; i++) { const row = Array(i + 1).fill(1); for (let j = 1; j \u0026lt; i; j++) { row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]; } triangle.push(row); } return triangle.map((row) =\u0026gt; row.join(\u0026#34; \u0026#34;)).join(\u0026#34;\\n\u0026#34;); } console.log(generatePascalsTriangle(4));\r","date":"0001-01-01","id":6,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"31-generating-pascals-triangle\"\u003e\u003cstrong\u003e31. Generating Pascal’s Triangle\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePascalsTriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003erow\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efill\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003erow\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePascalsTriangle\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"32. Finding the Median of an Array function findMedian(array) { const sorted = array.slice().sort((a, b) =\u0026gt; a - b); const mid = Math.floor(sorted.length / 2); return sorted.length % 2 === 0 ? (sorted[mid - 1] + sorted[mid]) / 2 : sorted[mid]; } console.log(findMedian([3, 1, 2, 4, 5])); // 3 ","date":"0001-01-01","id":7,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"32-finding-the-median-of-an-array\"\u003e\u003cstrong\u003e32. Finding the Median of an Array\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efloor\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esorted\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003emid\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMedian\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"33. Calculating the Power of a Number const power = (base, exponent) =\u0026gt; base ** exponent; console.log(power(2, 3)); // 8 ","date":"0001-01-01","id":8,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"33-calculating-the-power-of-a-number\"\u003e\u003cstrong\u003e33. Calculating the Power of a Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epower\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ebase\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eexponent\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ebase\u003c/span\u003e \u003cspan class=\"o\"\u003e**\u003c/span\u003e \u003cspan class=\"nx\"\u003eexponent\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epower\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 8\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"34. Checking for an Anagram function areAnagrams(string1, string2) { const normalize = (str) =\u0026gt; str.split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); return normalize(string1) === normalize(string2); } console.log(areAnagrams(\u0026#34;listen\u0026#34;, \u0026#34;silent\u0026#34;)); // true ","date":"0001-01-01","id":9,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"34-checking-for-an-anagram\"\u003e\u003cstrong\u003e34. Checking for an Anagram\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eareAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enormalize\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eareAnagrams\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;listen\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;silent\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"35. Finding the Sum of Prime Numbers in a Range function isPrime(num) { if (num \u0026lt; 2) return false; for (let i = 2; i \u0026lt;= Math.sqrt(num); i++) { if (num % i === 0) return false; } return true; } function sumOfPrimes(range) { const [start, end] = range; let sum = 0; for (let i = start; i \u0026lt;= end; i++) { if (isPrime(i)) sum += i; } return sum; } console.log(sumOfPrimes([1, 10])); // 17 ","date":"0001-01-01","id":10,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"35-finding-the-sum-of-prime-numbers-in-a-range\"\u003e\u003cstrong\u003e35. Finding the Sum of Prime Numbers in a Range\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimes\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 17\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"36. Finding the N-th Triangular Number const triangularNumber = (n) =\u0026gt; (n * (n + 1)) / 2; console.log(triangularNumber(4)); // 10 ","date":"0001-01-01","id":11,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"36-finding-the-n-th-triangular-number\"\u003e\u003cstrong\u003e36. Finding the N-th Triangular Number\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003etriangularNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003etriangularNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"37. Checking for Perfect Squares const isPerfectSquare = (number) =\u0026gt; Number.isInteger(Math.sqrt(number)); console.log(isPerfectSquare(16)); // true ","date":"0001-01-01","id":12,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"37-checking-for-perfect-squares\"\u003e\u003cstrong\u003e37. Checking for Perfect Squares\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectSquare\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eisInteger\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectSquare\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e16\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// true\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"38. Finding the Sum of Squares of Digits function sumOfSquares(number) { return String(number) .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Math.pow(Number(digit), 2), 0); } console.log(sumOfSquares(123)); // 14 ","date":"0001-01-01","id":13,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"38-finding-the-sum-of-squares-of-digits\"\u003e38. Finding the Sum of Squares of Digits\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfSquares\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e123\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 14\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"39. Generating a Square Matrix function generateMatrix(size) { let num = 1; return Array.from({ length: size }, () =\u0026gt; Array.from({ length: size }, () =\u0026gt; num++)); } console.log(generateMatrix(3));\r","date":"0001-01-01","id":14,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"39-generating-a-square-matrix\"\u003e39. Generating a Square Matrix\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egenerateMatrix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esize\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003esize\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egenerateMatrix\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"40. Sum of Digits Until Single Digit function sumUntilSingleDigit(number) { while (number \u0026gt; 9) { number = String(number) .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Number(digit), 0); } return number; } console.log(sumUntilSingleDigit(9875)); // 2 ","date":"0001-01-01","id":15,"permalink":"/prep-1/prep-1/31-to-40/","summary":"\u003ch3 id=\"40-sum-of-digits-until-single-digit\"\u003e40. Sum of Digits Until Single Digit\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumUntilSingleDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumUntilSingleDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9875\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 2\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"41. Count Specific Digits function countDigit(number, digit) { return String(number) .split(\u0026#34;\u0026#34;) .filter((d) =\u0026gt; Number(d) === digit).length; } console.log(countDigit(122333, 3)); // 3 42. Generating Fibonacci Sequence Using Recursion function fibonacci(n) { if (n \u0026lt;= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } console.log(Array.from({ length: 5 }, (_, i) =\u0026gt; fibonacci(i))); // [0, 1, 1, 2, 3] 43. Finding All Divisors function findDivisors(number) { return Array.from({ length: number }, (_, i) =\u0026gt; i + 1).filter((i) =\u0026gt; number % i === 0); } console.log(findDivisors(12)); // [1, 2, 3, 4, 6, 12] 44. Finding the Average of Numbers const average = (array) =\u0026gt; array.reduce((sum, num) =\u0026gt; sum + num, 0) / array.length; console.log(average([1, 2, 3, 4, 5])); // 3 45. Finding the Mode function findMode(array) { const freqMap = array.reduce((map, num) =\u0026gt; ((map[num] = (map[num] || 0) + 1), map), {}); const maxFreq = Math.max(...Object.values(freqMap)); return +Object.keys(freqMap).find((key) =\u0026gt; freqMap[key] === maxFreq); } console.log(findMode([1, 2, 2, 3, 4, 4, 4])); // 4 46. String Length Without Built-In Functions function stringLength(str) { let length = 0; for (let char of str) length++; return length; } console.log(stringLength(\u0026#34;hello\u0026#34;)); // 5 47. Generating a Number Pyramid function generatePyramid(rows) { return Array.from({ length: rows }, (_, i) =\u0026gt; Array.from({ length: i + 1 }, (_, j) =\u0026gt; j + 1).join(\u0026#34;\u0026#34;)).join(\u0026#34;\\n\u0026#34;); } console.log(generatePyramid(4));\r48. Sum of Prime Factors function sumOfPrimeFactors(number) { const factors = []; for (let i = 2; i \u0026lt;= number; i++) { while (number % i === 0) { factors.push(i); number /= i; } } return [...new Set(factors)].reduce((sum, factor) =\u0026gt; sum + factor, 0); } console.log(sumOfPrimeFactors(12)); // 5 49. Finding the Second Largest Number function secondLargest(array) { const unique = [...new Set(array)]; unique.sort((a, b) =\u0026gt; b - a); return unique[1]; } console.log(secondLargest([10, 20, 4, 45, 99])); // 45 50. Longest Substring Without Repeating Characters function longestUniqueSubstring(string) { let max = 0, start = 0, seen = {}, longest = \u0026#34;\u0026#34;; for (let end = 0; end \u0026lt; string.length; end++) { const char = string[end]; if (char in seen \u0026amp;\u0026amp; seen[char] \u0026gt;= start) { start = seen[char] + 1; } seen[char] = end; if (end - start + 1 \u0026gt; max) { max = end - start + 1; longest = string.slice(start, end + 1); } } return longest; } console.log(longestUniqueSubstring(\u0026#34;abcabcbb\u0026#34;)); // \u0026#34;abc\u0026#34; Let me know if you\u0026rsquo;d like explanations for any of these!\n","date":"0001-01-01","id":16,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"41-count-specific-digits\"\u003e41. Count Specific Digits\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ed\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountDigit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e122333\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"42-generating-fibonacci-sequence-using-recursion\"\u003e42. Generating Fibonacci Sequence Using Recursion\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [0, 1, 1, 2, 3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"43-finding-all-divisors\"\u003e43. Finding All Divisors\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 2, 3, 4, 6, 12]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"44-finding-the-average-of-numbers\"\u003e44. Finding the Average of Numbers\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"45-finding-the-mode\"\u003e45. Finding the Mode\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e{});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"46-string-length-without-built-in-functions\"\u003e46. String Length Without Built-In Functions\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"47-generating-a-number-pyramid\"\u003e47. Generating a Number Pyramid\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"48-sum-of-prime-factors\"\u003e48. Sum of Prime Factors\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e)].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"49-finding-the-second-largest-number\"\u003e49. Finding the Second Largest Number\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e99\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 45\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"50-longest-substring-without-repeating-characters\"\u003e50. Longest Substring Without Repeating Characters\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;abcabcbb\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003cp\u003eLet me know if you\u0026rsquo;d like explanations for any of these!\u003c/p\u003e","tags":[],"title":""},{"content":"42. Generating Fibonacci Sequence Using Recursion function fibonacci(n) { if (n \u0026lt;= 1) return n; return fibonacci(n - 1) + fibonacci(n - 2); } console.log(Array.from({ length: 5 }, (_, i) =\u0026gt; fibonacci(i))); // [0, 1, 1, 2, 3] ","date":"0001-01-01","id":17,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"42-generating-fibonacci-sequence-using-recursion\"\u003e42. Generating Fibonacci Sequence Using Recursion\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [0, 1, 1, 2, 3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"43. Finding All Divisors function findDivisors(number) { return Array.from({ length: number }, (_, i) =\u0026gt; i + 1).filter((i) =\u0026gt; number % i === 0); } console.log(findDivisors(12)); // [1, 2, 3, 4, 6, 12] ","date":"0001-01-01","id":18,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"43-finding-all-divisors\"\u003e43. Finding All Divisors\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindDivisors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 2, 3, 4, 6, 12]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"44. Finding the Average of Numbers const average = (array) =\u0026gt; array.reduce((sum, num) =\u0026gt; sum + num, 0) / array.length; console.log(average([1, 2, 3, 4, 5])); // 3 ","date":"0001-01-01","id":19,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"44-finding-the-average-of-numbers\"\u003e44. Finding the Average of Numbers\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eaverage\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 3\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"45. Finding the Mode function findMode(array) { const freqMap = array.reduce((map, num) =\u0026gt; ((map[num] = (map[num] || 0) + 1), map), {}); const maxFreq = Math.max(...Object.values(freqMap)); return +Object.keys(freqMap).find((key) =\u0026gt; freqMap[key] === maxFreq); } console.log(findMode([1, 2, 2, 3, 4, 4, 4])); // 4 ","date":"0001-01-01","id":20,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"45-finding-the-mode\"\u003e45. Finding the Mode\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"p\"\u003e{});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ekeys\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efind\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003efreqMap\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003emaxFreq\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindMode\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 4\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"46. String Length Without Built-In Functions function stringLength(str) { let length = 0; for (let char of str) length++; return length; } console.log(stringLength(\u0026#34;hello\u0026#34;)); // 5 ","date":"0001-01-01","id":21,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"46-string-length-without-built-in-functions\"\u003e46. String Length Without Built-In Functions\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estringLength\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hello\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"47. Generating a Number Pyramid function generatePyramid(rows) { return Array.from({ length: rows }, (_, i) =\u0026gt; Array.from({ length: i + 1 }, (_, j) =\u0026gt; j + 1).join(\u0026#34;\u0026#34;)).join(\u0026#34;\\n\u0026#34;); } console.log(generatePyramid(4));\r","date":"0001-01-01","id":22,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"47-generating-a-number-pyramid\"\u003e47. Generating a Number Pyramid\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\\n\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egeneratePyramid\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"48. Sum of Prime Factors function sumOfPrimeFactors(number) { const factors = []; for (let i = 2; i \u0026lt;= number; i++) { while (number % i === 0) { factors.push(i); number /= i; } } return [...new Set(factors)].reduce((sum, factor) =\u0026gt; sum + factor, 0); } console.log(sumOfPrimeFactors(12)); // 5 ","date":"0001-01-01","id":23,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"48-sum-of-prime-factors\"\u003e48. Sum of Prime Factors\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e/=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efactors\u003c/span\u003e\u003cspan class=\"p\"\u003e)].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efactor\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfPrimeFactors\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"49. Finding the Second Largest Number function secondLargest(array) { const unique = [...new Set(array)]; unique.sort((a, b) =\u0026gt; b - a); return unique[1]; } console.log(secondLargest([10, 20, 4, 45, 99])); // 45 ","date":"0001-01-01","id":24,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"49-finding-the-second-largest-number\"\u003e49. Finding the Second Largest Number\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esecondLargest\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e45\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e99\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 45\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"50. Longest Substring Without Repeating Characters function longestUniqueSubstring(string) { let max = 0, start = 0, seen = {}, longest = \u0026#34;\u0026#34;; for (let end = 0; end \u0026lt; string.length; end++) { const char = string[end]; if (char in seen \u0026amp;\u0026amp; seen[char] \u0026gt;= start) { start = seen[char] + 1; } seen[char] = end; if (end - start + 1 \u0026gt; max) { max = end - start + 1; longest = string.slice(start, end + 1); } } return longest; } console.log(longestUniqueSubstring(\u0026#34;abcabcbb\u0026#34;)); // \u0026#34;abc\u0026#34; ","date":"0001-01-01","id":25,"permalink":"/prep-1/prep-1/41-to-50/","summary":"\u003ch3 id=\"50-longest-substring-without-repeating-characters\"\u003e50. Longest Substring Without Repeating Characters\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003ein\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eseen\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003emax\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elongestUniqueSubstring\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;abcabcbb\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;abc\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":""},{"content":"This is a list of AWESOME components. Nope, it\u0026rsquo;s NOT a comprehensive list of every React component under the sun. So, what does \u0026ldquo;awesome\u0026rdquo; mean? Well:\nIt solves a real problem It does so in a 🦄 unique, 🦋 beautiful, or 🏆 exceptional way. (And it\u0026rsquo;s not super popular and well-known\u0026hellip; no point in listing those.) It has recent code commits! Look for a 🚀 for truly amazing projects. And look for quickie maintainer commentary and reviews in (italic parens) after some listings of note.\nSee also: Awesome React Frameworks.\nTable of Contents UI Components Editable data grid / spreadsheet Table Infinite Scroll Overlay Notification Tooltip Menu Sticky Tabs Loader Captcha Carousel Buttons Collapse Chart Command palette Tree UI Navigation Custom Scrollbar Audio / Video Map Time / Date / Age Photo / Image Icons Paginator Markdown Viewer Canvas Screenshot Miscellaneous Form Components Date / Time picker Emoji picker Input Types Autocomplete Select Color Picker Toggle Slider Radio Button Type Select Tag Input Autosize Input / Textarea Star Rating Drag and Drop Sortable List Rich Text Editor Markdown Editor Image Editing Form Component Collections Miscellaneous Syntax Highlight UI Layout UI Animation Parallax UI Frameworks Responsive Material Design Mobile Component Collections UI Utilities Reporter Visibility Reporter Measurement Reporter Device Input Keyboard Events Scroll Events Touch Swipe Mouse Events Meta Tags Portal Test User Behavior Code Design Data Store Form Logic Router Props from server Communication with server CSS / Style HTML Template Isomorphic Apps Boilerplate Miscellaneous Utilities i18n Framework bindings / integrations Integrations with Third Party Services Performance UI Inspect Lazy Load App Size Server-Side Rendering Dev Tools Test Redux Inspect Miscellaneous Miscellaneous Static Website Generator Cloud Solutions Databases UI Components Back to top ⬆️\nEditable data grid / spreadsheet fortune-sheet - An online spreedsheet component that provides out-of-the-box features just like Excel. AG Grid - Advanced Data Grid / Data Table supporting Javascript / React / AngularJS / Web Components. gigatables-react - Sorting, pagination/infinite scroll, global/column search, AJAX CRUD, and more. MUI X Data grid - demo/docs - Fast and customizable data grid with advanced features for power users and complex use cases. react-data-grid - Excel-like grid. revo-grid - demo/docs - Powerfull Data Grid for React / AngularJS / Vue / Web Components with advanced customization. ReactGrid - demo/docs - Add spreadsheet-like behavior to your app jqwidgets-react-grid - Filtering, Pagination, Grouping, Export to Excel, PDF, CRUD and more. Table ka-table - demo - Customizable table component with sorting, filtering, grouping, virtualization, editing etc.\nmantine-datatable - demo/docs - Lightweight table component for Mantine UI applications, with lots of features\nmaterial-table - demo/docs - Built on Material UI, plus: grouping, tree data, expandable rows, export, inline editing\nmui-datatables - Built on Material UI. Search, styling, filtering, resize/hide columns, export, print, select/expand rows.\nreact-data-table - demo/docs - accessible, responsive, themable, declaratively configurable table with sorting, selectable rows, expandable rows, pagination\nTanStack Table - demo - Headless UI for building powerful tables \u0026amp; datagrids\nreact-table-library - demo - React Table Library \u0026ndash; an almost headless table library \u0026ndash; for building better tables.\nrsuite-table - demo/docs - A table component that supports virtualized.\nsematable - Client side sorting, pagination, and text filter for redux/react based apps.\nDevExtreme React Grid - High-performance plugin-based data grid for Bootstrap and Material Design.\nSmart React Grid - Fast and feature-complete data grid with Material Design.\nKendoReact Grid - Powerful data grid component with 100+ ready-to-use features like paging, sorting, export to Excel, and more.\nMaterial-React-Table - A fully featured Material UI V5 implementation of TanStack React Table V8, written from the ground up in TypeScript\nAG Grid - The Best JavaScript Grid in the World\nInfinite Scroll @egjs/react-infinitegrid - npm - demo - A module used to arrange card elements including content infinitely according to various layout types. react-lazyload - Lazyload your Component, Image or anything else where the performance matters. react-list - A versatile infinite scroll React component. @af-utils/virtual - demo/docs - Render large scrollable lists and grids. react-window - demo - React components for efficiently rendering large lists and tabular data virtua - demo - A zero-config, fast and small (~3kB) virtual list component for React, Vue and Solid. Overlay Display overlay / modal / alert / dialog / lightbox / popup\nreact-aria-modal - A fully accessible and flexible React modal built according WAI-ARIA Authoring Practices. react-modal - Accessible modal dialog component for React. reoverlay - demo - The missing solution for managing modals. sweetalert2 - demo/docs - A beautiful, responsive, highly customizable and accessible (WAI-ARIA) replacement for JavaScript\u0026rsquo;s popup boxes. Zero dependencies. sweetalert2-react-content - Official SweetAlert2 enhancer adding support for React elements as content Notification Toaster / snackbar — Notify the user with a modeless temporary little popup\nreact-notifications-component - demo - Highly customizable and easy-to-use component for notifications. notistack - demo - docs - Highly customizable notification snackbars (toasts) that can be stacked on top of each other react-local-toast - demo - docs - show feedback linked to particular component instead of app-wide toasts. react-toast - demo - docs - Minimal toast notifications. 🚀 react-toastify - demo - best bet out there at the moment. Hooks support. No refs. reapop - A React \u0026amp; Redux notifications system. simple-react-notifications - demo - Tiny notification library (1kb gzip). react-hot-toast - demo - Smoking hot Notifications for React. Lightweight, customizable and beautiful by default. Sonner - An opinionated toast component for React. Tooltip react-tooltip - React tooltip component. Menu Menus / sidebars\nhamburger-react - demo/docs - Animated hamburger menu icons for React. react-burger-menu - An off-canvas sidebar with effects and styles. react-offcanvas - Off-canvas menus for React. react-planet - demo - Create circular menus which looks like planets. mantine-contextmenu - demo/docs - Context-menu hook/component for applications built with Mantine UI. Sticky Fixed headers / scroll-up headers / sticky elements\nreact-headroom - Hide your header until you need it. react-stickynode - A performant and comprehensive React sticky. Tabs react-tabs - React tabs component. react-tabtab - React, tabs. Loader Loaders / spinners / progress bars — Let the user know that something is loading\nreact-loader-spinner - Collection set of react-spinner for async operation. react-redux-loading-bar - Simple Loading Bar for Redux and React. react-spinners-css - Amazing collection of react spinners components. react-spinners - A collection of loading spinner components for react. react-content-loader - SVG-Powered component to easily create placeholder loadings (like Facebook\u0026rsquo;s cards loading). Captcha react-simple-captcha - npm - demo - React Simple Captcha is a very powerful, highly customizable and easy to use captcha for React JS. procaptcha - demo - docs - Privacy focused free CAPTCHA Carousel @egjs/react-flicking - npm - demo - It\u0026rsquo;s reliable, flexible and extendable carousel. react-awesome-slider - demo - Fullpage, 3D animated, 60fps media and content slider/carousel. pure-react-carousel - Built from scratch and not highly opinionated. react-id-swiper - A library to use idangerous Swiper as a ReactJs component react-instagram-zoom-slider - demo - A slider component with pinch to zoom capabilities inspired by Instagram. react-responsive-carousel - React.js Responsive Carousel (with Swipe). react-slick - React carousel component. keen-slider - demo - Performant carousel/slider with native touch/swipe behavior. swiper - demo - docs - The most modern free mobile touch slider with hardware accelerated transitions and amazing native behavior. Buttons react-awesome-button - demo - 3D animated 60fps buttons with load progress and social share actions. reactive-button - demo - docs - A beautiful animated button component with progress indicator. Collapse react-accessible-accordion - Accessible Accordion component for React. react-collapse - Component-wrapper for collapse animation with react-motion. react-tabbordion - demo - Universal, semantic and CSS-only components for creating Accordions and Tabs. Chart Display data in charts / graphs / diagrams\nchartify - React.js plugin for building animated draggable and customizable charts. essential js 2 charts - Beautiful and interactive charts \u0026amp; graphs for react. echarts for react - Wrapper around beautiful Apache Echarts jscharting-react – React chart component offering a complete set of chart types and engaging data visualizations with JSCharting. react-chartist - React component for Chartist.js. react-charty - demo - Small but powerful interactive data viz with multiple chart types, animations, zooming, theming. react-chartjs-2 - Common react charting components using Chart.js 2.0. react-d3-components - D3 Components for React. react-dazzle - Dashboards made easy in React JS. react-google-charts - React-google-charts React component. react-highcharts - React-highcharts. react-sigmajs - Lightweight but powerful library for drawing network graphs built on top of SigmaJS. react-sparklines - Beautiful and expressive Sparklines React component. react-timeseries-charts - Declarative timeseries charts. react-vis - Data visualization library based on React and d3. recharts - Redefined chart library built with React and D3. rumble-charts - React components for building composable and flexible charts. victory - Data viz for React. semiotic - Semiotic is a data visualization framework for React. DevExtreme React Chart - High-performance plugin-based chart for Bootstrap and Material Design. Smart React Chart - Feature complete Charting library. react-muze - React wrapper for muze(free data visualization library for creating exploratory data visualizations in browser, using WebAssembly) Flowchart React - Flowchart \u0026amp; Flowchart designer for React.js. react-dashboard - Isomorphic Dashboards. Command palette cmdk - Fast, composable, unstyled command menu for React. kbar - demo - Fast, portable, and extensible cmd+k interface. Tree Display a tree data structure\nreact-arborist - demo - A Full-Featured Tree View: headless, virtualized, multi-selectable, drag-n-drop, keyboard navigation, search react-complex-tree - demo - docs - Unopinionated Accessible Tree Component with Multi-Select, Drag-And-Drop and Search react-treeview - Easy, light, flexible tree view made with React. he-tree-react - demo - docs - Tree, customizable UI, flat data, tree data, drag-n-drop, placeholder for drop, foldable, checkbox, virtualized. UI Navigation Ways to navigate views\nreact-scroll - React scroll component. react-swipeable-views - A React Component for binded Tabs and Swipeable Views. Custom Scrollbar rc-scrollbars - demo - Customizable scrollbars with flex options and 60FPS react-custom-scroll - demo - Easily customize the browser scroll bar with native OS scroll behavior. react-shadow-scroll - Component that customizes the image and inserts shadow when scrolling exists. Audio / Video react-dailymotion - Dailymotion player component for React. react-player - A react component for playing a variety of URLs, including YouTube. react-soundplayer - Create custom SoundCloud players with React. react-youtube - React.js powered YouTube player component. video-react - A web video player built for the HTML5 world using React library. material-ui-audio-player - Audio player for material ui design. react-vision-camera - Camera component for React using getUserMedia. We can use this component for computer vision tasks like barcode scanning, text recognition, etc. react-barcode-qrcode-scanner - Barcode and QR code scanner component for React. It uses react-vision-camera to access the camera and Dynamsoft Barcode Reader to read barcodes. Map google-map-react - Universal google map react component, allows render react components on the google map. pigeon-maps - demo - ReactJS Maps without external dependencies. react-geosuggest - A React autosuggest for the Google Maps Places API. react-leaflet - React components for Leaflet maps. react-map-gl - A React wrapper for MapboxGL-js and overlay API. react-svg-map - demo - A set of components to display an interactive SVG map. Time / Date / Age Display time / date / age\nreact-timeago - A simple time-ago component for ReactJs. timeago-react - Format date with *** time ago statement. eg: \u0026lsquo;3 hours ago\u0026rsquo;. react-google-flight-datepicker - Google flight date picker implemented in ReactJS. Photo / Image Display images / photos\nlightGallery - demo - docs - Full-featured lightbox gallery component. react-compare-image - demo - React component to compare two images using a slider. react-image-gallery - Responsive image gallery, carousel, image slider react component. yet-another-react-lightbox - demo - docs - React lightbox component. react-intense - A React component for viewing large images up close. react-photo-album - demo - docs - Responsive React Photo Gallery. react-svg-pan-zoom - A React component that adds pan and zoom features to SVG. react-particle-image - demo - Render images as interactive particles. react-imgix - Add fast, responsive images as an image, picture, or background! @frameright/react-image-display-control - Define zoom regions for smart responsive images. zoom-image - demo - docs - A little yet powerful framework agnostic library to zoom image on the web Icons Display icons / icon set / emojis\niconify-react - Over 40k icons from 50+ icon sets, including all popular icon and emoji sets. react-icons - Svg react icons of popular icon packs using ES6 imports. react-open-doodles - Awesome free illustrations as react components. react-icomoon - With react-icomoon you can easily use the icons you have selected or created in icomoon. tabler-icons-react - A set of over 450 free MIT-licensed high-quality SVG icons. Lucide - Beautiful \u0026amp; consistent icon toolkit made by the community. Open-source project and a fork of Feather Icons. Paginator Display a control element to paginate\nreact-paginate - A ReactJS component that creates a pagination. react-laravel-paginex - Laravel Pagination with ReactJS (customizable). paginated - React render props \u0026amp; custom hook to build pagination. react-steps - Demo - Responsive React Stepper. Markdown Viewer Display parsed markdow source\nreact-markdown - Render Markdown as React components. Canvas Sketch input using Canvas or SVG\nreact-konva - React Konva is a JavaScript library for drawing complex canvas graphics with bindings to the Konva Framework. react-sketch - A Sketch tool for React based applications, backed-up by FabricJS react-sketch-canvas - Demo Freehand vector drawing tool for React using SVG as canvas. Accepts input from Mouse, touch, and graphic tablets react-heat-map - A lightweight calendar heatmap react component built on SVG, customizable version of GitHub\u0026rsquo;s contribution graph. Screenshot html2canvas - Take screenshots of any part of your web page using Javascript. Miscellaneous puck - demo - The self-hosted visual editor for React react-advanced-news-ticker - demo - A flexible and animated vertical news ticker component react-avatar-generator - Allows users to create random kaleidoscopes to be used as avatars. react-awesome-query-builder - demo - Visual query builder from form fields, with SQL, MongoDB and JSON export react-blur - React component for blurred backgrounds. react-demo-tab - demo - A React component to easily create demos of other components. react-facebook - Facebook components like a Login button, Like, Share, Comments, Page or Embedded Post. fastcomments-react - demo - FastComments component for embedding a live comment thread on a page or SPA. react-pdf-viewer - docs - A React component to view a PDF document. react-simple-chatbot - demo - A simple chatbot component to create conversation chats. react-file-reader-input - File input component for control for file reading styling and abstraction. react-filter-control - The React filterbuilder component for building the filter criteria in the UI. react-headings - Auto-increment your HTML headings (h1, h2, etc.) for improved accessibility and SEO, no matter your component structure, while you keep full control of what\u0026rsquo;s rendered. react-joyride - Create walkthroughs and guided tours for your ReactJS apps. Now with standalone tooltips!. react-mouse-select - Demo A component that allows selecting DOM elements by moving the mouse react-resizable-and-movable - Resizable and movable component for React. react-resizable-box - Resizable component for React. #reactjs. react-searchbox-awesome - demo - Minimalistic searchbox. react-split-pane - React split-pane component. react-swipe-to-delete-ios - demo - To delete an item in a list the same way iOS does. react-swipeable-list - demo - Configurable component to render list with swipeable items. typography - A powerful toolkit for building websites with beautiful typography. react-pulse-text - demo/docs - Allows you to animate the text of any property of another component. captcha-image - Allows you to generate a random captcha image with options. react-pdf - Display PDFs in your React app as easily as if they were images. react-customizable-chat-bot - Demo - Build your own chatbot matching your brand needs in minutes. @restpace/schema-form - Demo - Easily build complex forms automatically from a JSON Schema. react-darkreader - A React Hook for adding a dark / night mode to your site inspired by darkreader. react-apple-signin-auth - Apple signin for React using the official Apple JS SDK. react-mrz-scanner - A React component to scan MRZ on passports, visa cards, etc. It is based on Dynamsoft Label Recognizer. Form Components Let the user enter data\nDate / Time picker Date picker / time picker / datetime picker / date range picker\ndate-range-picker - demo - A calendar component that supports date, range \u0026amp; ranges picks. react-big-calendar - Gcal/outlook like calendar component. react-datepicker - A simple and reusable datepicker component for React. react-day-picker - Flexible date picker for React. react-flatpickr - Flatpickr for React. react-simple-timefield - demo - Simple time input field. react-timezone-select - demo - Dynamic, succinct timezone select. Based on react-select. DevExtreme React Scheduler - High-performance plugin-based scheduler/calendar for Material Design. jQWidgets Scheduler - Feature complete Scheduling library. react-calendar - Ultimate calendar for your React app. react-date-picker - A date picker for your React app. schedule-x - Material design event calendar and date picker components. Demo site: https://schedule-x.dev/ Emoji picker interweave-emoji-picker - A React based emoji picker powered by Interweave and Emojibase. Input Types Masked inputs, specialized inputs; email / telephone number / credit card / etc.\nreact-credit-cards - Beautiful credit cards for your payment forms. react-payment-inputs - demo - A zero-dependency container to help with payment card input fields. react-input-mask - demo - Yet another react component for input masking. @lunasec/react-sdk - docs - Secure, hardened form components that encrypt/tokenize all data automatically. react-numpad - demo - Extensible number pad control for numbers, dates and times. react-multi-email - demo - Format multiple emails as the user types. Autocomplete Autosuggest / autocomplete / typeahead\nreact-autosuggest - WAI-ARIA compliant React autosuggest component. react-typeahead - Pure react-based typeahead and typeahead-tokenizer. Select react-aria-menubutton - A fully accessible, easily themeable, React-powered menu button. react-functional-select - demo - Micro-sized \u0026amp; micro-optimized select component for React.js. react-mobile-picker - demo - An iOS like select box component. react-select - A Select control built with and for React JS. react-column-select - A column select component built for react. react-select-search - demo - A lightweight select component for React Color Picker coloreact - A tiny Color Picker for React. react-color - Is a tiny color picker widget component for React apps. react-colorful - A tiny (2,5 KB), dependency-free, fast and accessible color picker component. react-input-color - React input color component with hsv color picker. Toggle @anatoliygatt/heart-switch - demo - A fully themeable and accessible heart-shaped toggle switch component. react-ios-switch - React switch component. react-toggle - An elegant, accessible toggle component for React. Also a glorified checkbox. ui-switch - The most complete Toggle component Slider react-slider - Slider component for React. Radio Button react-radio-group - Better radio buttons. Type Select Let the user select something (e.g. a tag) while typing\nreact-autocomplete-input - Autocomplete input field for React. react-mentions - Mention people in a textarea. rich-textarea - A textarea to colorize, highlight, decorate texts and offer autocomplete. Tag Input Let the user add multiple tags in a single input\nreact-tag-input - A fantastically simple tagging component for your React projects. react-tagsinput - A simple react component for inputing tags. react-tokeninput - Tokeninput component for React. tagify - demo \u0026amp; docs - Lightweight, efficient Tags input component. Autosize Input / Textarea react-input-autosize - Auto-resizing input field for React. react-autowidth-input - Highly configurable \u0026amp; extensible automatically sized input field built with hooks. react-textarea-autosize - \u0026lt;textarea /\u0026gt; component for React which grows with content. Star Rating react-rating - demo - Zero-dependency, highly customizable rating component. react-awesome-stars-rating - demo - The star rating component with accessibility. react-star-rating-input - React.js component for entering 0-5 (or more) stars. Drag and Drop react-beautiful-dnd - Beautiful and accessible drag and drop for lists with React react-dnd - Drag and Drop for React. react-drag-sizing - \u0026ldquo;Drag to resize\u0026rdquo; (sizing) as React Component. react-draggable - React draggable component. react-dragula - Drag and drop so simple it hurts. react-dropzone - Simple HTML5 drag-drop zone with React.js. react-movable - Accessible and minimalistic (\u0026lt;4kB gzipped) library for vertical drag and drop in lists and tables. react-sortable-pane - Sortable and resizable pane component for React. neodrag - Multi-framework libraries for dragging. Choose your framework, the dragging API behavior will stay the same. Sortable List Let the user define an order on a list\nreact-anything-sortable - Sort any children with touch support and IE8 compatibility. sortablejs - Lists reorderable by drag-and-drop, within and among lists. Rich Text Editor alloyeditor - WYSIWYG editor based on CKEditor with completely rewritten UI. ckeditor4-react - An official CKEditor 4 rich text editor wrapper. ckeditor5-react - An official CKEditor 5 rich text editor wrapper. draft-js - A React framework for building text editors. edtr-io - demo - docs - WYSIWYG in-line web editor with plugins. megadraft - Rich Text editor built on top of draft.js. react-ace - Ace (Advanced Code Editor) wraper. react-codemirror - demo - CodeMirror component for React. react-contenteditable - React component for a div with editable contents. react-draft-wysiwyg - WYSIWYG editor build on top of DraftJS. react-editor - Simple richtext editor that can insert images and HTML. react-medium-editor - medium-editor wrapper. react-monacoeditor - Monaco Editor component for React. react-simple-code-editor - Simple no-frills code editor with syntax highlighting react-quill - Quill wrapper. react-trumbowyg - Trumbowyg wrapper. remirror - demo - docs - ProseMirror toolkit for React. slate - demo - docs - A completely customizable framework for building rich text editors. smartblock - demo - docs - Block based WYSIWYG editor based on ProseMirror. tiptap - demo - docs - The headless editor framework for web artisans. Markdown Editor react-simplemde-editor - React component wrapper for EasyMDE (the most fresh SimpleMDE fork). react-markdown-editor - A markdown editor using React/Reflux. react-md-editor - A simple markdown editor with preview, implemented with React.js and TypeScript. Image Editing Image manipulation\nreact-avatar-editor - Facebook-like, avatar / profile picture component. react-avatar-generator - Generate fun kaleidoscope for user avatars. react-easy-crop - Component to crop/rotate images/videos with easy interactions. Touch friendly. react-image-crop - A responsive image cropping tool for React. react-image-cropper - Image cropper. react-advanced-cropper - A react cropper library to create the cropper exactly suited for your website design. react-mobile-cropper - A ready-to-use image cropping library highly inspirited by popular Android croppers. Based on react-advanced-cropper. Form Component Collections formsy-material-ui - A Formsy compatibility wrapper for Material UI form components. formsy-react-components - A set of React JS components for use in a formsy-react form. react-input-enhancements - Set of enhancements for input control. react-widgets - An à la carte set of polished, extensible, and accessible inputs. Miscellaneous @anatoliygatt/numeric-stepper - demo - A fully themeable and accessible numeric stepper component. interweave - React library to safely render HTML, filter attributes, autowrap text with matchers, render emoji characters, and much more. react-designer - Easy to configure, lightweight, editable vector graphics in your react components. react-upload-gallery - React for Upload Image Gallery. Drag \u0026amp; Drop, Sortable, Customize. Syntax Highlight react-syntax-highlighter - Syntax highlighting component with Prismjs or Highlightjs AST using inline styles. UI Layout Back to top ⬆️\nComponents to layout the app\u0026rsquo;s UI\nautoresponsive-react - Auto responsive grid layout library. golden-layout - A multi-screen JavaScript Layout manager. hedron - A no-frills flexbox grid system, powered by styled-components. m-react-splitters - Splitter component, written in TypeScript. muuri-react - demo - docs - Responsive, sortable, filterable and draggable grid layouts. react-grid-layout - A draggable and resizable grid layout with responsive breakpoints, for React. react-masonry-component - Wrapper for @desandro\u0026rsquo;s Masonry. react-reflex - Flex layout container component for advanced React web applications. react-spaces - demo/docs - Nestable anchored, resizable, scrollable components. react-stonecutter - Animated grid layout component. react-colrow - Responsive grid layout components. Based on css flexbox. Support fraction width, auto grow. react-schematic - demo - Build responsive layouts using styled schematics without an overhead of any theme configuration UI Animation Back to top ⬆️\nAnimate transitions\ndata-driven-motion - Easily animate your data. react-animatable - An animation library using Web Animations API. react-anime - A super easy animation library. react-flip-move - Effortless animation between DOM changes (eg. list reordering) using the FLIP technique. react-gsap-enhancer - Use the full power of React and GSAP together. react-tsparticles - A lightweight component to easily create interactive particles animations react-motion - A spring that solves your animation problems. react-mt-svg-lines - Wrapper to animate the line stroke in SVGs. react-router-transition - Transitions built for react-router, powered by react-motion. react-spring - A spring physics based animation library. react-ts-typewriter - demo - Easy to use and customizable typewriter effect for any text. framer-motion - An animation and gesture library. react-spark-scroll - Scroll-based actions and animations for react. react-track - Track the position of DOM elements. Create cool animations. react-transitive-number - Apply transition effect to numeric strings, a la old Groupon timers. react-web-animation - React components for the Web Animations API -. auto-size-transition - A component that scale dynamically according to the internal children size react-particles-bg - Particles backgrounds. gooey-react - demo/docs - The gooey effect for React, used for shape blobbing / metaballs. react-voodoo - demo/samples - Additive animation engine allowing complex android/iOs-like animations, rendering sliders on SSR, predictive inertia, multitouch, etc Parallax simple-parallax-js - demo - The easiest way to get a parallax effect with React and JavaScript on images react-parallax-tilt - demo - Easily apply parallax tilt hover effect on components. UI Frameworks Back to top ⬆️\nResponsive Set of components + responsive layout system\nAgnosticUI - Accessible React component primitives that also work with Vue 3, Svelte, and Angular! ant-design - demo/docs - A UI Design Language from China. Individual components available. atlaskit - Atlassian\u0026rsquo;s official UI library, with components from badge to tree table. base web - Base Web is a foundation for initiating, evolving, and unifying web products. carbon - demo/docs - A design system built by IBM. cdbreact - demo - docs - Elegant UI Kit library and reusable components for building mobile-first, responsive websites and web apps. chakra-ui - demo/docs - Simple, Modular \u0026amp; Accessible UI Components for your React Applications. ChatUI - demo/docs - The UI design language and React library for Conversational UI CoreUI for React - demo/docs - Open Source UI components library. evergreen - demo/docs - Evergreen React UI Framework by Segment. fluentui - UX frameworks for creating beautiful, cross-platform apps that share code, design, and interaction behavior. geist-ui - Modern and minimalist React UI library. gestalt - demo/docs - A set of components that supports Pinterest’s design language. grommet - The most advanced UX framework for enterprise applications. Mantine - demo/docs - A fully featured library with 100+ hooks and components with native dark theme support orbit - Components for building travel oriented projects. flowbite-react - Open-source UI component library based on React, Tailwind CSS, and Flowbite. primereact - A complete UI Framework with 50+ components featuring material, bootstrap and custom themes. radix-ui - Unstyled, accessible components for building high‑quality design systems and web apps. react-bootstrap - Bootstrap components built with React. react-foundation - Foundation as React components. reakit - demo/docs Toolkit for building accessible rich web apps searchkit - React UI components / widgets. The easiest way to build a great search experience with Elasticsearch. semantic-ui-react - The official Semantic-UI-React integration. semi-design - demo/docs - A modern, comprehensive, flexible design system. shadcn/ui - demo - docs - Beautifully designed components that you can copy and paste into your apps. shineout - demo - Chinese-friendly set of components: form elements, navigation, table, tree, tree select drop-down etc. Material Design 🚀 Material UI - Full suite of components. Build your own design system, or start with Material Design. Autocomplete - Accessible autocomplete, combobox, multiselect Material Icons - 1,000+ SVG material icons. Modal - Accessible modal dialog component. Slider - Accessible slider component. Table - table with sorting, selecting, pagination, virtualized. Tree View - Accessible tree view component for React. react-essence - Essence - The Essential Material Design Framework. react-materialize - Material design for react, powered by materializecss. react-toolbox - A set of React components implementing Google\u0026rsquo;s Material Design. mdbootstrap - React Bootstrap with Material Design Mobile antd-mobile - Configurable Mobile UI from China. Ionic React - Ionic Framework: easily build Android, Desktop and Progressive Web Apps with one code base. OnsenUI - demo/docs - Mobile app framework with Material and flat (iOS) designs. Based on Web Components. Component Collections blueprint - demo - docs - UI toolkit for building complex, data-dense web interfaces for desktop (not mobile) applications. dataminr-react-components - Collection of reusable React Components and utility functions. shards-react - docs/demo - A beautiful and modern React design system. Freemium. aframe-react - Build virtual reality experiences with A-Frame and React. react-admin - Build admin user experiences on top of REST and GraphQL services. refine - demo - docs - Build data-intensive applications in no time. It ships with Ant Design System, an enterprise-level UI toolkit. matrix-card - demo - Simplest possible component to generate matrix rain style cards. rsuite - demo/docs - Suite of components for \u0026ldquo;enterprise system products\u0026rdquo;. lens-ui - docs - A Suit of components focused on simplicity. UI Utilities Back to top ⬆️\nReporter Report computed styles\nVisibility Reporter Report when a component becomes visible/hidden\nreact-intersection-observer - React implementation of the Intersection Observer API. react-visibility-sensor - Sensor component. react-waypoint - A React component to execute a function whenever you scroll to an element. Measurement Reporter Determine and report measurements of an element\nreact-component-queries - Provide props to your Components based on their Width and/or Height. react-container-dimensions - Wrapper component that detects element resize. react-dimensions - React higher-order component to get dimensions of container. react-height - Component-wrapper to determine and report children elements height. react-measure - Compute measurements of a React component. react-sizeme - Make your React Components aware of their width and height. Device Input Turn user input into actions\nKeyboard Events react-hotkeys - Declarative hotkey and focus area management for React. react-key-handler - React component to handle keyboard events. react-keydown - Lightweight keydown wrapper for React components. react-shortcuts - Manage keyboard shortcuts from one place. useKeyCapture - A custom hook to ease the key-press listeners of a target/global. react-keyboard-navigator - A suite of React components and hook for selecting sibling components through the keyboard. Scroll Events react-scroll-components - A set of components that react to page scrolling. Touch Swipe react-swipe - Swipe.js as a React component. Mouse Events react-hook-mighty-mouse - demo - Hook that tracks mouse events on selected element. Meta Tags Set meta tags, , children of \u003chead\u003e\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/staylor/react-helmet-async#readme\"\u003ereact-helmet-async\u003c/a\u003e - Thread-safe Helmet for React 16+ and friends\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/nfl/react-helmet\"\u003ereact-helmet\u003c/a\u003e - A document head manager for React.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"portal\"\u003ePortal\u003c/h3\u003e \u003cp\u003e\u003cem\u003eRender an element at an arbitrary DOM node\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/fckt/react-layer-stack\"\u003ereact-layer-stack\u003c/a\u003e - Simple but ubiquitously powerful and agnostic layering system for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/tajo/react-portal\"\u003ereact-portal\u003c/a\u003e - React component for transportation of modals, lightboxes, loading bars\u0026hellip; to document.body.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"test-user-behavior\"\u003eTest User Behavior\u003c/h3\u003e \u003cp\u003e\u003cem\u003eA/B tests, experiments, \u0026hellip;\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/HubSpot/react-experiments\"\u003ereact-experiments\u003c/a\u003e - React components for implementing UI experiments.\u003c/li\u003e \u003c/ul\u003e \u003ch2 id=\"code-design\"\u003eCode Design\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e\u003ca href=\"#table-of-contents\"\u003e\u003ccode\u003eBack to top ⬆️\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e\n\u003cp\u003e\u003cem\u003eLibraries that help with code design\u003c/em\u003e\n\u003ch3 id=\"data-store\"\u003eData Store\u003c/h3\u003e \u003cp\u003e\u003cem\u003eData flow / data management / data stores / components state / data flow\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/Yomguithereal/baobab-react\"\u003ebaobab-react\u003c/a\u003e - React integration for Baobab.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/cerebral/cerebral\"\u003ecerebral\u003c/a\u003e - A state controller with its own debugger.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/effector/effector\"\u003eeffector-react\u003c/a\u003e - React bindings for effector, an effective multi-store state manager.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/fireproof-storage/fireproof\"\u003efireproof\u003c/a\u003e - \u003ca href=\"https://fireproof.storage/try-free/\"\u003edemo\u003c/a\u003e - \u003ca href=\"https://use-fireproof.com/docs/welcome\"\u003edocs\u003c/a\u003e Pure JS, zero dependency, CRDT database - runs in the browser and connects to any cloud or backend\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://rxdb.info/\"\u003eRxDB\u003c/a\u003e - \u003ca href=\"https://github.com/pubkey/rxdb/tree/master/examples/react\"\u003edemo\u003c/a\u003e - \u003ca href=\"https://rxdb.info/quickstart.html\"\u003edocs\u003c/a\u003e A fast, local first, reactive Database for JavaScript Applications\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/yahoo/fluxible\"\u003efluxible\u003c/a\u003e - A pluggable container for universal flux applications.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/mariusandra/kea\"\u003ekea\u003c/a\u003e - High level architecture for React apps.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/yahoo/react-i13n\"\u003ereact-i13n\u003c/a\u003e - A performant, scalable and pluggable approach to instrumenting your React application.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactjs/react-redux\"\u003ereact-redux\u003c/a\u003e - Official React bindings for Redux.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/tshelburne/redux-batched-actions\"\u003eredux-batched-actions\u003c/a\u003e - Reducer + action to reduce actions under a single subscriber notification.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactjs/redux\"\u003eredux\u003c/a\u003e - Predictable state container for JavaScript apps.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactjs/reselect\"\u003ereselect\u003c/a\u003e - Selector library for Redux.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/SiftScience/resourcerer\"\u003eresourcerer\u003c/a\u003e - Declarative data-fetching framework for REST APIs\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/lukasbach/synergies\"\u003esynergies\u003c/a\u003e - \u003ca href=\"https://synergies.js.org\"\u003edocs\u003c/a\u003e A performant and distributed context-state library for creating reusable React state logic by synergyzing atomar context pieces.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://zustand.surge.sh/\"\u003ezustand\u003c/a\u003e - \u003ca href=\"https://github.com/pmndrs/zustand\"\u003edocs\u003c/a\u003e - A fast bearbones state-management solution using simplified flux principles and boilerplate-free hook api.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/teafuljs/teaful\"\u003eteaful\u003c/a\u003e - Tiny, easy and powerful React state management\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"form-logic\"\u003eForm Logic\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/data-driven-forms/react-forms\"\u003edata-driven-forms\u003c/a\u003e - A declarative way for building forms with all the functionality.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/jaredpalmer/formik\"\u003eformik\u003c/a\u003e - Build forms without tears and supports Validation in ease.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/formsy/formsy-react/\"\u003eformsy-react\u003c/a\u003e - A form input builder and validator for React JS.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/phormal/phormal\"\u003ePhormal\u003c/a\u003e - \u003ca href=\"https://phormal.dev/getting-started/react\"\u003eDocs \u0026amp; Demos\u003c/a\u003e - Responsive, multilingual forms with built-in validation, support for dark mode and right-to-left languages.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/react-hook-form/react-hook-form\"\u003ereact-hook-form\u003c/a\u003e - React hooks for form validation without the hassle.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/mozilla-services/react-jsonschema-form\"\u003ereact-jsonschema-form\u003c/a\u003e - A React component for building Web forms from JSONSchema.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/0529bill/react-client-validation\"\u003ereact-client-validation\u003c/a\u003e - Simple and super lightweight validation for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/final-form/react-final-form\"\u003ereact-final-form\u003c/a\u003e - Subscription-based form state management\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/MAKARD/react-formawesome\"\u003ereact-formawesome\u003c/a\u003e - Complex library for creating awesome forms.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/surveyjs/survey-library\"\u003esurveyjs\u003c/a\u003e - The advanced Survey and Form library\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/alibaba/formily\"\u003eFormily\u003c/a\u003e - High performance, extensible, and Typescript friendly\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/luoanb/hook-form-react\"\u003ehook-form-react\u003c/a\u003e - \u003ca href=\"https://luoanb.github.io/hook-form-react\"\u003edocs\u003c/a\u003e - A lightweight, dependency-free solution React hooks for form validation.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"router\"\u003eRouter\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/STRML/react-router-component\"\u003ereact-router-component\u003c/a\u003e - Declarative router component for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/taion/react-router-scroll\"\u003ereact-router-scroll\u003c/a\u003e - React Router scroll management.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactjs/react-router\"\u003ereact-router\u003c/a\u003e - A complete routing library for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/salvoravida/redux-first-history\"\u003eredux-first-history\u003c/a\u003e - Redux First History - Redux history binding support react-router - @reach/router - wouter\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/kriasoft/universal-router\"\u003euniversal-router\u003c/a\u003e - A simple middleware-style router for isomorphic JavaScript web apps.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/molefrog/wouter\"\u003ewouter\u003c/a\u003e - A minimalist-friendly ~1.3KB routing library. Nothing else but hooks.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/TanStack/router\"\u003etanstack-router\u003c/a\u003e - Type-safe router with built-in caching \u0026amp; URL state management\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"props-from-server\"\u003eProps from server\u003c/h3\u003e \u003cp\u003e\u003cem\u003eComponent properties asynchronously fetched over the network\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/heroku/react-refetch\"\u003ereact-refetch\u003c/a\u003e - A simple, declarative, and composable way to fetch data for React components.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/makeomatic/redux-connect\"\u003eredux-connect\u003c/a\u003e - Provides decorator for resolving async props in react-router.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/soroushchehresa/axios-react\"\u003eaxios-react\u003c/a\u003e - HTTP client component for React.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"communication-with-server\"\u003eCommunication with server\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/apollostack/apollo-client\"\u003eapollo-client\u003c/a\u003e - A simple caching client for any GraphQL server and UI framework.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/facebook/relay\"\u003ereact-relay\u003c/a\u003e - Relay is a JavaScript framework for building data-driven React applications.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/TanStack/query\"\u003equery\u003c/a\u003e - \u003ca href=\"https://tanstack.com/query/v4\"\u003edocs\u003c/a\u003e Powerful asynchronous state management, server-state utilities and data fetching for TS/JS, React, Solid, Svelte and Vue.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"css--style\"\u003eCSS / Style\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/milesj/aesthetic\"\u003eaesthetic\u003c/a\u003e - A powerful type-safe, framework agnostic, CSS-in-JS library for styling components, whether it be plain objects, importing stylesheets, or simply referencing external class names.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Khan/aphrodite\"\u003eaphrodite\u003c/a\u003e - It's inline styles, but they work!.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/rofrischmann/inline-style-prefixer\"\u003einline-style-prefixer\u003c/a\u003e - Run-time Autoprefixer for Inline Style Objects.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/d6u/react-container-query\"\u003ereact-container-query\u003c/a\u003e - Modular responsive component.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/contra/react-responsive\"\u003ereact-responsive\u003c/a\u003e - Media queries in react for responsive design.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/jmlweb/reactponsive\"\u003ereactponsive\u003c/a\u003e - Responsive components and hooks.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/styled-components/styled-components\"\u003estyled-components\u003c/a\u003e - Visual primitives for the component age.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/stitchesjs/stitches\"\u003estitches\u003c/a\u003e - CSS-in-JS with near-zero runtime, SSR, multi-variant support.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"html-template\"\u003eHTML Template\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/AlexGilleran/jsx-control-statements\"\u003ejsx-control-statements\u003c/a\u003e - Neater If and For for React JSX.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"isomorphic-apps\"\u003eIsomorphic Apps\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/airbnb/hypernova\"\u003ehypernova\u003c/a\u003e - A service for server-side rendering your JavaScript views.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/kriasoft/isomorphic-style-loader\"\u003eisomorphic-style-loader\u003c/a\u003e - Isomorphic CSS style loader for Webpack.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/redfin/react-server\"\u003ereact-server\u003c/a\u003e - React framework with server render for blazing fast page load.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/rill-js/rill\"\u003erill\u003c/a\u003e - Universal web application framework.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/halt-hammerzeit/webpack-isomorphic-tools\"\u003ewebpack-isomorphic-tools\u003c/a\u003e - Server-side rendering for your Webpack-built applications (e.g. React).\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"boilerplate\"\u003eBoilerplate\u003c/h3\u003e \u003cp\u003e\u003cem\u003eScaffold / starter kit / Yeoman generator / stack ensemble / seed\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/facebookincubator/create-react-app\"\u003ecreate-react-app\u003c/a\u003e - Create React apps with no build configuration.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/winwiz1/crisp-react\"\u003ecrisp-react\u003c/a\u003e - Express integration in TypeScript with support for multiple SPAs and pitfall avoidance.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Nilanth/cra-template-redux-auth-starter\"\u003ecra-template-redux-auth-starter\u003c/a\u003e - A Redux auth starter boilerplate for CRA.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/chentsulin/electron-react-boilerplate\"\u003eelectron-react-boilerplate\u003c/a\u003e - Live editing development on desktop app.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/elegantframework/elegant-cli\"\u003eelegant\u003c/a\u003e - \u003ca href=\"https://www.elegantframework.com/docs/installation\"\u003edocs\u003c/a\u003e - \u003ca href=\"https://www.elegantframework.com/\"\u003edemo\u003c/a\u003e - A simple React framework for rapidly building beautiful and expressive web applications with Next.js, Tailwind CSS, and Markdown loading.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/brocoders/extensive-react-boilerplate\"\u003eextensive-react-boilerplate\u003c/a\u003e - Boilerplate with Next.js, Auth (Sign in, Sign up, Reset password, Confirm email, Refresh Token), Material UI, React Hook Form, I18N, File uploads (support local and Amazon S3 drivers), Tests, CI.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/FredericHeem/starhackit\"\u003egenerator-starhackit\u003c/a\u003e - Full-stack starter kit.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/insin/nwb\"\u003enwb\u003c/a\u003e - CLI tool and devDependency for React apps \u0026amp; components and npm modules.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://nx.dev\"\u003enx\u003c/a\u003e - Next generation build system with first class monorepo support and powerful integrations.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/moishinetzer/pbandj\"\u003ePBandJ\u003c/a\u003e - Zero-Config Reusable Component Framework.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/gaearon/react-hot-boilerplate\"\u003ereact-hot-boilerplate\u003c/a\u003e - Minimal live-editing boilerplate for your next ReactJS project.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/AlexSergey/rockpack\"\u003erockpack\u003c/a\u003e - Simple solution for creating React application with SSR, bundling, linting, testing within 5 minutes.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/andrelmlins/create-react-dependency\"\u003ecreate-react-dependency\u003c/a\u003e - Create react dependencies with no build configuration.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Sazito/phoenix\"\u003ephoenix\u003c/a\u003e - A simple boilerplate that helps you make your react application with Server Side Rendering \u0026amp; Localization support.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/anandgupta193/react-enterprise-starter-kit\"\u003ereact-enterprise-starter-kit\u003c/a\u003e - Highly Scalable and Performant Awesome React Starter Kit for an enterprise application with a very easy maintainable codebase.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"miscellaneous-2\"\u003eMiscellaneous\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/matthewwithanm/react-inlinesvg\"\u003ereact-inlinesvg\u003c/a\u003e - An SVG loader component for ReactJS.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/kapolos/react-godfather\"\u003ereact-godfather\u003c/a\u003e - A new way to write Functional Components, without Hooks.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/lynndylanhurley/redux-auth\"\u003eredux-auth-patch\u003c/a\u003e - Complete token authentication system for react + redux that supports isomorphic rendering.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/treasure-data/redux-search\"\u003eredux-search\u003c/a\u003e - Redux bindings for client-side search.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/gcanti/tcomb-react\"\u003etcomb-react\u003c/a\u003e - Alternative syntax for PropTypes.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/salvoravida/react-universal-hooks\"\u003ereact-universal-hooks\u003c/a\u003e - \u0026#x1f389; support react hooks everywhere (Functional or Class Component).\u003c/li\u003e \u003c/ul\u003e \u003ch2 id=\"utilities\"\u003eUtilities\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e\u003ca href=\"#table-of-contents\"\u003e\u003ccode\u003eBack to top ⬆️\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/zpao/qrcode.react\"\u003eqrcode.react\u003c/a\u003e - A \u0026lt;QRCode/\u0026gt; component for use with React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/bitjson/qr-code\"\u003e\u003ccode\u003e\u0026lt;qr-code\u0026gt;\u003c/code\u003e\u003c/a\u003e – A no-dependencies, customizable, animate-able, SVG-based \u003ccode\u003e\u0026lt;qr-code\u0026gt;\u003c/code\u003e element.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/fernandopasik/react-children-utilities\"\u003ereact-children-utilities\u003c/a\u003e - Extended utils for React.Children.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/ReactTraining/react-media\"\u003ereact-media\u003c/a\u003e - A CSS media query component for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/bluepeter/react-middle-ellipsis\"\u003ereact-middle-ellipsis\u003c/a\u003e - \u003ca href=\"https://bluepeter.github.io/react-middle-ellipsis/\"\u003edemo\u003c/a\u003e - Truncate long strings in the middle instead of the end.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/martinandert/react-translate-component\"\u003ereact-translate-component\u003c/a\u003e - Multi-lingual/localized text content.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"i18n\"\u003ei18n\u003c/h3\u003e \u003cp\u003e\u003cem\u003eInternationalization / L10n / localization / translation\u003c/em\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/i18next/react-i18next\"\u003ereact-i18next\u003c/a\u003e - Internationalization for react done right. Using the i18next i18n ecosystem.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/yahoo/react-intl\"\u003ereact-intl\u003c/a\u003e - Internationalize React apps.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/fakundo/react-localized\"\u003ereact-localized\u003c/a\u003e - Internationalization for React components based on \u003ccode\u003egettext\u003c/code\u003e format.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/CherryProjects/react-translate-maker\"\u003ereact-translate-maker\u003c/a\u003e - Universal internationalization (i18n) open source library for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/alibaba/react-intl-universal\"\u003ereact-intl-universal\u003c/a\u003e - \u003ca href=\"https://g.alicdn.com/alishu/common/0.0.95/intl-example/index.html\"\u003edemo\u003c/a\u003e Internationalize React apps. Not only for React.Component but also for Vanilla JS.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/tolgee/tolgee-js/tree/main/packages/react\"\u003e@tolgee/react\u003c/a\u003e - \u003ca href=\"https://tolgee.io/docs/web/using_with_react/installation\"\u003edocs\u003c/a\u003e – Web-based localization tool enabling users to translate directly in the React app they develop\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/lingui/js-lingui\"\u003ejs-lingui\u003c/a\u003e - \u003ca href=\"https://lingui.js.org\"\u003edocs\u003c/a\u003e – A readable, automated, and optimized (5 kb) internationalization for JavaScript.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"framework-bindings--integrations\"\u003eFramework bindings / integrations\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/magalhas/backbone-react-component\"\u003ebackbone-react-component\u003c/a\u003e - A bit of nifty glue that automatically plugs your Backbone models.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/KtorZ/elm-react-component\"\u003eelm-react-component\u003c/a\u003e - A React component which wraps an Elm module to be used in a React application.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/ProjectSeptemberInc/gl-react\"\u003egl-react\u003c/a\u003e - OpenGL / WebGL bindings for React to implement complex effects over images and content.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/jhudson8/react-backbone\"\u003ereact-backbone\u003c/a\u003e - Backbone-aware mixins for react and a whole lot more.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/react-d3-library/react-d3-library\"\u003ereact-d3-library\u003c/a\u003e - Open source library for using D3 in React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/evancz/react-elm-components\"\u003ereact-elm-components\u003c/a\u003e - Write React components in Elm.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/pilwon/react-famous\"\u003ereact-famous\u003c/a\u003e - React bridge to Famo.us.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/STRML/react-localstorage\"\u003ereact-localstorage\u003c/a\u003e - Simple componentized localstorage implementation for Facebook's React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/mifi/react-lottie-player\"\u003ereact-lottie-player\u003c/a\u003e - \u003ca href=\"https://mifi.github.io/react-lottie-player/\"\u003edemo\u003c/a\u003e - Declarative lottie animation player.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/shakacode/react_on_rails\"\u003ereact-on-rails\u003c/a\u003e - Integration of React + Webpack + Rails to build Universal (Isomorphic) Apps.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/toxicFork/react-three-renderer\"\u003ereact-three-renderer\u003c/a\u003e - Render into a three.js canvas using React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/fritx/react-threejs\"\u003ereact-threejs\u003c/a\u003e - Simplest bindings between React \u0026amp; Three.js\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/firebase/reactfire\"\u003ereactfire\u003c/a\u003e - ReactJS mixin for easy Firebase integration.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/PixelsCommander/ReactiveElements\"\u003ereactive-elements\u003c/a\u003e - Allows to use React.js component as HTML element (web component).\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/elraccoone/react-unity-webgl\"\u003ereact-unity-webgl\u003c/a\u003e - Unity intergration with two-way communication using a built-in Event System.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"integrations-with-third-party-services\"\u003eIntegrations with Third Party Services\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/react-ga/react-ga\"\u003ereact-ga\u003c/a\u003e - React Google Analytics Module.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/hzdg/react-google-analytics\"\u003ereact-google-analytics\u003c/a\u003e - Google analytics component.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/ErrorPro/react-google-autocomplete\"\u003ereact-google-autocomplete\u003c/a\u003e - Google Places API components and hooks.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/appleboy/react-recaptcha\"\u003ereact-recaptcha\u003c/a\u003e - A react.js reCAPTCHA for Google.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/azmenak/react-stripe-checkout\"\u003ereact-stripe-checkout\u003c/a\u003e - Load stripe's checkout.js as a react component. Easiest way to use checkout with React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/rangle/redux-segment\"\u003eredux-segment\u003c/a\u003e - Segment.io analytics integration for redux.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Nilanth/react-slack-notification\"\u003ereact-slack-notification\u003c/a\u003e - Send messages and error logs to a Slack channel directly.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/csfrequency/react-firebase-hooks\"\u003ereact-firebase-hooks\u003c/a\u003e - Hooks to integrate firebase in your application.\u003c/li\u003e \u003c/ul\u003e \u003ch2 id=\"performance\"\u003ePerformance\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e\u003ca href=\"#table-of-contents\"\u003e\u003ccode\u003eBack to top ⬆️\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e\n\u003ch3 id=\"ui\"\u003eUI\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/trueadm/inferno\"\u003einferno\u003c/a\u003e - An extremely fast, React-like JavaScript library for building modern user interfaces.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/JakeSidSmith/react-fastclick\"\u003ereact-fastclick\u003c/a\u003e - Fast Touch Events for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactjs/react-static-container\"\u003ereact-static-container\u003c/a\u003e - Renders static content efficiently.\u003c/li\u003e \u003c/ul\u003e \u003ch4 id=\"inspect\"\u003eInspect\u003c/h4\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/RamonGebben/react-perf-tool\"\u003ereact-perf-tool\u003c/a\u003e - Debug performance of your React application.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/redsunsoft/react-render-visualizer\"\u003ereact-render-visualizer\u003c/a\u003e - Render visualizer for ReactJS.\u003c/li\u003e \u003c/ul\u003e \u003ch4 id=\"lazy-load\"\u003eLazy Load\u003c/h4\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/ggordan/react-infinite-grid\"\u003ereact-infinite-grid\u003c/a\u003e - A React component which renders a grid of elements.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/seatgeek/react-infinite\"\u003ereact-infinite\u003c/a\u003e - A browser-ready efficient scrolling container based on UITableView.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/loktar00/react-lazy-load\"\u003ereact-lazy-load\u003c/a\u003e - React component that renders children elements when they enter the viewport.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/jasonslyvia/react-lazyload\"\u003ereact-lazyload\u003c/a\u003e - Lazyload your Component, Image or anything matters the performance.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/bvaughn/react-virtualized\"\u003ereact-virtualized\u003c/a\u003e - React components for efficiently rendering large lists and tabular data.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"app-size\"\u003eApp Size\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/oliviertassinari/babel-plugin-transform-react-remove-prop-types\"\u003ebabel-plugin-transform-react-remove-prop-types\u003c/a\u003e - Remove unnecessary React propTypes.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Lucifier129/react-lite\"\u003ereact-lite\u003c/a\u003e - An implementation of React that optimizes for small script size.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"server-side-rendering\"\u003eServer-Side Rendering\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/AlexSergey/issr\"\u003eiSSR\u003c/a\u003e - The easiest way to move your React application to Server-Side Rendering. Handles Side Effects and synchronizes State.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/dunglas/react-esi\"\u003ereact-esi\u003c/a\u003e - A library to boost SSR performance by exposing React components as Edge Side Includes (ESI) fragments\u003c/li\u003e \u003c/ul\u003e \u003ch2 id=\"dev-tools\"\u003eDev Tools\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e\u003ca href=\"#table-of-contents\"\u003e\u003ccode\u003eBack to top ⬆️\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e\n\u003ch3 id=\"test\"\u003eTest\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/producthunt/chai-enzyme\"\u003echai-enzyme\u003c/a\u003e - Chai.js assertions and convenience functions for testing React Components with enzyme.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/airbnb/enzyme\"\u003eenzyme\u003c/a\u003e - JavaScript Testing utilities for React.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/facebook/jest\"\u003ejest-cli\u003c/a\u003e - Painless JavaScript Testing.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/pzavolinsky/react-unit\"\u003ereact-unit\u003c/a\u003e - Lightweight unit test library for ReactJS.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/conorhastings/redux-test-recorder\"\u003eredux-test-recorder\u003c/a\u003e - A redux middleware to automatically generate tests for reducers through ui interaction.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/milesj/rut\"\u003erut\u003c/a\u003e - React testing made easy with \u003ccode\u003ereact-test-renderer\u003c/code\u003e. Supports DOM and custom renderers.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/bruderstein/unexpected-react\"\u003eunexpected-react\u003c/a\u003e - Plugin for unexpected to enable testing the full React virtual DOM, and also the shallow renderer.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/microsoft/playwright\"\u003eplaywright\u003c/a\u003e enables reliable end-to-end testing for modern web apps.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"redux\"\u003eRedux\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/romseguy/redux-devtools-chart-monitor\"\u003eredux-devtools-chart-monitor\u003c/a\u003e - A chart monitor for Redux DevTools.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/gaearon/redux-devtools-dock-monitor\"\u003eredux-devtools-dock-monitor\u003c/a\u003e - A resizable and movable dock for Redux DevTools monitors.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/bvaughn/redux-devtools-filterable-log-monitor\"\u003eredux-devtools-filterable-log-monitor\u003c/a\u003e - Filterable tree view monitor for Redux DevTools.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/alexkuz/redux-devtools-inspector\"\u003eredux-devtools-inspector\u003c/a\u003e - Another Redux DevTools Monitor.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/gaearon/redux-devtools-log-monitor\"\u003eredux-devtools-log-monitor\u003c/a\u003e - The default monitor for Redux DevTools with a tree view.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/gaearon/redux-devtools\"\u003eredux-devtools\u003c/a\u003e - DevTools for Redux with hot reloading, action replay, and customizable UI.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/zalmoxisus/remote-redux-devtools\"\u003eremote-redux-devtools\u003c/a\u003e - Redux DevTools remotely.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"inspect-1\"\u003eInspect\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://fluxguard.com\"\u003efluxguard\u003c/a\u003e - PROD change monitoring that highlights all DOM + design changes.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/xyc/react-inspector\"\u003ereact-inspector\u003c/a\u003e - Power of Browser DevTools inspectors right inside your React app.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Lapple/react-json-inspector\"\u003ereact-json-inspector\u003c/a\u003e - React JSON inspector component.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactotron/reactotron\"\u003ereactotron\u003c/a\u003e - A CLI and OS X app for inspecting your React JS and React Native apps.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"miscellaneous-3\"\u003eMiscellaneous\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/ccontrols/component-controls\"\u003ecomponent-controls\u003c/a\u003e - \u003ca href=\"https://component-controls.com\"\u003edemo\u003c/a\u003e - \u003ca href=\"https://component-controls.com/tutorial\"\u003edocs\u003c/a\u003e - A next-generation tool to create blazing-fast documentation sites.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/skidding/cosmos\"\u003ecosmos-js\u003c/a\u003e - DX tool for designing truly encapsulated React components.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/mkosir/react-demo-tab-cli\"\u003ereact-demo-tab-cli\u003c/a\u003e - CLI tool for creating demos of react components.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/sapegin/react-styleguidist\"\u003ereact-styleguidist\u003c/a\u003e - React style guide generator.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/feross/standard\"\u003estandard-react\u003c/a\u003e - JavaScript Standard Style Guide.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://www.plasmic.app/\"\u003ePlasmic\u003c/a\u003e - Powerful design tool for building your React components visually.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/simplelocalize/simplelocalize-cli\"\u003eSimpleLocalize\u003c/a\u003e - Open source CLI tool for finding i18n keys in React projects.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/zheeeng/react-device-frameset\"\u003ereact-device-frameset\u003c/a\u003e - React device frameset component.\u003c/li\u003e \u003c/ul\u003e \u003ch2 id=\"miscellaneous-4\"\u003eMiscellaneous\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e\u003ca href=\"#table-of-contents\"\u003e\u003ccode\u003eBack to top ⬆️\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e\n\u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/dataformsjs/dataformsjs/blob/master/docs/jsx-loader.md\"\u003eDataFormsJS JSX Loader\u003c/a\u003e - Small JavaScript Compiler for quickly converting JSX to JS directly on a web page.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/roman01la/html-to-react-components\"\u003ehtml-to-react-components\u003c/a\u003e - Extract annotated portions of HTML into React components as separate modules.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/reactjs/react-magic\"\u003ehtmltojsx\u003c/a\u003e - Automatically AJAXify plain HTML with the power of React. It's magic!.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/repetere/jsonx\"\u003ejsonx\u003c/a\u003e - React JSON Syntax.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/plouc/mozaik\"\u003emozaik\u003c/a\u003e - Mozaïk is a tool based on nodejs / react / d3 / stylus to easily craft beautiful dashboards.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/Yomguithereal/react-blessed\"\u003ereact-blessed\u003c/a\u003e - A react renderer for blessed.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/bluepeter/jsondiffpatch-react\"\u003ejsondiffpatch-react\u003c/a\u003e - JSON diffing.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/vvo/iron-session\"\u003eiron-session\u003c/a\u003e - Secure, stateless, and cookie-based session library.\u003c/li\u003e \u003c/ul\u003e \u003ch3 id=\"static-website-generator\"\u003eStatic Website Generator\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/gatsbyjs/gatsby\"\u003egatsby\u003c/a\u003e - Transform plain text into dynamic blogs and websites using React.js.\u003c/li\u003e \u003c/ul\u003e \u003ch2 id=\"cloud-solutions\"\u003eCloud Solutions\u003c/h2\u003e \u003cp\u003e\u003cstrong\u003e\u003ca href=\"#table-of-contents\"\u003e\u003ccode\u003eBack to top ⬆️\u003c/code\u003e\u003c/a\u003e\u003c/strong\u003e\n\u003ch3 id=\"databases\"\u003eDatabases\u003c/h3\u003e \u003cul\u003e \u003cli\u003e\u003ca href=\"https://github.com/bcms/cms\"\u003eBCMS\u003c/a\u003e - API-based, open-source, self-hostable content management system for Gatsby, Nuxt and Next.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/winwiz1/crisp-bigquery\"\u003ecrisp-bigquery\u003c/a\u003e - Full stack Google BigQuery with Express in TypeScript.\u003c/li\u003e \u003cli\u003e\u003ca href=\"https://github.com/mhart/react-server-routing-example\"\u003ereact-server-routing-example\u003c/a\u003e - Universal client/server routing and data with AWS DynamoDB.\u003c/li\u003e \u003c/ul\u003e ","date":"0001-01-01","id":26,"permalink":"/resources/react/","summary":"\u003cp\u003eThis is a list of AWESOME components. Nope, it\u0026rsquo;s NOT a comprehensive list of\nevery React component under the sun. So, what does \u0026ldquo;awesome\u0026rdquo; mean? Well:\u003c/p\u003e","tags":[],"title":"🚀 Absolutely Awesome React Components \u0026 Libraries"},{"content":"The JavaScript core language features are defined in a standard called ECMA-262. The language defined in this standard is called ECMAScript. What you know as JavaScript in browsers and Node.js is actually a superset of ECMAScript. Browsers and Node.js add more functionality through additional objects and methods, but the core of the language remains as defined in ECMAScript. The ongoing development of ECMA-262 is vital to the success of JavaScript as a whole, and this book covers the changes brought about by the most recent major update to the language: ECMAScript 6.\nThe Road to ECMAScript 6 In 2007, JavaScript was at a crossroads. The popularity of Ajax was ushering in a new age of dynamic web applications, while JavaScript hadn\u0026rsquo;t changed since the third edition of ECMA-262 was published in 1999. TC-39, the committee responsible for driving the ECMAScript development process, put together a large draft specification for ECMAScript 4. ECMAScript 4 was massive in scope, introducing changes both small and large to the language. Updated features included new syntax, modules, classes, classical inheritance, private object members, optional type annotations, and more.\nThe scope of the ECMAScript 4 changes caused a rift to form in TC-39, with some members feeling that the fourth edition was trying to accomplish too much. A group of leaders from Yahoo, Google, and Microsoft created an alternate proposal for the next version of ECMAScript that they initially called ECMAScript 3.1. The \u0026ldquo;3.1\u0026rdquo; was intended to show that this was an incremental change to the existing standard.\nECMAScript 3.1 introduced very few syntax changes, instead focusing on property attributes, native JSON support, and adding methods to already-existing objects. Although there was an early attempt to reconcile ECMAScript 3.1 and ECMAScript 4, this ultimately failed as the two camps had difficulty with the very different perspectives on how the language should grow.\nIn 2008, Brendan Eich, the creator of JavaScript, announced that TC-39 would focus its efforts on standardizing ECMAScript 3.1. They would table the major syntax and feature changes of ECMAScript 4 until after the next version of ECMAScript was standardized, and all members of the committee would work to bring the best pieces of ECMAScript 3.1 and 4 together after that point into an effort initially nicknamed ECMAScript Harmony.\nECMAScript 3.1 was eventually standardized as the fifth edition of ECMA-262, also described as ECMAScript 5. The committee never released an ECMAScript 4 standard to avoid confusion with the now-defunct effort of the same name. Work then began on ECMAScript Harmony, with ECMAScript 6 being the first standard released in this new \u0026ldquo;harmonious\u0026rdquo; spirit.\nECMAScript 6 reached feature complete status in 2015 and was formally dubbed \u0026ldquo;ECMAScript 2015.\u0026rdquo; (But this text still refers to it as ECMAScript 6, the name most familiar to developers.) The features vary widely from completely new objects and patterns to syntax changes to new methods on existing objects. The exciting thing about ECMAScript 6 is that all of its changes are geared toward solving problems that developers actually face.\nAbout This Book A good understanding of ECMAScript 6 features is key for all JavaScript developers going forward. The language features introduced in ECMAScript 6 represent the foundation upon which JavaScript applications will be built for the foreseeable future. That\u0026rsquo;s where this book comes in. My hope is that you\u0026rsquo;ll read this book to learn about ECMAScript 6 features so that you\u0026rsquo;ll be ready to start using them as soon as you need to.\nBrowser and Node.js Compatibility Many JavaScript environments, such as web browsers and Node.js, are actively working on implementing ECMAScript 6. This book doesn\u0026rsquo;t attempt to address the inconsistencies between implementations and instead focuses on what the specification defines as the correct behavior. As such, it\u0026rsquo;s possible that your JavaScript environment may not conform to the behavior described in this book.\nWho This Book is For This book is intended as a guide for those who are already familiar with JavaScript and ECMAScript 5. While a deep understanding of the language isn\u0026rsquo;t necessary to use this book, it will help you understand the differences between ECMAScript 5 and 6. In particular, this book is aimed at intermediate-to-advanced JavaScript developers programming for a browser or Node.js environment who want to learn about the latest developments in the language.\nThis book is not for beginners who have never written JavaScript. You will need to have a good basic understanding of the language to make use of this book.\nOverview Each of this book\u0026rsquo;s thirteen chapters covers a different aspect of ECMAScript 6. Many chapters start by discussing problems that ECMAScript 6 changes were made to solve, to give you a broader context for those changes, and all chapters include code examples to help you learn new syntax and concepts.\nChapter 1: How Block Bindings Work talks about let and const, the block-level replacement for var.\nChapter 2: Strings and Regular Expressions covers additional functionality for string manipulation and inspection as well as the introduction of template strings.\nChapter 3: Functions in ECMAScript 6 discusses the various changes to functions. This includes the arrow function form, default parameters, rest parameters, and more.\nChapter 4: Expanded Object Functionality explains the changes to how objects are created, modified, and used. Topics include changes to object literal syntax, and new reflection methods.\nChapter 5: Destructuring for Easier Data Access introduces object and array destructuring, which allow you to decompose objects and arrays using a concise syntax.\nChapter 6: Symbols and Symbol Properties introduces the concept of symbols, a new way to define properties. Symbols are a new primitive type that can be used to obscure (but not hide) object properties and methods.\nChapter 7: Sets and Maps details the new collection types of Set, WeakSet, Map, and WeakMap. These types expand on the usefulness of arrays by adding semantics, de-duping, and memory management designed specifically for JavaScript.\nChapter 8: Iterators and Generators discusses the addition of iterators and generators to the language. These features allow you to work with collections of data in powerful ways that were not possible in previous versions of JavaScript.\nChapter 9: Introducing JavaScript Classes introduces the first formal concept of classes in JavaScript. Often a point of confusion for those coming from other languages, the addition of class syntax in JavaScript makes the language more approachable to others and more concise for enthusiasts.\nChapter 10: Improved Array Capabilities details the changes to native arrays and the interesting new ways they can be used in JavaScript.\nChapter 11: Promises and Asynchronous Programming introduces promises as a new part of the language. Promises were a grassroots effort that eventually took off and gained in popularity due to extensive library support. ECMAScript 6 formalizes promises and makes them available by default.\nChapter 12: Proxies and the Reflection API introduces the formalized reflection API for JavaScript and the new proxy object that allows you to intercept every operation performed on an object. Proxies give developers unprecedented control over objects and, as such, unlimited possibilities for defining new interaction patterns.\nChapter 13: Encapsulating Code with Modules details the official module format for JavaScript. The intent is that these modules can replace the numerous ad-hoc module definition formats that have appeared over the years.\nAppendix A: Smaller ECMAScript 6 Changes covers other changes implemented in ECMAScript 6 that you\u0026rsquo;ll use less frequently or that didn\u0026rsquo;t quite fit into the broader major topics covered in each chapter.\nAppendix B: Understanding ECMAScript 7 (2016) describes the two additions to the standard that were implemented for ECMAScript 7, which didn\u0026rsquo;t impact JavaScript nearly as much as ECMAScript 6.\nConventions Used The following typographical conventions are used in this book:\nItalics introduces new terms Constant width indicates a piece of code or filename Additionally, longer code examples are contained in constant width code blocks such as:\nfunction doSomething() { // empty }\rWithin a code block, comments to the right of a console.log() statement indicate the output you\u0026rsquo;ll see in the browser or Node.js console when the code is executed, for example:\nconsole.log(\u0026#34;Hi\u0026#34;); // \u0026#34;Hi\u0026#34; If a line of code in a code block throws an error, this is also indicated to the right of the code:\ndoSomething(); // error! Help and Support You can file issues, suggest changes, and open pull requests against this book by visiting: https://github.com/nzakas/understandinges6\nIf you have questions as you read this book, please send a message to my mailing list: http://groups.google.com/group/zakasbooks.\nAcknowledgments Thanks to Jennifer Griffith-Delgado, Alison Law, and everyone at No Starch Press for their support and help with this book. Their understanding and patience as my productivity slowed to a crawl during my extended illness is something I will never forget.\nI\u0026rsquo;m grateful for the watchful eye of Juriy Zaytsev as tech editor and to Dr. Axel Rauschmayer for his feedback and several conversations that helped to clarify some of the concepts discussed in this book.\nThanks to everyone who submitted fixes to the version of this book that is hosted on GitHub: ShMcK, Ronen Elster, Rick Waldron, blacktail, Paul Salaets, Lonniebiz, Igor Skuhar, jakub-g, David Chang, Kevin Sweeney, Kyle Simpson, Peter Bakondy, Philip Borisov, Shaun Hickson, Steven Foote, kavun, Dan Kielp, Darren Huskie, Jakub Narębski, Jamund Ferguson, Josh Lubaway, Marián Rusnák, Nikolas Poniros, Robin Pokorný, Roman Lo, Yang Su, alexyans, robertd, 404, Aaron Dandy, AbdulFattah Popoola, Adam Richeimer, Ahmad Ali, Aleksandar Djindjic, Arjunkumar, Ben Regenspan, Carlo Costantini, Dmitri Suvorov, Kyle Pollock, Mallory, Erik Sundahl, Ethan Brown, Eugene Zubarev, Francesco Pongiluppi, Jake Champion, Jeremy Caney, Joe Eames, Juriy Zaytsev, Kale Worsley, Kevin Lozandier, Lewis Ellis, Mohsen Azimi, Navaneeth Kesavan, Nick Bottomley, Niels Dequeker, Pahlevi Fikri Auliya, Prayag Verma, Raj Anand, Ross Gerbasi, Roy Ling, Sarbbottam Bandyopadhyay, and Shidhin.\nAlso, thanks to everyone who supported this book on Patreon: Casey Visco.\n","date":"0001-01-01","id":27,"permalink":"/es6/00-introduction/","summary":"\u003cp\u003eThe JavaScript core language features are defined in a standard called ECMA-262. The language defined in this standard is called ECMAScript. What you know as JavaScript in browsers and Node.js is actually a superset of ECMAScript. Browsers and Node.js add more functionality through additional objects and methods, but the core of the language remains as defined in ECMAScript. The ongoing development of ECMA-262 is vital to the success of JavaScript as a whole, and this book covers the changes brought about by the most recent major update to the language: ECMAScript 6.\u003c/p\u003e","tags":[],"title":"00 Introduction"},{"content":"Traditionally, the way variable declarations work has been one tricky part of programming in JavaScript. In most C-based languages, variables (or bindings) are created at the spot where the declaration occurs. In JavaScript, however, this is not the case. Where your variables are actually created depends on how you declare them, and ECMAScript 6 offers options to make controlling scope easier. This chapter demonstrates why classic var declarations can be confusing, introduces block-level bindings in ECMAScript 6, and then offers some best practices for using them.\nVar Declarations and Hoisting Variable declarations using var are treated as if they are at the top of the function (or global scope, if declared outside of a function) regardless of where the actual declaration occurs; this is called hoisting. For a demonstration of what hoisting does, consider the following function definition:\nfunction getValue(condition) { if (condition) { var value = \u0026#34;blue\u0026#34;; // other code return value; } else { // value exists here with a value of undefined return null; } // value exists here with a value of undefined }\rIf you are unfamiliar with JavaScript, then you might expect the variable value to only be created if condition evaluates to true. In fact, the variable value is created regardless. Behind the scenes, the JavaScript engine changes the getValue function to look like this:\nfunction getValue(condition) { var value; if (condition) { value = \u0026#34;blue\u0026#34;; // other code return value; } else { return null; } }\rThe declaration of value is hoisted to the top, while the initialization remains in the same spot. That means the variable value is actually still accessible from within the else clause. If accessed from there, the variable would just have a value of undefined because it hasn\u0026rsquo;t been initialized.\nIt often takes new JavaScript developers some time to get used to declaration hoisting, and misunderstanding this unique behavior can end up causing bugs. For this reason, ECMAScript 6 introduces block level scoping options to make the controlling a variable\u0026rsquo;s lifecycle a little more powerful.\nBlock-Level Declarations Block-level declarations are those that declare variables that are inaccessible outside of a given block scope. Block scopes, also called lexical scopes, are created:\nInside of a function Inside of a block (indicated by the { and } characters) Block scoping is how many C-based languages work, and the introduction of block-level declarations in ECMAScript 6 is intended to bring that same flexibility (and uniformity) to JavaScript.\nLet Declarations The let declaration syntax is the same as the syntax for var. You can basically replace var with let to declare a variable, but limit the variable\u0026rsquo;s scope to only the current code block (there are a few other subtle differences discussed a bit later, as well). Since let declarations are not hoisted to the top of the enclosing block, you may want to always place let declarations first in the block, so that they are available to the entire block. Here\u0026rsquo;s an example:\nfunction getValue(condition) { if (condition) { let value = \u0026#34;blue\u0026#34;; // other code return value; } else { // value doesn\u0026#39;t exist here return null; } // value doesn\u0026#39;t exist here }\rThis version of the getValue function behaves much closer to how you\u0026rsquo;d expect it to in other C-based languages. Since the variable value is declared using let instead of var, the declaration isn\u0026rsquo;t hoisted to the top of the function definition, and the variable value is no longer accessible once execution flows out of the if block. If condition evaluates to false, then value is never declared or initialized.\nNo Redeclaration If an identifier has already been defined in a scope, then using the identifier in a let declaration inside that scope causes an error to be thrown. For example:\nvar count = 30; // Syntax error let count = 40;\rIn this example, count is declared twice: once with var and once with let. Because let will not redefine an identifier that already exists in the same scope, the let declaration will throw an error. On the other hand, no error is thrown if a let declaration creates a new variable with the same name as a variable in its containing scope, as demonstrated in the following code:\nvar count = 30; // Does not throw an error if (condition) { let count = 40; // more code }\rThis let declaration doesn\u0026rsquo;t throw an error because it creates a new variable called count within the if statement, instead of creating count in the surrounding block. Inside the if block, this new variable shadows the global count, preventing access to it until execution leaves the block.\nConstant Declarations You can also define variables in ECMAScript 6 with the const declaration syntax. Variables declared using const are considered constants, meaning their values cannot be changed once set. For this reason, every const variable must be initialized on declaration, as shown in this example:\n// Valid constant const maxItems = 30; // Syntax error: missing initialization const name;\rThe maxItems variable is initialized, so its const declaration should work without a problem. The name variable, however, would cause a syntax error if you tried to run the program containing this code, because name is not initialized.\nConstants vs Let Declarations Constants, like let declarations, are block-level declarations. That means constants are no longer accessible once execution flows out of the block in which they were declared, and declarations are not hoisted, as demonstrated in this example:\nif (condition) { const maxItems = 5; // more code } // maxItems isn\u0026#39;t accessible here In this code, the constant maxItems is declared within an if statement. Once the statement finishes executing, maxItems is not accessible outside of that block.\nIn another similarity to let, a const declaration throws an error when made with an identifier for an already-defined variable in the same scope. It doesn\u0026rsquo;t matter if that variable was declared using var (for global or function scope) or let (for block scope). For example, consider this code:\nvar message = \u0026#34;Hello!\u0026#34;; let age = 25; // Each of these would throw an error. const message = \u0026#34;Goodbye!\u0026#34;; const age = 30;\rThe two const declarations would be valid alone, but given the previous var and let declarations in this case, neither will work as intended.\nDespite those similarities, there is one big difference between let and const to remember. Attempting to assign a const to a previously defined constant will throw an error, in both strict and non-strict modes:\nconst maxItems = 5; maxItems = 6; // throws error Much like constants in other languages, the maxItems variable can\u0026rsquo;t be assigned a new value later on. However, unlike constants in other languages, the value a constant holds may be modified if it is an object.\nDeclaring Objects with Const A const declaration prevents modification of the binding and not of the value itself. That means const declarations for objects do not prevent modification of those objects. For example:\nconst person = { name: \u0026#34;Nicholas\u0026#34; }; // works person.name = \u0026#34;Greg\u0026#34;; // throws an error person = { name: \u0026#34;Greg\u0026#34; };\rHere, the binding person is created with an initial value of an object with one property. It\u0026rsquo;s possible to change person.name without causing an error because this changes what person contains and doesn\u0026rsquo;t change the value that person is bound to. When this code attempts to assign a value to person (thus attempting to change the binding), an error will be thrown. This subtlety in how const works with objects is easy to misunderstand. Just remember: const prevents modification of the binding, not modification of the bound value.\nThe Temporal Dead Zone A variable declared with either let or const cannot be accessed until after the declaration. Attempting to do so results in a reference error, even when using normally safe operations such as the typeof operation in this example:\nif (condition) { console.log(typeof value); // ReferenceError! let value = \u0026#34;blue\u0026#34;; }\rHere, the variable value is defined and initialized using let, but that statement is never executed because the previous line throws an error. The issue is that value exists in what the JavaScript community has dubbed the temporal dead zone (TDZ). The TDZ is never named explicitly in the ECMAScript specification, but the term is often used to describe why let and const declarations are not accessible before their declaration. This section covers some subtleties of declaration placement that the TDZ causes, and although the examples shown all use let, note that the same information applies to const.\nWhen a JavaScript engine looks through an upcoming block and finds a variable declaration, it either hoists the declaration to the top of the function or global scope (for var) or places the declaration in the TDZ (for let and const). Any attempt to access a variable in the TDZ results in a runtime error. That variable is only removed from the TDZ, and therefore safe to use, once execution flows to the variable declaration.\nThis is true anytime you attempt to use a variable declared with let or const before it\u0026rsquo;s been defined. As the previous example demonstrated, this even applies to the normally safe typeof operator. You can, however, use typeof on a variable outside of the block where that variable is declared, though it may not give the results you\u0026rsquo;re after. Consider this code:\nconsole.log(typeof value); // \u0026#34;undefined\u0026#34; if (condition) { let value = \u0026#34;blue\u0026#34;; }\rThe variable value isn\u0026rsquo;t in the TDZ when the typeof operation executes because it occurs outside of the block in which value is declared. That means there is no value binding, and typeof simply returns \u0026quot;undefined\u0026quot;.\nThe TDZ is just one unique aspect of block bindings. Another unique aspect has to do with their use inside of loops.\nBlock Binding in Loops Perhaps one area where developers most want block level scoping of variables is within for loops, where the throwaway counter variable is meant to be used only inside the loop. For instance, it\u0026rsquo;s not uncommon to see code like this in JavaScript:\nfor (var i = 0; i \u0026lt; 10; i++) { process(items[i]); } // i is still accessible here console.log(i); // 10 In other languages, where block level scoping is the default, this example should work as intended, and only the for loop should have access to the i variable. In JavaScript, however, the variable i is still accessible after the loop is completed because the var declaration gets hoisted. Using let instead, as in the following code, should give the intended behavior:\nfor (let i = 0; i \u0026lt; 10; i++) { process(items[i]); } // i is not accessible here - throws an error console.log(i);\rIn this example, the variable i only exists within the for loop. Once the loop is complete, the variable is no longer accessible elsewhere.\nFunctions in Loops The characteristics of var have long made creating functions inside of loops problematic, because the loop variables are accessible from outside the scope of the loop. Consider the following code:\nvar funcs = []; for (var i = 0; i \u0026lt; 10; i++) { funcs.push(function () { console.log(i); }); } funcs.forEach(function (func) { func(); // outputs the number \u0026#34;10\u0026#34; ten times });\rYou might ordinarily expect this code to print the numbers 0 to 9, but it outputs the number 10 ten times in a row. That\u0026rsquo;s because i is shared across each iteration of the loop, meaning the functions created inside the loop all hold a reference to the same variable. The variable i has a value of 10 once the loop completes, and so when console.log(i) is called, that value prints each time.\nTo fix this problem, developers use immediately-invoked function expressions (IIFEs) inside of loops to force a new copy of the variable they want to iterate over to be created, as in this example:\nvar funcs = []; for (var i = 0; i \u0026lt; 10; i++) { funcs.push( (function (value) { return function () { console.log(value); }; })(i) ); } funcs.forEach(function (func) { func(); // outputs 0, then 1, then 2, up to 9 });\rThis version uses an IIFE inside of the loop. The i variable is passed to the IIFE, which creates its own copy and stores it as value. This is the value used by the function for that iteration, so calling each function returns the expected value as the loop counts up from 0 to 9. Fortunately, block-level binding with let and const in ECMAScript 6 can simplify this loop for you.\nLet Declarations in Loops A let declaration simplifies loops by effectively mimicking what the IIFE does in the previous example. On each iteration, the loop creates a new variable and initializes it to the value of the variable with the same name from the previous iteration. That means you can omit the IIFE altogether and get the results you expect, like this:\nvar funcs = []; for (let i = 0; i \u0026lt; 10; i++) { funcs.push(function () { console.log(i); }); } funcs.forEach(function (func) { func(); // outputs 0, then 1, then 2, up to 9 });\rThis loop works exactly like the loop that used var and an IIFE but is, arguably, cleaner. The let declaration creates a new variable i each time through the loop, so each function created inside the loop gets its own copy of i. Each copy of i has the value it was assigned at the beginning of the loop iteration in which it was created. The same is true for for-in and for-of loops, as shown here:\nvar funcs = [], object = { a: true, b: true, c: true }; for (let key in object) { funcs.push(function () { console.log(key); }); } funcs.forEach(function (func) { func(); // outputs \u0026#34;a\u0026#34;, then \u0026#34;b\u0026#34;, then \u0026#34;c\u0026#34; });\rIn this example, the for-in loop shows the same behavior as the for loop. Each time through the loop, a new key binding is created, and so each function has its own copy of the key variable. The result is that each function outputs a different value. If var were used to declare key, all functions would output \u0026quot;c\u0026quot;.\nI\u0026gt; It\u0026rsquo;s important to understand that the behavior of let declarations in loops is a specially-defined behavior in the specification and is not necessarily related to the non-hoisting characteristics of let. In fact, early implementations of let did not have this behavior, as it was added later on in the process.\nConstant Declarations in Loops The ECMAScript 6 specification doesn\u0026rsquo;t explicitly disallow const declarations in loops; however, there are different behaviors based on the type of loop you\u0026rsquo;re using. For a normal for loop, you can use const in the initializer, but the loop will throw a warning if you attempt to change the value. For example:\nvar funcs = []; // throws an error after one iteration for (const i = 0; i \u0026lt; 10; i++) { funcs.push(function () { console.log(i); }); }\rIn this code, the i variable is declared as a constant. The first iteration of the loop, where i is 0, executes successfully. An error is thrown when i++ executes because it\u0026rsquo;s attempting to modify a constant. As such, you can only use const to declare a variable in the loop initializer if you are not modifying that variable.\nWhen used in a for-in or for-of loop, on the other hand, a const variable behaves the same as a let variable. So the following should not cause an error:\nvar funcs = [], object = { a: true, b: true, c: true }; // doesn\u0026#39;t cause an error for (const key in object) { funcs.push(function () { console.log(key); }); } funcs.forEach(function (func) { func(); // outputs \u0026#34;a\u0026#34;, then \u0026#34;b\u0026#34;, then \u0026#34;c\u0026#34; });\rThis code functions almost exactly the same as the second example in the \u0026ldquo;Let Declarations in Loops\u0026rdquo; section. The only difference is that the value of key cannot be changed inside the loop. The for-in and for-of loops work with const because the loop initializer creates a new binding on each iteration through the loop rather than attempting to modify the value of an existing binding (as was the case with the previous example using for instead of for-in).\nGlobal Block Bindings Another way in which let and const are different from var is in their global scope behavior. When var is used in the global scope, it creates a new global variable, which is a property on the global object (window in browsers). That means you can accidentally overwrite an existing global using var, such as:\n// in a browser var RegExp = \u0026#34;Hello!\u0026#34;; console.log(window.RegExp); // \u0026#34;Hello!\u0026#34; var ncz = \u0026#34;Hi!\u0026#34;; console.log(window.ncz); // \u0026#34;Hi!\u0026#34; Even though the RegExp global is defined on window, it is not safe from being overwritten by a var declaration. This example declares a new global variable RegExp that overwrites the original. Similarly, ncz is defined as a global variable and immediately defined as a property on window. This is the way JavaScript has always worked.\nIf you instead use let or const in the global scope, a new binding is created in the global scope but no property is added to the global object. That also means you cannot overwrite a global variable using let or const, you can only shadow it. Here\u0026rsquo;s an example:\n// in a browser let RegExp = \u0026#34;Hello!\u0026#34;; console.log(RegExp); // \u0026#34;Hello!\u0026#34; console.log(window.RegExp === RegExp); // false const ncz = \u0026#34;Hi!\u0026#34;; console.log(ncz); // \u0026#34;Hi!\u0026#34; console.log(\u0026#34;ncz\u0026#34; in window); // false Here, a new let declaration for RegExp creates a binding that shadows the global RegExp. That means window.RegExp and RegExp are not the same, so there is no disruption to the global scope. Also, the const declaration for ncz creates a binding but does not create a property on the global object. This capability makes let and const a lot safer to use in the global scope when you don\u0026rsquo;t want to create properties on the global object.\nI\u0026gt; You may still want to use var in the global scope if you have a code that should be available from the global object. This is most common in a browser when you want to access code across frames or windows.\nEmerging Best Practices for Block Bindings While ECMAScript 6 was in development, there was widespread belief you should use let by default instead of var for variable declarations. For many JavaScript developers, let behaves exactly the way they thought var should have behaved, and so the direct replacement makes logical sense. In this case, you would use const for variables that needed modification protection.\nHowever, as more developers migrated to ECMAScript 6, an alternate approach gained popularity: use const by default and only use let when you know a variable\u0026rsquo;s value needs to change. The rationale is that most variables should not change their value after initialization because unexpected value changes are a source of bugs. This idea has a significant amount of traction and is worth exploring in your code as you adopt ECMAScript 6.\nSummary The let and const block bindings introduce lexical scoping to JavaScript. These declarations are not hoisted and only exist within the block in which they are declared. This offers behavior that is more like other languages and less likely to cause unintentional errors, as variables can now be declared exactly where they are needed. As a side effect, you cannot access variables before they are declared, even with safe operators such as typeof. Attempting to access a block binding before its declaration results in an error due to the binding\u0026rsquo;s presence in the temporal dead zone (TDZ).\nIn many cases, let and const behave in a manner similar to var; however, this is not true for loops. For both let and const, for-in and for-of loops create a new binding with each iteration through the loop. That means functions created inside the loop body can access the loop bindings values as they are during the current iteration, rather than as they were after the loop\u0026rsquo;s final iteration (the behavior with var). The same is true for let declarations in for loops, while attempting to use const declarations in a for loop may result in an error.\nThe current best practice for block bindings is to use const by default and only use let when you know a variable\u0026rsquo;s value needs to change. This ensures a basic level of immutability in code that can help prevent certain types of errors.\n","date":"0001-01-01","id":28,"permalink":"/es6/01-block-bindings/","summary":"\u003cp\u003eTraditionally, the way variable declarations work has been one tricky part of programming in JavaScript. In most C-based languages, variables (or \u003cem\u003ebindings\u003c/em\u003e) are created at the spot where the declaration occurs. In JavaScript, however, this is not the case. Where your variables are actually created depends on how you declare them, and ECMAScript 6 offers options to make controlling scope easier. This chapter demonstrates why classic \u003ccode\u003evar\u003c/code\u003e declarations can be confusing, introduces block-level bindings in ECMAScript 6, and then offers some best practices for using them.\u003c/p\u003e","tags":[],"title":"01 Block Bindings"},{"content":"Strings are arguably one of the most important data types in programming. They\u0026rsquo;re in nearly every higher-level programming language, and being able to work with them effectively is fundamental for developers to create useful programs. By extension, regular expressions are important because of the extra power they give developers to wield on strings. With these facts in mind, the creators of ECMAScript 6 improved strings and regular expressions by adding new capabilities and long-missing functionality. This chapter gives a tour of both types of changes.\nBetter Unicode Support Before ECMAScript 6, JavaScript strings revolved around 16-bit character encoding (UTF-16). Each 16-bit sequence is a code unit representing a character. All string properties and methods, like the length property and the charAt() method, were based on these 16-bit code units. Of course, 16 bits used to be enough to contain any character. That\u0026rsquo;s no longer true thanks to the expanded character set introduced by Unicode.\nUTF-16 Code Points Limiting character length to 16 bits wasn\u0026rsquo;t possible for Unicode\u0026rsquo;s stated goal of providing a globally unique identifier to every character in the world. These globally unique identifiers, called code points, are simply numbers starting at 0. Code points are what you may think of as character codes, where a number represents a character. A character encoding must encode code points into code units that are internally consistent. For UTF-16, code points can be made up of many code units.\nThe first 2^16^ code points in UTF-16 are represented as single 16-bit code units. This range is called the Basic Multilingual Plane (BMP). Everything beyond that is considered to be in one of the supplementary planes, where the code points can no longer be represented in just 16-bits. UTF-16 solves this problem by introducing surrogate pairs in which a single code point is represented by two 16-bit code units. That means any single character in a string can be either one code unit for BMP characters, giving a total of 16 bits, or two units for supplementary plane characters, giving a total of 32 bits.\nIn ECMAScript 5, all string operations work on 16-bit code units, meaning that you can get unexpected results from UTF-16 encoded strings containing surrogate pairs, as in this example:\nvar text = \u0026#34;𠮷\u0026#34;; console.log(text.length); // 2 console.log(/^.$/.test(text)); // false console.log(text.charAt(0)); // \u0026#34;\u0026#34; console.log(text.charAt(1)); // \u0026#34;\u0026#34; console.log(text.charCodeAt(0)); // 55362 console.log(text.charCodeAt(1)); // 57271 The single Unicode character \u0026quot;𠮷\u0026quot; is represented using surrogate pairs, and as such, the JavaScript string operations above treat the string as having two 16-bit characters. That means:\nThe length of text is 2, when it should be 1. A regular expression trying to match a single character fails because it thinks there are two characters. The charAt() method is unable to return a valid character string, because neither set of 16 bits corresponds to a printable character. The charCodeAt() method also just can\u0026rsquo;t identify the character properly. It returns the appropriate 16-bit number for each code unit, but that is the closest you could get to the real value of text in ECMAScript 5.\nECMAScript 6, on the other hand, enforces UTF-16 string encoding to address problems like these. Standardizing string operations based on this character encoding means that JavaScript can support functionality designed to work specifically with surrogate pairs. The rest of this section discusses a few key examples of that functionality.\nThe codePointAt() Method One method ECMAScript 6 added to fully support UTF-16 is the codePointAt() method, which retrieves the Unicode code point that maps to a given position in a string. This method accepts the code unit position rather than the character position and returns an integer value, as these console.log() examples show:\nvar text = \u0026#34;𠮷a\u0026#34;; console.log(text.charCodeAt(0)); // 55362 console.log(text.charCodeAt(1)); // 57271 console.log(text.charCodeAt(2)); // 97 console.log(text.codePointAt(0)); // 134071 console.log(text.codePointAt(1)); // 57271 console.log(text.codePointAt(2)); // 97 The codePointAt() method returns the same value as the charCodeAt() method unless it operates on non-BMP characters. The first character in text is non-BMP and is therefore comprised of two code units, meaning the length property is 3 rather than 2. The charCodeAt() method returns only the first code unit for position 0, but codePointAt() returns the full code point even though the code point spans multiple code units. Both methods return the same value for positions 1 (the second code unit of the first character) and 2 (the \u0026quot;a\u0026quot; character).\nCalling the codePointAt() method on a character is the easiest way to determine if that character is represented by one or two code units. Here\u0026rsquo;s a function you could write to check:\nfunction is32Bit(c) { return c.codePointAt(0) \u0026gt; 0xffff; } console.log(is32Bit(\u0026#34;𠮷\u0026#34;)); // true console.log(is32Bit(\u0026#34;a\u0026#34;)); // false The upper bound of 16-bit characters is represented in hexadecimal as FFFF, so any code point above that number must be represented by two code units, for a total of 32 bits.\nThe String.fromCodePoint() Method When ECMAScript provides a way to do something, it also tends to provide a way to do the reverse. You can use codePointAt() to retrieve the code point for a character in a string, while String.fromCodePoint() produces a single-character string from a given code point. For example:\nconsole.log(String.fromCodePoint(134071)); // \u0026#34;𠮷\u0026#34; Think of String.fromCodePoint() as a more complete version of the String.fromCharCode() method. Both give the same result for all characters in the BMP. There\u0026rsquo;s only a difference when you pass code points for characters outside of the BMP.\nThe normalize() Method Another interesting aspect of Unicode is that different characters may be considered equivalent for the purpose of sorting or other comparison-based operations. There are two ways to define these relationships. First, canonical equivalence means that two sequences of code points are considered interchangeable in all respects. For example, a combination of two characters can be canonically equivalent to one character. The second relationship is compatibility. Two compatible sequences of code points look different but can be used interchangeably in certain situations.\nDue to these relationships, two strings representing fundamentally the same text can contain different code point sequences. For example, the character \u0026ldquo;æ\u0026rdquo; and the two-character string \u0026ldquo;ae\u0026rdquo; may be used interchangeably but are strictly not equivalent unless normalized in some way.\nECMAScript 6 supports Unicode normalization forms by giving strings a normalize() method. This method optionally accepts a single string parameter indicating one of the following Unicode normalization forms to apply:\nNormalization Form Canonical Composition (\u0026quot;NFC\u0026quot;), which is the default Normalization Form Canonical Decomposition (\u0026quot;NFD\u0026quot;) Normalization Form Compatibility Composition (\u0026quot;NFKC\u0026quot;) Normalization Form Compatibility Decomposition (\u0026quot;NFKD\u0026quot;) It\u0026rsquo;s beyond the scope of this book to explain the differences between these four forms. Just keep in mind that when comparing strings, both strings must be normalized to the same form. For example:\nvar normalized = values.map(function (text) { return text.normalize(); }); normalized.sort(function (first, second) { if (first \u0026lt; second) { return -1; } else if (first === second) { return 0; } else { return 1; } });\rThis code converts the strings in the values array into a normalized form so that the array can be sorted appropriately. You can also sort the original array by calling normalize() as part of the comparator, as follows:\nvalues.sort(function (first, second) { var firstNormalized = first.normalize(), secondNormalized = second.normalize(); if (firstNormalized \u0026lt; secondNormalized) { return -1; } else if (firstNormalized === secondNormalized) { return 0; } else { return 1; } });\rOnce again, the most important thing to note about this code is that both first and second are normalized in the same way. These examples have used the default, NFC, but you can just as easily specify one of the others, like this:\nvalues.sort(function (first, second) { var firstNormalized = first.normalize(\u0026#34;NFD\u0026#34;), secondNormalized = second.normalize(\u0026#34;NFD\u0026#34;); if (firstNormalized \u0026lt; secondNormalized) { return -1; } else if (firstNormalized === secondNormalized) { return 0; } else { return 1; } });\rIf you\u0026rsquo;ve never worried about Unicode normalization before, then you probably won\u0026rsquo;t have much use for this method now. But if you ever work on an internationalized application, you\u0026rsquo;ll definitely find the normalize() method helpful.\nMethods aren\u0026rsquo;t the only improvements that ECMAScript 6 provides for working with Unicode strings, though. The standard also adds two useful syntax elements.\nThe Regular Expression u Flag You can accomplish many common string operations through regular expressions. But remember, regular expressions assume 16-bit code units, where each represents a single character. To address this problem, ECMAScript 6 defines a u flag for regular expressions, which stands for Unicode.\nThe u Flag in Action When a regular expression has the u flag set, it switches modes to work on characters, not code units. That means the regular expression should no longer get confused about surrogate pairs in strings and should behave as expected. For example, consider this code:\nvar text = \u0026#34;𠮷\u0026#34;; console.log(text.length); // 2 console.log(/^.$/.test(text)); // false console.log(/^.$/u.test(text)); // true The regular expression /^.$/ matches any input string with a single character. When used without the u flag, this regular expression matches on code units, and so the Japanese character (which is represented by two code units) doesn\u0026rsquo;t match the regular expression. When used with the u flag, the regular expression compares characters instead of code units and so the Japanese character matches.\nCounting Code Points Unfortunately, ECMAScript 6 doesn\u0026rsquo;t add a method to determine how many code points a string has, but with the u flag, you can use regular expressions to figure it out as follows:\nfunction codePointLength(text) { var result = text.match(/[\\s\\S]/gu); return result ? result.length : 0; } console.log(codePointLength(\u0026#34;abc\u0026#34;)); // 3 console.log(codePointLength(\u0026#34;𠮷bc\u0026#34;)); // 3 This example calls match() to check text for both whitespace and non-whitespace characters (using [\\s\\S] to ensure the pattern matches newlines), using a regular expression that is applied globally with Unicode enabled. The result contains an array of matches when there\u0026rsquo;s at least one match, so the array length is the number of code points in the string. In Unicode, the strings \u0026quot;abc\u0026quot; and \u0026quot;𠮷bc\u0026quot; both have three characters, so the array length is three.\nW\u0026gt; Although this approach works, it\u0026rsquo;s not very fast, especially when applied to long strings. You can use a string iterator (discussed in Chapter 8) as well. In general, try to minimize counting code points whenever possible.\nDetermining Support for the u Flag Since the u flag is a syntax change, attempting to use it in JavaScript engines that aren\u0026rsquo;t compatible with ECMAScript 6 throws a syntax error. The safest way to determine if the u flag is supported is with a function, like this one:\nfunction hasRegExpU() { try { var pattern = new RegExp(\u0026#34;.\u0026#34;, \u0026#34;u\u0026#34;); return true; } catch (ex) { return false; } }\rThis function uses the RegExp constructor to pass in the u flag as an argument. This syntax is valid even in older JavaScript engines, but the constructor will throw an error if u isn\u0026rsquo;t supported.\nI\u0026gt; If your code still needs to work in older JavaScript engines, always use the RegExp constructor when using the u flag. This will prevent syntax errors and allow you to optionally detect and use the u flag without aborting execution.\nOther String Changes JavaScript strings have always lagged behind similar features of other languages. It was only in ECMAScript 5 that strings finally gained a trim() method, for example, and ECMAScript 6 continues extending JavaScript\u0026rsquo;s capacity to parse strings with new functionality.\nMethods for Identifying Substrings Developers have used the indexOf() method to identify strings inside other strings since JavaScript was first introduced. ECMAScript 6 includes the following three methods, which are designed to do just that:\nThe includes() method returns true if the given text is found anywhere within the string. It returns false if not. The startsWith() method returns true if the given text is found at the beginning of the string. It returns false if not. The endsWith() method returns true if the given text is found at the end of the string. It returns false if not. Each methods accept two arguments: the text to search for and an optional index. When the second argument is provided, includes() and startsWith() start the match from that index while endsWith() starts the match from the second argument; when the second argument is omitted, includes() and startsWith() search from the beginning of the string, while endsWith() starts from the end. In effect, the second argument minimizes the amount of the string being searched. Here are some examples showing these three methods in action:\nvar msg = \u0026#34;Hello world!\u0026#34;; console.log(msg.startsWith(\u0026#34;Hello\u0026#34;)); // true console.log(msg.endsWith(\u0026#34;!\u0026#34;)); // true console.log(msg.includes(\u0026#34;o\u0026#34;)); // true console.log(msg.startsWith(\u0026#34;o\u0026#34;)); // false console.log(msg.endsWith(\u0026#34;world!\u0026#34;)); // true console.log(msg.includes(\u0026#34;x\u0026#34;)); // false console.log(msg.startsWith(\u0026#34;o\u0026#34;, 4)); // true console.log(msg.endsWith(\u0026#34;o\u0026#34;, 8)); // true console.log(msg.includes(\u0026#34;o\u0026#34;, 8)); // false The first six calls don\u0026rsquo;t include a second parameter, so they\u0026rsquo;ll search the whole string if needed. The last three calls only check part of the string. The call to msg.startsWith(\u0026quot;o\u0026quot;, 4) starts the match by looking at index 4 of the msg string, which is the \u0026ldquo;o\u0026rdquo; in \u0026ldquo;Hello\u0026rdquo;. The call to msg.endsWith(\u0026quot;o\u0026quot;, 8) starts the search from index 0 and searches up to index 7, which is the \u0026ldquo;o\u0026rdquo; in \u0026ldquo;world\u0026rdquo;. The call to msg.includes(\u0026quot;o\u0026quot;, 8) starts the match from index 8, which is the \u0026ldquo;r\u0026rdquo; in \u0026ldquo;world\u0026rdquo;.\nWhile these three methods make identifying the existence of substrings easier, each only returns a boolean value. If you need to find the actual position of one string within another, use the indexOf() or lastIndexOf() methods.\nW\u0026gt; The startsWith(), endsWith(), and includes() methods will throw an error if you pass a regular expression instead of a string. This stands in contrast to indexOf() and lastIndexOf(), which both convert a regular expression argument into a string and then search for that string.\nThe repeat() Method ECMAScript 6 also adds a repeat() method to strings, which accepts the number of times to repeat the string as an argument. It returns a new string containing the original string repeated the specified number of times. For example:\nconsole.log(\u0026#34;x\u0026#34;.repeat(3)); // \u0026#34;xxx\u0026#34; console.log(\u0026#34;hello\u0026#34;.repeat(2)); // \u0026#34;hellohello\u0026#34; console.log(\u0026#34;abc\u0026#34;.repeat(4)); // \u0026#34;abcabcabcabc\u0026#34; This method is a convenience function above all else, and it can be especially useful when manipulating text. It\u0026rsquo;s particularly useful in code formatting utilities that need to create indentation levels, like this:\n// indent using a specified number of spaces var indent = \u0026#34; \u0026#34;.repeat(4), indentLevel = 0; // whenever you increase the indent var newIndent = indent.repeat(++indentLevel);\rThe first repeat() call creates a string of four spaces, and the indentLevel variable keeps track of the indent level. Then, you can just call repeat() with an incremented indentLevel to change the number of spaces.\nECMAScript 6 also makes some useful changes to regular expression functionality that don\u0026rsquo;t fit into a particular category. The next section highlights a few.\nOther Regular Expression Changes Regular expressions are an important part of working with strings in JavaScript, and like many parts of the language, they haven\u0026rsquo;t changed much in recent versions. ECMAScript 6, however, makes several improvements to regular expressions to go along with the updates to strings.\nThe Regular Expression y Flag ECMAScript 6 standardized the y flag after it was implemented in Firefox as a proprietary extension to regular expressions. The y flag affects a regular expression search\u0026rsquo;s sticky property, and it tells the search to start matching characters in a string at the position specified by the regular expression\u0026rsquo;s lastIndex property. If there is no match at that location, then the regular expression stops matching. To see how this works, consider the following code:\nvar text = \u0026#34;hello1 hello2 hello3\u0026#34;, pattern = /hello\\d\\s?/, result = pattern.exec(text), globalPattern = /hello\\d\\s?/g, globalResult = globalPattern.exec(text), stickyPattern = /hello\\d\\s?/y, stickyResult = stickyPattern.exec(text); console.log(result[0]); // \u0026#34;hello1 \u0026#34; console.log(globalResult[0]); // \u0026#34;hello1 \u0026#34; console.log(stickyResult[0]); // \u0026#34;hello1 \u0026#34; pattern.lastIndex = 1; globalPattern.lastIndex = 1; stickyPattern.lastIndex = 1; result = pattern.exec(text); globalResult = globalPattern.exec(text); stickyResult = stickyPattern.exec(text); console.log(result[0]); // \u0026#34;hello1 \u0026#34; console.log(globalResult[0]); // \u0026#34;hello2 \u0026#34; console.log(stickyResult[0]); // Error! stickyResult is null This example has three regular expressions. The expression in pattern has no flags, the one in globalPattern uses the g flag, and the one in stickyPattern uses the y flag. In the first trio of console.log() calls, all three regular expressions should return \u0026quot;hello1 \u0026quot; with a space at the end.\nAfter that, the lastIndex property is changed to 1 on all three patterns, meaning that the regular expression should start matching from the second character on all of them. The regular expression with no flags completely ignores the change to lastIndex and still matches \u0026quot;hello1 \u0026quot; without incident. The regular expression with the g flag goes on to match \u0026quot;hello2 \u0026quot; because it is searching forward from the second character of the string (\u0026quot;e\u0026quot;). The sticky regular expression doesn\u0026rsquo;t match anything beginning at the second character so stickyResult is null.\nThe sticky flag saves the index of the next character after the last match in lastIndex whenever an operation is performed. If an operation results in no match, then lastIndex is set back to 0. The global flag behaves the same way, as demonstrated here:\nvar text = \u0026#34;hello1 hello2 hello3\u0026#34;, pattern = /hello\\d\\s?/, result = pattern.exec(text), globalPattern = /hello\\d\\s?/g, globalResult = globalPattern.exec(text), stickyPattern = /hello\\d\\s?/y, stickyResult = stickyPattern.exec(text); console.log(result[0]); // \u0026#34;hello1 \u0026#34; console.log(globalResult[0]); // \u0026#34;hello1 \u0026#34; console.log(stickyResult[0]); // \u0026#34;hello1 \u0026#34; console.log(pattern.lastIndex); // 0 console.log(globalPattern.lastIndex); // 7 console.log(stickyPattern.lastIndex); // 7 result = pattern.exec(text); globalResult = globalPattern.exec(text); stickyResult = stickyPattern.exec(text); console.log(result[0]); // \u0026#34;hello1 \u0026#34; console.log(globalResult[0]); // \u0026#34;hello2 \u0026#34; console.log(stickyResult[0]); // \u0026#34;hello2 \u0026#34; console.log(pattern.lastIndex); // 0 console.log(globalPattern.lastIndex); // 14 console.log(stickyPattern.lastIndex); // 14 The value of lastIndex changes to 7 after the first call to exec() and to 14 after the second call, for both the stickyPattern and globalPattern variables.\nThere are two more subtle details about the sticky flag to keep in mind:\nThe lastIndex property is only honored when calling methods that exist on the regular expression object, like the exec() and test() methods. Passing the regular expression to a string method, such as match(), will not result in the sticky behavior. When using the ^ character to match the start of a string, sticky regular expressions only match from the start of the string (or the start of the line in multiline mode). While lastIndex is 0, the ^ makes a sticky regular expression no different from a non-sticky one. If lastIndex doesn\u0026rsquo;t correspond to the beginning of the string in single-line mode or the beginning of a line in multiline mode, the sticky regular expression will never match. As with other regular expression flags, you can detect the presence of y by using a property. In this case, you\u0026rsquo;d check the sticky property, as follows:\nvar pattern = /hello\\d/y; console.log(pattern.sticky); // true The sticky property is set to true if the sticky flag is present, and the property is false if not. The sticky property is read-only based on the presence of the flag and cannot be changed in code.\nSimilar to the u flag, the y flag is a syntax change, so it will cause a syntax error in older JavaScript engines. You can use the following approach to detect support:\nfunction hasRegExpY() { try { var pattern = new RegExp(\u0026#34;.\u0026#34;, \u0026#34;y\u0026#34;); return true; } catch (ex) { return false; } }\rJust like the u check, this returns false if it\u0026rsquo;s unable to create a regular expression with the y flag. In one final similarity to u, if you need to use y in code that runs in older JavaScript engines, be sure to use the RegExp constructor when defining those regular expressions to avoid a syntax error.\nDuplicating Regular Expressions In ECMAScript 5, you can duplicate regular expressions by passing them into the RegExp constructor like this:\nvar re1 = /ab/i, re2 = new RegExp(re1);\rThe re2 variable is just a copy of the re1 variable. But if you provide the second argument to the RegExp constructor, which specifies the flags for the regular expression, your code won\u0026rsquo;t work, as in this example:\nvar re1 = /ab/i, // throws an error in ES5, okay in ES6 re2 = new RegExp(re1, \u0026#34;g\u0026#34;);\rIf you execute this code in an ECMAScript 5 environment, you\u0026rsquo;ll get an error stating that the second argument cannot be used when the first argument is a regular expression. ECMAScript 6 changed this behavior such that the second argument is allowed and overrides any flags present on the first argument. For example:\nvar re1 = /ab/i, // throws an error in ES5, okay in ES6 re2 = new RegExp(re1, \u0026#34;g\u0026#34;); console.log(re1.toString()); // \u0026#34;/ab/i\u0026#34; console.log(re2.toString()); // \u0026#34;/ab/g\u0026#34; console.log(re1.test(\u0026#34;ab\u0026#34;)); // true console.log(re2.test(\u0026#34;ab\u0026#34;)); // true console.log(re1.test(\u0026#34;AB\u0026#34;)); // true console.log(re2.test(\u0026#34;AB\u0026#34;)); // false In this code, re1 has the case-insensitive i flag while re2 has only the global g flag. The RegExp constructor duplicated the pattern from re1 and substituted the g flag for the i flag. Without the second argument, re2 would have the same flags as re1.\nThe flags Property Along with adding a new flag and changing how you can work with flags, ECMAScript 6 added a property associated with them. In ECMAScript 5, you could get the text of a regular expression by using the source property, but to get the flag string, you\u0026rsquo;d have to parse the output of the toString() method as shown below:\nfunction getFlags(re) { var text = re.toString(); return text.substring(text.lastIndexOf(\u0026#34;/\u0026#34;) + 1, text.length); } // toString() is \u0026#34;/ab/g\u0026#34; var re = /ab/g; console.log(getFlags(re)); // \u0026#34;g\u0026#34; This converts a regular expression into a string and then returns the characters found after the last /. Those characters are the flags.\nECMAScript 6 makes fetching flags easier by adding a flags property to go along with the source property. Both properties are prototype accessor properties with only a getter assigned, making them read-only. The flags property makes inspecting regular expressions easier for both debugging and inheritance purposes.\nA late addition to ECMAScript 6, the flags property returns the string representation of any flags applied to a regular expression. For example:\nvar re = /ab/g; console.log(re.source); // \u0026#34;ab\u0026#34; console.log(re.flags); // \u0026#34;g\u0026#34; This fetches all flags on re and prints them to the console with far fewer lines of code than the toString() technique can. Using source and flags together allows you to extract the pieces of the regular expression that you need without parsing the regular expression string directly.\nThe changes to strings and regular expressions that this chapter has covered so far are definitely powerful, but ECMAScript 6 improves your power over strings in a much bigger way. It brings a type of literal to the table that makes strings more flexible.\nTemplate Literals JavaScript\u0026rsquo;s strings have always had limited functionality compared to strings in other languages. For instance, until ECMAScript 6, strings lacked the methods covered so far in this chapter, and string concatenation is as simple as possible. To allow developers to solve more complex problems, ECMAScript 6\u0026rsquo;s template literals provide syntax for creating domain-specific languages (DSLs) for working with content in a safer way than the solutions available in ECMAScript 5 and earlier. (A DSL is a programming language designed for a specific, narrow purpose, as opposed to general-purpose languages like JavaScript.) The ECMAScript wiki offers the following description on the template literal strawman:\nThis scheme extends ECMAScript syntax with syntactic sugar to allow libraries to provide DSLs that easily produce, query, and manipulate content from other languages that are immune or resistant to injection attacks such as XSS, SQL Injection, etc.\nIn reality, though, template literals are ECMAScript 6\u0026rsquo;s answer to the following features that JavaScript lacked all the way through ECMAScript 5:\nMultiline strings A formal concept of multiline strings. Basic string formatting The ability to substitute parts of the string for values contained in variables. HTML escaping The ability to transform a string such that it is safe to insert into HTML. Rather than trying to add more functionality to JavaScript\u0026rsquo;s already-existing strings, template literals represent an entirely new approach to solving these problems.\nBasic Syntax At their simplest, template literals act like regular strings delimited by backticks (`) instead of double or single quotes. For example, consider the following:\nlet message = `Hello world!`; console.log(message); // \u0026#34;Hello world!\u0026#34; console.log(typeof message); // \u0026#34;string\u0026#34; console.log(message.length); // 12 This code demonstrates that the variable message contains a normal JavaScript string. The template literal syntax is used to create the string value, which is then assigned to the message variable.\nIf you want to use a backtick in your string, then just escape it with a backslash (\\), as in this version of the message variable:\nlet message = `\\`Hello\\` world!`; console.log(message); // \u0026#34;`Hello` world!\u0026#34; console.log(typeof message); // \u0026#34;string\u0026#34; console.log(message.length); // 14 There\u0026rsquo;s no need to escape either double or single quotes inside of template literals.\nMultiline Strings JavaScript developers have wanted a way to create multiline strings since the first version of the language. But when using double or single quotes, strings must be completely contained on a single line.\nPre-ECMAScript 6 Workarounds Thanks to a long-standing syntax bug, JavaScript does have a workaround. You can create multiline strings if there\u0026rsquo;s a backslash (\\) before a newline. Here\u0026rsquo;s an example:\nvar message = \u0026#34;Multiline \\ string\u0026#34;; console.log(message); // \u0026#34;Multiline string\u0026#34; The message string has no newlines present when printed to the console because the backslash is treated as a continuation rather than a newline. In order to show a newline in output, you\u0026rsquo;d need to manually include it:\nvar message = \u0026#34;Multiline \\n\\ string\u0026#34;; console.log(message); // \u0026#34;Multiline // string\u0026#34; This should print Multiline String on two separate lines in all major JavaScript engines, but the behavior is defined as a bug and many developers recommend avoiding it.\nOther pre-ECMAScript 6 attempts to create multiline strings usually relied on arrays or string concatenation, such as:\nvar message = [\u0026#34;Multiline \u0026#34;, \u0026#34;string\u0026#34;].join(\u0026#34;\\n\u0026#34;); var message = \u0026#34;Multiline \\n\u0026#34; + \u0026#34;string\u0026#34;;\rAll of the ways developers worked around JavaScript\u0026rsquo;s lack of multiline strings left something to be desired.\nMultiline Strings the Easy Way ECMAScript 6\u0026rsquo;s template literals make multiline strings easy because there\u0026rsquo;s no special syntax. Just include a newline where you want, and it shows up in the result. For example:\nlet message = `Multiline string`; console.log(message); // \u0026#34;Multiline // string\u0026#34; console.log(message.length); // 16 All whitespace inside the backticks is part of the string, so be careful with indentation. For example:\nlet message = `Multiline string`; console.log(message); // \u0026#34;Multiline // string\u0026#34; console.log(message.length); // 31 In this code, all whitespace before the second line of the template literal is considered part of the string itself. If making the text line up with proper indentation is important to you, then consider leaving nothing on the first line of a multiline template literal and then indenting after that, as follows:\nlet html = ` \u0026lt;div\u0026gt; \u0026lt;h1\u0026gt;Title\u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt;`.trim();\rThis code begins the template literal on the first line but doesn\u0026rsquo;t have any text until the second. The HTML tags are indented to look correct and then the trim() method is called to remove the initial empty line.\nA\u0026gt; If you prefer, you can also use \\n in a template literal to indicate where a newline should be inserted: A\u0026gt; {:lang=\u0026ldquo;js\u0026rdquo;} A\u0026gt; ~~~~~~~~ A\u0026gt; A\u0026gt; let message = Multiline\\nstring; A\u0026gt; A\u0026gt; console.log(message); // \u0026ldquo;Multiline A\u0026gt; // string\u0026rdquo; A\u0026gt; console.log(message.length); // 16 A\u0026gt; ~~~~~~~~\nMaking Substitutions At this point, template literals may look like fancier versions of normal JavaScript strings. The real difference between the two lies in template literal substitutions. Substitutions allow you to embed any valid JavaScript expression inside a template literal and output the result as part of the string.\nSubstitutions are delimited by an opening ${ and a closing } that can have any JavaScript expression inside. The simplest substitutions let you embed local variables directly into a resulting string, like this:\nlet name = \u0026#34;Nicholas\u0026#34;, message = `Hello, ${name}.`; console.log(message); // \u0026#34;Hello, Nicholas.\u0026#34; The substitution ${name} accesses the local variable name to insert name into the message string. The message variable then holds the result of the substitution immediately.\nI\u0026gt; A template literal can access any variable accessible in the scope in which it is defined. Attempting to use an undeclared variable in a template literal throws an error in both strict and non-strict modes.\nSince all substitutions are JavaScript expressions, you can substitute more than just simple variable names. You can easily embed calculations, function calls, and more. For example:\nlet count = 10, price = 0.25, message = `${count} items cost $${(count * price).toFixed(2)}.`; console.log(message); // \u0026#34;10 items cost $2.50.\u0026#34; This code performs a calculation as part of the template literal. The variables count and price are multiplied together to get a result, and then formatted to two decimal places using .toFixed(). The dollar sign before the second substitution is output as-is because it\u0026rsquo;s not followed by an opening curly brace.\nTemplate literals are also JavaScript expressions, which means you can place a template literal inside of another template literal, as in this example:\nlet name = \u0026#34;Nicholas\u0026#34;, message = `Hello, ${`my name is ${name}`}.`; console.log(message); // \u0026#34;Hello, my name is Nicholas.\u0026#34; This example nests a second template literal inside the first. After the first ${, another template literal begins. The second ${ indicates the beginning of an embedded expression inside the inner template literal. That expression is the variable name, which is inserted into the result.\nTagged Templates Now you\u0026rsquo;ve seen how template literals can create multiline strings and insert values into strings without concatenation. But the real power of template literals comes from tagged templates. A template tag performs a transformation on the template literal and returns the final string value. This tag is specified at the start of the template, just before the first ` character, as shown here:\nlet message = tag`Hello world`;\rIn this example, tag is the template tag to apply to the `Hello world` template literal.\nDefining Tags A tag is simply a function that is called with the processed template literal data. The tag receives data about the template literal as individual pieces and must combine the pieces to create the result. The first argument is an array containing the literal strings as interpreted by JavaScript. Each subsequent argument is the interpreted value of each substitution.\nTag functions are typically defined using rest arguments as follows, to make dealing with the data easier:\nfunction tag(literals, ...substitutions) { // return a string }\rTo better understand what gets passed to tags, consider the following:\nlet count = 10, price = 0.25, message = passthru`${count} items cost $${(count * price).toFixed(2)}.`;\rIf you had a function called passthru(), that function would receive three arguments. First, it would get a literals array, containing the following elements:\nThe empty string before the first substitution (\u0026quot;\u0026quot;) The string after the first substitution and before the second (\u0026quot; items cost $\u0026quot;) The string after the second substitution (\u0026quot;.\u0026quot;) The next argument would be 10, which is the interpreted value for the count variable. This becomes the first element in a substitutions array. The final argument would be \u0026quot;2.50\u0026quot;, which is the interpreted value for (count * price).toFixed(2) and the second element in the substitutions array.\nNote that the first item in literals is an empty string. This ensures that literals[0] is always the start of the string, just like literals[literals.length - 1] is always the end of the string. There is always one fewer substitution than literal, which means the expression substitutions.length === literals.length - 1 is always true.\nUsing this pattern, the literals and substitutions arrays can be interwoven to create a resulting string. The first item in literals comes first, the first item in substitutions is next, and so on, until the string is complete. As an example, you can mimic the default behavior of a template literal by alternating values from these two arrays:\nfunction passthru(literals, ...substitutions) { let result = \u0026#34;\u0026#34;; // run the loop only for the substitution count for (let i = 0; i \u0026lt; substitutions.length; i++) { result += literals[i]; result += substitutions[i]; } // add the last literal result += literals[literals.length - 1]; return result; } let count = 10, price = 0.25, message = passthru`${count} items cost $${(count * price).toFixed(2)}.`; console.log(message); // \u0026#34;10 items cost $2.50.\u0026#34; This example defines a passthru tag that performs the same transformation as the default template literal behavior. The only trick is to use substitutions.length for the loop rather than literals.length to avoid accidentally going past the end of the substitutions array. This works because the relationship between literals and substitutions is well-defined in ECMAScript 6.\nI\u0026gt; The values contained in substitutions are not necessarily strings. If an expression evaluates to a number, as in the previous example, then the numeric value is passed in. Determining how such values should output in the result is part of the tag\u0026rsquo;s job.\nUsing Raw Values in Template Literals Template tags also have access to raw string information, which primarily means access to character escapes before they are transformed into their character equivalents. The simplest way to work with raw string values is to use the built-in String.raw() tag. For example:\nlet message1 = `Multiline\\nstring`, message2 = String.raw`Multiline\\nstring`; console.log(message1); // \u0026#34;Multiline // string\u0026#34; console.log(message2); // \u0026#34;Multiline\\nstring\u0026#34; In this code, the \\n in message1 is interpreted as a newline while the \\n in message2 is returned in its raw form of \u0026quot;\\\\n\u0026quot; (the slash and n characters). Retrieving the raw string information like this allows for more complex processing when necessary.\nThe raw string information is also passed into template tags. The first argument in a tag function is an array with an extra property called raw. The raw property is an array containing the raw equivalent of each literal value. For example, the value in literals[0] always has an equivalent literals.raw[0] that contains the raw string information. Knowing that, you can mimic String.raw() using the following code:\nfunction raw(literals, ...substitutions) { let result = \u0026#34;\u0026#34;; // run the loop only for the substitution count for (let i = 0; i \u0026lt; substitutions.length; i++) { result += literals.raw[i]; // use raw values instead result += substitutions[i]; } // add the last literal result += literals.raw[literals.length - 1]; return result; } let message = raw`Multiline\\nstring`; console.log(message); // \u0026#34;Multiline\\nstring\u0026#34; console.log(message.length); // 17 This uses literals.raw instead of literals to output the string result. That means any character escapes, including Unicode code point escapes, should be returned in their raw form. Raw strings are helpful when you want to output a string containing code in which you\u0026rsquo;ll need to include the character escaping (for instance, if you want to generate documentation about some code, you may want to output the actual code as it appears).\nSummary Full Unicode support allows JavaScript to deal with UTF-16 characters in logical ways. The ability to transfer between code point and character via codePointAt() and String.fromCodePoint() is an important step for string manipulation. The addition of the regular expression u flag makes it possible to operate on code points instead of 16-bit characters, and the normalize() method allows for more appropriate string comparisons.\nECMAScript 6 also added new methods for working with strings, allowing you to more easily identify a substring regardless of its position in the parent string. More functionality was added to regular expressions, too.\nTemplate literals are an important addition to ECMAScript 6 that allows you to create domain-specific languages (DSLs) to make creating strings easier. The ability to embed variables directly into template literals means that developers have a safer tool than string concatenation for composing long strings with variables.\nBuilt-in support for multiline strings also makes template literals a useful upgrade over normal JavaScript strings, which have never had this ability. Despite allowing newlines directly inside the template literal, you can still use \\n and other character escape sequences.\nTemplate tags are the most important part of this feature for creating DSLs. Tags are functions that receive the pieces of the template literal as arguments. You can then use that data to return an appropriate string value. The data provided includes literals, their raw equivalents, and any substitution values. These pieces of information can then be used to determine the correct output for the tag.\n","date":"0001-01-01","id":29,"permalink":"/es6/02-strings-and-regular-expressions/","summary":"\u003cp\u003eStrings are arguably one of the most important data types in programming. They\u0026rsquo;re in nearly every higher-level programming language, and being able to work with them effectively is fundamental for developers to create useful programs. By extension, regular expressions are important because of the extra power they give developers to wield on strings. With these facts in mind, the creators of ECMAScript 6 improved strings and regular expressions by adding new capabilities and long-missing functionality. This chapter gives a tour of both types of changes.\u003c/p\u003e","tags":[],"title":"02 Strings and Regular Expressions"},{"content":"Functions are an important part of any programming language, and prior to ECMAScript 6, JavaScript functions hadn\u0026rsquo;t changed much since the language was created. This left a backlog of problems and nuanced behavior that made making mistakes easy and often required more code just to achieve very basic behaviors.\nECMAScript 6 functions make a big leap forward, taking into account years of complaints and requests from JavaScript developers. The result is a number of incremental improvements on top of ECMAScript 5 functions that make programming in JavaScript less error-prone and more powerful.\nFunctions with Default Parameter Values Functions in JavaScript are unique in that they allow any number of parameters to be passed, regardless of the number of parameters declared in the function definition. This allows you to define functions that can handle different numbers of parameters, often by just filling in default values when parameters aren\u0026rsquo;t provided. This section covers how default parameters work both in and prior to ECMAScript 6, along with some important information on the arguments object, using expressions as parameters, and another TDZ.\nSimulating Default Parameter Values in ECMAScript 5 In ECMAScript 5 and earlier, you would likely use the following pattern to create a function with default parameters values:\nfunction makeRequest(url, timeout, callback) { timeout = timeout || 2000; callback = callback || function () {}; // the rest of the function }\rIn this example, both timeout and callback are actually optional because they are given a default value if a parameter isn\u0026rsquo;t provided. The logical OR operator (||) always returns the second operand when the first is falsy. Since named function parameters that are not explicitly provided are set to undefined, the logical OR operator is frequently used to provide default values for missing parameters. There is a flaw with this approach, however, in that a valid value for timeout might actually be 0, but this would replace it with 2000 because 0 is falsy.\nIn that case, a safer alternative is to check the type of the argument using typeof, as in this example:\nfunction makeRequest(url, timeout, callback) { timeout = typeof timeout !== \u0026#34;undefined\u0026#34; ? timeout : 2000; callback = typeof callback !== \u0026#34;undefined\u0026#34; ? callback : function () {}; // the rest of the function }\rWhile this approach is safer, it still requires a lot of extra code for a very basic operation. Popular JavaScript libraries are filled with similar patterns, as this represents a common pattern.\nDefault Parameter Values in ECMAScript 6 ECMAScript 6 makes it easier to provide default values for parameters by providing initializations that are used when the parameter isn\u0026rsquo;t formally passed. For example:\nfunction makeRequest(url, timeout = 2000, callback = function () {}) { // the rest of the function }\rThis function only expects the first parameter to always be passed. The other two parameters have default values, which makes the body of the function much smaller because you don\u0026rsquo;t need to add any code to check for a missing value.\nWhen makeRequest() is called with all three parameters, the defaults are not used. For example:\n// uses default timeout and callback makeRequest(\u0026#34;/foo\u0026#34;); // uses default callback makeRequest(\u0026#34;/foo\u0026#34;, 500); // doesn\u0026#39;t use defaults makeRequest(\u0026#34;/foo\u0026#34;, 500, function (body) { doSomething(body); });\rECMAScript 6 considers url to be required, which is why \u0026quot;/foo\u0026quot; is passed in all three calls to makeRequest(). The two parameters with a default value are considered optional.\nIt\u0026rsquo;s possible to specify default values for any arguments, including those that appear before arguments without default values in the function declaration. For example, this is fine:\nfunction makeRequest(url, timeout = 2000, callback) { // the rest of the function }\rIn this case, the default value for timeout will only be used if there is no second argument passed in or if the second argument is explicitly passed in as undefined, as in this example:\n// uses default timeout makeRequest(\u0026#34;/foo\u0026#34;, undefined, function (body) { doSomething(body); }); // uses default timeout makeRequest(\u0026#34;/foo\u0026#34;); // doesn\u0026#39;t use default timeout makeRequest(\u0026#34;/foo\u0026#34;, null, function (body) { doSomething(body); });\rIn the case of default parameter values, a value of null is considered to be valid, meaning that in the third call to makeRequest(), the default value for timeout will not be used.\nHow Default Parameter Values Affect the arguments Object Just keep in mind that the behavior of the arguments object is different when default parameter values are present. In ECMAScript 5 nonstrict mode, the arguments object reflects changes in the named parameters of a function. Here\u0026rsquo;s some code that illustrates how this works:\nfunction mixArgs(first, second) { console.log(first === arguments[0]); console.log(second === arguments[1]); first = \u0026#34;c\u0026#34;; second = \u0026#34;d\u0026#34;; console.log(first === arguments[0]); console.log(second === arguments[1]); } mixArgs(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;);\rThis outputs:\ntrue true true true\rThe arguments object is always updated in nonstrict mode to reflect changes in the named parameters. Thus, when first and second are assigned new values, arguments[0] and arguments[1] are updated accordingly, making all of the === comparisons resolve to true.\nECMAScript 5\u0026rsquo;s strict mode, however, eliminates this confusing aspect of the arguments object. In strict mode, the arguments object does not reflect changes to the named parameters. Here\u0026rsquo;s the mixArgs() function again, but in strict mode:\nfunction mixArgs(first, second) { \u0026#34;use strict\u0026#34;; console.log(first === arguments[0]); console.log(second === arguments[1]); first = \u0026#34;c\u0026#34;; second = \u0026#34;d\u0026#34;; console.log(first === arguments[0]); console.log(second === arguments[1]); } mixArgs(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;);\rThe call to mixArgs() outputs:\ntrue true false false\rThis time, changing first and second doesn\u0026rsquo;t affect arguments, so the output behaves as you\u0026rsquo;d normally expect it to.\nThe arguments object in a function using ECMAScript 6 default parameter values, however, will always behave in the same manner as ECMAScript 5 strict mode, regardless of whether the function is explicitly running in strict mode. The presence of default parameter values triggers the arguments object to remain detached from the named parameters. This is a subtle but important detail because of how the arguments object may be used. Consider the following:\n// not in strict mode function mixArgs(first, second = \u0026#34;b\u0026#34;) { console.log(arguments.length); console.log(first === arguments[0]); console.log(second === arguments[1]); first = \u0026#34;c\u0026#34;; second = \u0026#34;d\u0026#34;; console.log(first === arguments[0]); console.log(second === arguments[1]); } mixArgs(\u0026#34;a\u0026#34;);\rThis outputs:\n1 true false false false\rIn this example, arguments.length is 1 because only one argument was passed to mixArgs(). That also means arguments[1] is undefined, which is the expected behavior when only one argument is passed to a function. That means first is equal to arguments[0] as well. Changing first and second has no effect on arguments. This behavior occurs in both nonstrict and strict mode, so you can rely on arguments to always reflect the initial call state.\nDefault Parameter Expressions Perhaps the most interesting feature of default parameter values is that the default value need not be a primitive value. You can, for example, execute a function to retrieve the default parameter value, like this:\nfunction getValue() { return 5; } function add(first, second = getValue()) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(1)); // 6 Here, if the last argument isn\u0026rsquo;t provided, the function getValue() is called to retrieve the correct default value. Keep in mind that getValue() is only called when add() is called without a second parameter, not when the function declaration is first parsed. That means if getValue() were written differently, it could potentially return a different value. For instance:\nlet value = 5; function getValue() { return value++; } function add(first, second = getValue()) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(1)); // 6 console.log(add(1)); // 7 In this example, value begins as five and increments each time getValue() is called. The first call to add(1) returns 6, while the second call to add(1) returns 7 because value was incremented. Because the default value for second is only evaluated when the function is called, changes to that value can be made at any time.\nW\u0026gt; Be careful when using function calls as default parameter values. If you forget the parentheses, such as second = getValue in the last example, you are passing a reference to the function rather than the result of the function call.\nThis behavior introduces another interesting capability. You can use a previous parameter as the default for a later parameter. Here\u0026rsquo;s an example:\nfunction add(first, second = first) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(1)); // 2 In this code, the parameter second is given a default value of first, meaning that passing in just one argument leaves both arguments with the same value. So add(1, 1) returns 2 just as add(1) returns 2. Taking this a step further, you can pass first into a function to get the value for second as follows:\nfunction getValue(value) { return value + 5; } function add(first, second = getValue(first)) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(1)); // 7 This example sets second equal to the value returned by getValue(first), so while add(1, 1) still returns 2, add(1) returns 7 (1 + 6).\nThe ability to reference parameters from default parameter assignments works only for previous arguments, so earlier arguments do not have access to later arguments. For example:\nfunction add(first = second, second) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(undefined, 1)); // throws error The call to add(undefined, 1) throws an error because second is defined after first and is therefore unavailable as a default value. To understand why that happens, it\u0026rsquo;s important to revisit temporal dead zones.\nDefault Parameter Value Temporal Dead Zone Chapter 1 introduced the temporal dead zone (TDZ) as it relates to let and const, and default parameter values also have a TDZ where parameters cannot be accessed. Similar to a let declaration, each parameter creates a new identifier binding that can\u0026rsquo;t be referenced before initialization without throwing an error. Parameter initialization happens when the function is called, either by passing a value for the parameter or by using the default parameter value.\nTo explore the default parameter value TDZ, consider this example from \u0026ldquo;Default Parameter Expressions\u0026rdquo; again:\nfunction getValue(value) { return value + 5; } function add(first, second = getValue(first)) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(1)); // 7 The calls to add(1, 1) and add(1) effectively execute the following code to create the first and second parameter values:\n// JavaScript representation of call to add(1, 1) let first = 1; let second = 1; // JavaScript representation of call to add(1) let first = 1; let second = getValue(first);\rWhen the function add() is first executed, the bindings first and second are added to a parameter-specific TDZ (similar to how let behaves). So while second can be initialized with the value of first because first is always initialized at that time, the reverse is not true. Now, consider this rewritten add() function:\nfunction add(first = second, second) { return first + second; } console.log(add(1, 1)); // 2 console.log(add(undefined, 1)); // throws error The calls to add(1, 1) and add(undefined, 1) in this example now map to this code behind the scenes:\n// JavaScript representation of call to add(1, 1) let first = 1; let second = 1; // JavaScript representation of call to add(undefined, 1) let first = second; let second = 1;\rIn this example, the call to add(undefined, 1) throws an error because second hasn\u0026rsquo;t yet been initialized when first is initialized. At that point, second is in the TDZ and therefore any references to second throw an error. This mirrors the behavior of let bindings discussed in Chapter 1.\nI\u0026gt; Function parameters have their own scope and their own TDZ that is separate from the function body scope. That means the default value of a parameter cannot access any variables declared inside the function body.\nWorking with Unnamed Parameters So far, the examples in this chapter have only covered parameters that have been named in the function definition. However, JavaScript functions don\u0026rsquo;t limit the number of parameters that can be passed to the number of named parameters defined. You can always pass fewer or more parameters than formally specified. Default parameter values make it clear when a function can accept fewer parameters, and ECMAScript 6 sought to make the problem of passing more parameters than defined better as well.\nUnnamed Parameters in ECMAScript 5 Early on, JavaScript provided the arguments object as a way to inspect all function parameters that are passed without necessarily defining each parameter individually. While inspecting arguments works fine in most cases, this object can be a little cumbersome to work with. For example, examine this code, which inspects the arguments object:\nfunction pick(object) { let result = Object.create(null); // start at the second parameter for (let i = 1, len = arguments.length; i \u0026lt; len; i++) { result[arguments[i]] = object[arguments[i]]; } return result; } let book = { title: \u0026#34;Understanding ECMAScript 6\u0026#34;, author: \u0026#34;Nicholas C. Zakas\u0026#34;, year: 2015 }; let bookData = pick(book, \u0026#34;author\u0026#34;, \u0026#34;year\u0026#34;); console.log(bookData.author); // \u0026#34;Nicholas C. Zakas\u0026#34; console.log(bookData.year); // 2015 This function mimics the pick() method from the Underscore.js library, which returns a copy of a given object with some specified subset of the original object\u0026rsquo;s properties. This example defines only one argument and expects the first argument to be the object from which to copy properties. Every other argument passed is the name of a property that should be copied on the result.\nThere are a couple of things to notice about this pick() function. First, it\u0026rsquo;s not at all obvious that the function can handle more than one parameter. You could define several more parameters, but you would always fall short of indicating that this function can take any number of parameters. Second, because the first parameter is named and used directly, when you look for the properties to copy, you have to start in the arguments object at index 1 instead of index 0. Remembering to use the appropriate indices with arguments isn\u0026rsquo;t necessarily difficult, but it\u0026rsquo;s one more thing to keep track of.\nECMAScript 6 introduces rest parameters to help with these issues.\nRest Parameters A rest parameter is indicated by three dots (...) preceding a named parameter. That named parameter becomes an Array containing the rest of the parameters passed to the function, which is where the name \u0026ldquo;rest\u0026rdquo; parameters originates. For example, pick() can be rewritten using rest parameters, like this:\nfunction pick(object, ...keys) { let result = Object.create(null); for (let i = 0, len = keys.length; i \u0026lt; len; i++) { result[keys[i]] = object[keys[i]]; } return result; }\rIn this version of the function, keys is a rest parameter that contains all parameters passed after object (unlike arguments, which contains all parameters including the first one). That means you can iterate over keys from beginning to end without worry. As a bonus, you can tell by looking at the function that it is capable of handling any number of parameters.\nI\u0026gt; Rest parameters do not affect a function\u0026rsquo;s length property, which indicates the number of named parameters for the function. The value of length for pick() in this example is 1 because only object counts towards this value.\nRest Parameter Restrictions There are two restrictions on rest parameters. The first restriction is that there can be only one rest parameter, and the rest parameter must be last. For example, this code won\u0026rsquo;t work:\n// Syntax error: Can\u0026#39;t have a named parameter after rest parameters function pick(object, ...keys, last) { let result = Object.create(null); for (let i = 0, len = keys.length; i \u0026lt; len; i++) { result[keys[i]] = object[keys[i]]; } return result; }\rHere, the parameter last follows the rest parameter keys, which would cause a syntax error.\nThe second restriction is that rest parameters cannot be used in an object literal setter. That means this code would also cause a syntax error:\nlet object = { // Syntax error: Can\u0026#39;t use rest param in setter set name(...value) { // do something } };\rThis restriction exists because object literal setters are restricted to a single argument. Rest parameters are, by definition, an infinite number of arguments, so they\u0026rsquo;re not allowed in this context.\nHow Rest Parameters Affect the arguments Object Rest parameters were designed to replace arguments in ECMAScript. Originally, ECMAScript 4 did away with arguments and added rest parameters to allow an unlimited number of arguments to be passed to functions. ECMAScript 4 never came into being, but this idea was kept around and reintroduced in ECMAScript 6, despite arguments not being removed from the language.\nThe arguments object works together with rest parameters by reflecting the arguments that were passed to the function when called, as illustrated in this program:\nfunction checkArgs(...args) { console.log(args.length); console.log(arguments.length); console.log(args[0], arguments[0]); console.log(args[1], arguments[1]); } checkArgs(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;);\rThe call to checkArgs() outputs:\n2 2 a a b b\rThe arguments object always correctly reflects the parameters that were passed into a function regardless of rest parameter usage.\nThat\u0026rsquo;s all you really need to know about rest parameters to get started using them.\nIncreased Capabilities of the Function Constructor The Function constructor is an infrequently used part of JavaScript that allows you to dynamically create a new function. The arguments to the constructor are the parameters for the function and the function body, all as strings. Here\u0026rsquo;s an example:\nvar add = new Function(\u0026#34;first\u0026#34;, \u0026#34;second\u0026#34;, \u0026#34;return first + second\u0026#34;); console.log(add(1, 1)); // 2 ECMAScript 6 augments the capabilities of the Function constructor to allow default parameters and rest parameters. You need only add an equals sign and a value to the parameter names, as follows:\nvar add = new Function(\u0026#34;first\u0026#34;, \u0026#34;second = first\u0026#34;, \u0026#34;return first + second\u0026#34;); console.log(add(1, 1)); // 2 console.log(add(1)); // 2 In this example, the parameter second is assigned the value of first when only one parameter is passed. The syntax is the same as for function declarations that don\u0026rsquo;t use Function.\nFor rest parameters, just add the ... before the last parameter, like this:\nvar pickFirst = new Function(\u0026#34;...args\u0026#34;, \u0026#34;return args[0]\u0026#34;); console.log(pickFirst(1, 2)); // 1 This code creates a function that uses only a single rest parameter and returns the first argument that was passed in.\nThe addition of default and rest parameters ensures that Function has all of the same capabilities as the declarative form of creating functions.\nThe Spread Operator Closely related to rest parameters is the spread operator. While rest parameters allow you to specify that multiple independent arguments should be combined into an array, the spread operator allows you to specify an array that should be split and have its items passed in as separate arguments to a function. Consider the Math.max() method, which accepts any number of arguments and returns the one with the highest value. Here\u0026rsquo;s a simple use case for this method:\nlet value1 = 25, value2 = 50; console.log(Math.max(value1, value2)); // 50 When you\u0026rsquo;re dealing with just two values, as in this example, Math.max() is very easy to use. The two values are passed in, and the higher value is returned. But what if you\u0026rsquo;ve been tracking values in an array, and now you want to find the highest value? The Math.max() method doesn\u0026rsquo;t allow you to pass in an array, so in ECMAScript 5 and earlier, you\u0026rsquo;d be stuck either searching the array yourself or using apply() as follows:\nlet values = [25, 50, 75, 100]; console.log(Math.max.apply(Math, values)); // 100 This solution works, but using apply() in this manner is a bit confusing. It actually seems to obfuscate the true meaning of the code with additional syntax.\nThe ECMAScript 6 spread operator makes this case very simple. Instead of calling apply(), you can pass the array to Math.max() directly and prefix it with the same ... pattern used with rest parameters. The JavaScript engine then splits the array into individual arguments and passes them in, like this:\nlet values = [25, 50, 75, 100]; // equivalent to // console.log(Math.max(25, 50, 75, 100)); console.log(Math.max(...values)); // 100 Now the call to Math.max() looks a bit more conventional and avoids the complexity of specifying a this-binding (the first argument to Math.max.apply() in the previous example) for a simple mathematical operation.\nYou can mix and match the spread operator with other arguments as well. Suppose you want the smallest number returned from Math.max() to be 0 (just in case negative numbers sneak into the array). You can pass that argument separately and still use the spread operator for the other arguments, as follows:\nlet values = [-25, -50, -75, -100]; console.log(Math.max(...values, 0)); // 0 In this example, the last argument passed to Math.max() is 0, which comes after the other arguments are passed in using the spread operator.\nThe spread operator for argument passing makes using arrays for function arguments much easier. You\u0026rsquo;ll likely find it to be a suitable replacement for the apply() method in most circumstances.\nIn addition to the uses you\u0026rsquo;ve seen for default and rest parameters so far, in ECMAScript 6, you can also apply both parameter types to JavaScript\u0026rsquo;s Function constructor.\nECMAScript 6\u0026rsquo;s name Property Identifying functions can be challenging in JavaScript given the various ways a function can be defined. Additionally, the prevalence of anonymous function expressions makes debugging a bit more difficult, often resulting in stack traces that are hard to read and decipher. For these reasons, ECMAScript 6 adds the name property to all functions.\nChoosing Appropriate Names All functions in an ECMAScript 6 program will have an appropriate value for their name property. To see this in action, look at the following example, which shows a function and function expression, and prints the name properties for both:\nfunction doSomething() { // ... } var doAnotherThing = function () { // ... }; console.log(doSomething.name); // \u0026#34;doSomething\u0026#34; console.log(doAnotherThing.name); // \u0026#34;doAnotherThing\u0026#34; In this code, doSomething() has a name property equal to \u0026quot;doSomething\u0026quot; because it\u0026rsquo;s a function declaration. The anonymous function expression doAnotherThing() has a name of \u0026quot;doAnotherThing\u0026quot; because that\u0026rsquo;s the name of the variable to which it is assigned.\nSpecial Cases of the name Property While appropriate names for function declarations and function expressions are easy to find, ECMAScript 6 goes further to ensure that all functions have appropriate names. To illustrate this, consider the following program:\nvar doSomething = function doSomethingElse() { // ... }; var person = { get firstName() { return \u0026#34;Nicholas\u0026#34;; }, sayName: function () { console.log(this.name); } }; console.log(doSomething.name); // \u0026#34;doSomethingElse\u0026#34; console.log(person.sayName.name); // \u0026#34;sayName\u0026#34; var descriptor = Object.getOwnPropertyDescriptor(person, \u0026#34;firstName\u0026#34;); console.log(descriptor.get.name); // \u0026#34;get firstName\u0026#34; In this example, doSomething.name is \u0026quot;doSomethingElse\u0026quot; because the function expression itself has a name, and that name takes priority over the variable to which the function was assigned. The name property of person.sayName() is \u0026quot;sayName\u0026quot;, as the value was interpreted from the object literal. Similarly, person.firstName is actually a getter function, so its name is \u0026quot;get firstName\u0026quot; to indicate this difference. Setter functions are prefixed with \u0026quot;set\u0026quot; as well. (Both getter and setter functions must be retrieved using Object.getOwnPropertyDescriptor().)\nThere are a couple of other special cases for function names, too. Functions created using bind() will have their names prefixed with \u0026quot;bound\u0026quot; and functions created using the Function constructor have a name of \u0026quot;anonymous\u0026quot;, as in this example:\nvar doSomething = function () { // ... }; console.log(doSomething.bind().name); // \u0026#34;bound doSomething\u0026#34; console.log(new Function().name); // \u0026#34;anonymous\u0026#34; The name of a bound function will always be the name of the function being bound prefixed with the string \u0026quot;bound \u0026quot;, so the bound version of doSomething() is \u0026quot;bound doSomething\u0026quot;.\nKeep in mind that the value of name for any function does not necessarily refer to a variable of the same name. The name property is meant to be informative, to help with debugging, so there\u0026rsquo;s no way to use the value of name to get a reference to the function.\nClarifying the Dual Purpose of Functions In ECMAScript 5 and earlier, functions serve the dual purpose of being callable with or without new. When used with new, the this value inside a function is a new object and that new object is returned, as illustrated in this example:\nfunction Person(name) { this.name = name; } var person = new Person(\u0026#34;Nicholas\u0026#34;); var notAPerson = Person(\u0026#34;Nicholas\u0026#34;); console.log(person); // \u0026#34;[Object object]\u0026#34; console.log(notAPerson); // \u0026#34;undefined\u0026#34; When creating notAPerson, calling Person() without new results in undefined (and sets a name property on the global object in nonstrict mode). The capitalization of Person is the only real indicator that the function is meant to be called using new, as is common in JavaScript programs. This confusion over the dual roles of functions led to some changes in ECMAScript 6.\nJavaScript has two different internal-only methods for functions: [[Call]] and [[Construct]]. When a function is called without new, the [[Call]] method is executed, which executes the body of the function as it appears in the code. When a function is called with new, that\u0026rsquo;s when the [[Construct]] method is called. The [[Construct]] method is responsible for creating a new object, called the new target, and then executing the function body with this set to the new target. Functions that have a [[Construct]] method are called constructors.\nI\u0026gt; Keep in mind that not all functions have [[Construct]], and therefore not all functions can be called with new. Arrow functions, discussed in the \u0026ldquo;Arrow Functions\u0026rdquo; section, do not have a [[Construct]] method.\nDetermining How a Function was Called in ECMAScript 5 The most popular way to determine if a function was called with new (and hence, with constructor) in ECMAScript 5 is to use instanceof, for example:\nfunction Person(name) { if (this instanceof Person) { this.name = name; // using new } else { throw new Error(\u0026#34;You must use new with Person.\u0026#34;); } } var person = new Person(\u0026#34;Nicholas\u0026#34;); var notAPerson = Person(\u0026#34;Nicholas\u0026#34;); // throws error Here, the this value is checked to see if it\u0026rsquo;s an instance of the constructor, and if so, execution continues as normal. If this isn\u0026rsquo;t an instance of Person, then an error is thrown. This works because the [[Construct]] method creates a new instance of Person and assigns it to this. Unfortunately, this approach is not completely reliable because this can be an instance of Person without using new, as in this example:\nfunction Person(name) { if (this instanceof Person) { this.name = name; // using new } else { throw new Error(\u0026#34;You must use new with Person.\u0026#34;); } } var person = new Person(\u0026#34;Nicholas\u0026#34;); var notAPerson = Person.call(person, \u0026#34;Michael\u0026#34;); // works! The call to Person.call() passes the person variable as the first argument, which means this is set to person inside of the Person function. To the function, there\u0026rsquo;s no way to distinguish this from being called with new.\nThe new.target MetaProperty To solve this problem, ECMAScript 6 introduces the new.target metaproperty. A metaproperty is a property of a non-object that provides additional information related to its target (such as new). When a function\u0026rsquo;s [[Construct]] method is called, new.target is filled with the target of the new operator. That target is typically the constructor of the newly created object instance that will become this inside the function body. If [[Call]] is executed, then new.target is undefined.\nThis new metaproperty allows you to safely detect if a function is called with new by checking whether new.target is defined as follows:\nfunction Person(name) { if (typeof new.target !== \u0026#34;undefined\u0026#34;) { this.name = name; // using new } else { throw new Error(\u0026#34;You must use new with Person.\u0026#34;); } } var person = new Person(\u0026#34;Nicholas\u0026#34;); var notAPerson = Person.call(person, \u0026#34;Michael\u0026#34;); // error! By using new.target instead of this instanceof Person, the Person constructor is now correctly throwing an error when used without new.\nYou can also check that new.target was called with a specific constructor. For instance, look at this example:\nfunction Person(name) { if (new.target === Person) { this.name = name; // using new } else { throw new Error(\u0026#34;You must use new with Person.\u0026#34;); } } function AnotherPerson(name) { Person.call(this, name); } var person = new Person(\u0026#34;Nicholas\u0026#34;); var anotherPerson = new AnotherPerson(\u0026#34;Nicholas\u0026#34;); // error! In this code, new.target must be Person in order to work correctly. When new AnotherPerson(\u0026quot;Nicholas\u0026quot;) is called, the subsequent call to Person.call(this, name) will throw an error because new.target is undefined inside of the Person constructor (it was called without new).\nW\u0026gt; Warning: Using new.target outside of a function is a syntax error.\nBy adding new.target, ECMAScript 6 helped to clarify some ambiguity around functions calls. Following on this theme, ECMAScript 6 also addresses another previously ambiguous part of the language: declaring functions inside of blocks.\nBlock-Level Functions In ECMAScript 3 and earlier, a function declaration occurring inside of a block (a block-level function) was technically a syntax error, but all browsers still supported it. Unfortunately, each browser that allowed the syntax behaved in a slightly different way, so it is considered a best practice to avoid function declarations inside of blocks (the best alternative is to use a function expression).\nIn an attempt to rein in this incompatible behavior, ECMAScript 5 strict mode introduced an error whenever a function declaration was used inside of a block in this way:\n\u0026#34;use strict\u0026#34;; if (true) { // Throws a syntax error in ES5, not so in ES6 function doSomething() { // ... } }\rIn ECMAScript 5, this code throws a syntax error. In ECMAScript 6, the doSomething() function is considered a block-level declaration and can be accessed and called within the same block in which it was defined. For example:\n\u0026#34;use strict\u0026#34;; if (true) { console.log(typeof doSomething); // \u0026#34;function\u0026#34; function doSomething() { // ... } doSomething(); } console.log(typeof doSomething); // \u0026#34;undefined\u0026#34; Block level functions are hoisted to the top of the block in which they are defined, so typeof doSomething returns \u0026quot;function\u0026quot; even though it appears before the function declaration in the code. Once the if block is finished executing, doSomething() no longer exists.\nDeciding When to Use Block-Level Functions Block level functions are similar to let function expressions in that the function definition is removed once execution flows out of the block in which it\u0026rsquo;s defined. The key difference is that block level functions are hoisted to the top of the containing block. Function expressions that use let are not hoisted, as this example illustrates:\n\u0026#34;use strict\u0026#34;; if (true) { console.log(typeof doSomething); // throws error let doSomething = function () { // ... }; doSomething(); } console.log(typeof doSomething);\rHere, code execution stops when typeof doSomething is executed, because the let statement hasn\u0026rsquo;t been executed yet, leaving doSomething() in the TDZ. Knowing this difference, you can choose whether to use block level functions or let expressions based on whether or not you want the hoisting behavior.\nBlock-Level Functions in Nonstrict Mode ECMAScript 6 also allows block-level functions in nonstrict mode, but the behavior is slightly different. Instead of hoisting these declarations to the top of the block, they are hoisted all the way to the containing function or global environment. For example:\n// ECMAScript 6 behavior if (true) { console.log(typeof doSomething); // \u0026#34;function\u0026#34; function doSomething() { // ... } doSomething(); } console.log(typeof doSomething); // \u0026#34;function\u0026#34; In this example, doSomething() is hoisted into the global scope so that it still exists outside of the if block. ECMAScript 6 standardized this behavior to remove the incompatible browser behaviors that previously existed, so all ECMAScript 6 runtimes should behave in the same way.\nAllowing block-level functions improves your ability to declare functions in JavaScript, but ECMAScript 6 also introduced a completely new way to declare functions.\nArrow Functions One of the most interesting new parts of ECMAScript 6 is the arrow function. Arrow functions are, as the name suggests, functions defined with a new syntax that uses an \u0026ldquo;arrow\u0026rdquo; (=\u0026gt;). But arrow functions behave differently than traditional JavaScript functions in a number of important ways:\nNo this, super, arguments, and new.target bindings - The value of this, super, arguments, and new.target inside of the function is by the closest containing nonarrow function. (super is covered in Chapter 4.) Cannot be called with new - Arrow functions do not have a [[Construct]] method and therefore cannot be used as constructors. Arrow functions throw an error when used with new. No prototype - since you can\u0026rsquo;t use new on an arrow function, there\u0026rsquo;s no need for a prototype. The prototype property of an arrow function doesn\u0026rsquo;t exist. Can\u0026rsquo;t change this - The value of this inside of the function can\u0026rsquo;t be changed. It remains the same throughout the entire lifecycle of the function. No arguments object - Since arrow functions have no arguments binding, you must rely on named and rest parameters to access function arguments. No duplicate named parameters - arrow functions cannot have duplicate named parameters in strict or nonstrict mode, as opposed to nonarrow functions that cannot have duplicate named parameters only in strict mode. There are a few reasons for these differences. First and foremost, this binding is a common source of error in JavaScript. It\u0026rsquo;s very easy to lose track of the this value inside a function, which can result in unintended program behavior, and arrow functions eliminate this confusion. Second, by limiting arrow functions to simply executing code with a single this value, JavaScript engines can more easily optimize these operations, unlike regular functions, which might be used as a constructor or otherwise modified.\nThe rest of the differences are also focused on reducing errors and ambiguities inside of arrow functions. By doing so, JavaScript engines are better able to optimize arrow function execution.\nI\u0026gt; Note: Arrow functions also have a name property that follows the same rule as other functions.\nArrow Function Syntax The syntax for arrow functions comes in many flavors depending upon what you\u0026rsquo;re trying to accomplish. All variations begin with function arguments, followed by the arrow, followed by the body of the function. Both the arguments and the body can take different forms depending on usage. For example, the following arrow function takes a single argument and simply returns it:\nvar reflect = (value) =\u0026gt; value; // effectively equivalent to: var reflect = function (value) { return value; };\rWhen there is only one argument for an arrow function, that one argument can be used directly without any further syntax. The arrow comes next and the expression to the right of the arrow is evaluated and returned. Even though there is no explicit return statement, this arrow function will return the first argument that is passed in.\nIf you are passing in more than one argument, then you must include parentheses around those arguments, like this:\nvar sum = (num1, num2) =\u0026gt; num1 + num2; // effectively equivalent to: var sum = function (num1, num2) { return num1 + num2; };\rThe sum() function simply adds two arguments together and returns the result. The only difference between this arrow function and the reflect() function is that the arguments are enclosed in parentheses with a comma separating them (like traditional functions).\nIf there are no arguments to the function, then you must include an empty set of parentheses in the declaration, as follows:\nvar getName = () =\u0026gt; \u0026#34;Nicholas\u0026#34;; // effectively equivalent to: var getName = function () { return \u0026#34;Nicholas\u0026#34;; };\rWhen you want to provide a more traditional function body, perhaps consisting of more than one expression, then you need to wrap the function body in braces and explicitly define a return value, as in this version of sum():\nvar sum = (num1, num2) =\u0026gt; { return num1 + num2; }; // effectively equivalent to: var sum = function (num1, num2) { return num1 + num2; };\rYou can more or less treat the inside of the curly braces the same as you would in a traditional function, with the exception that arguments is not available.\nIf you want to create a function that does nothing, then you need to include curly braces, like this:\nvar doNothing = () =\u0026gt; {}; // effectively equivalent to: var doNothing = function () {};\rCurly braces are used to denote the function\u0026rsquo;s body, which works just fine in the cases you\u0026rsquo;ve seen so far. But an arrow function that wants to return an object literal outside of a function body must wrap the literal in parentheses. For example:\nvar getTempItem = (id) =\u0026gt; ({ id: id, name: \u0026#34;Temp\u0026#34; }); // effectively equivalent to: var getTempItem = function (id) { return { id: id, name: \u0026#34;Temp\u0026#34; }; };\rWrapping the object literal in parentheses signals that the braces are an object literal instead of the function body.\nCreating Immediately-Invoked Function Expressions One popular use of functions in JavaScript is creating immediately-invoked function expressions (IIFEs). IIFEs allow you to define an anonymous function and call it immediately without saving a reference. This pattern comes in handy when you want to create a scope that is shielded from the rest of a program. For example:\nlet person = (function (name) { return { getName: function () { return name; } }; })(\u0026#34;Nicholas\u0026#34;); console.log(person.getName()); // \u0026#34;Nicholas\u0026#34; In this code, the IIFE is used to create an object with a getName() method. The method uses the name argument as the return value, effectively making name a private member of the returned object.\nYou can accomplish the same thing using arrow functions, so long as you wrap the arrow function in parentheses:\nlet person = ((name) =\u0026gt; { return { getName: function () { return name; } }; })(\u0026#34;Nicholas\u0026#34;); console.log(person.getName()); // \u0026#34;Nicholas\u0026#34; Note that the parentheses are only around the arrow function definition, and not around (\u0026quot;Nicholas\u0026quot;). This is different from a formal function, where the parentheses can be placed outside of the passed-in parameters as well as just around the function definition.\nNo this Binding One of the most common areas of error in JavaScript is the binding of this inside of functions. Since the value of this can change inside a single function depending on the context in which the function is called, it\u0026rsquo;s possible to mistakenly affect one object when you meant to affect another. Consider the following example:\nvar PageHandler = { id: \u0026#34;123456\u0026#34;, init: function () { document.addEventListener( \u0026#34;click\u0026#34;, function (event) { this.doSomething(event.type); // error }, false ); }, doSomething: function (type) { console.log(\u0026#34;Handling \u0026#34; + type + \u0026#34; for \u0026#34; + this.id); } };\rIn this code, the object PageHandler is designed to handle interactions on the page. The init() method is called to set up the interactions, and that method in turn assigns an event handler to call this.doSomething(). However, this code doesn\u0026rsquo;t work exactly as intended.\nThe call to this.doSomething() is broken because this is a reference to the object that was the target of the event (in this case document), instead of being bound to PageHandler. If you tried to run this code, you\u0026rsquo;d get an error when the event handler fires because this.doSomething() doesn\u0026rsquo;t exist on the target document object.\nYou could fix this by binding the value of this to PageHandler explicitly using the bind() method on the function instead, like this:\nvar PageHandler = { id: \u0026#34;123456\u0026#34;, init: function () { document.addEventListener( \u0026#34;click\u0026#34;, function (event) { this.doSomething(event.type); // no error }.bind(this), false ); }, doSomething: function (type) { console.log(\u0026#34;Handling \u0026#34; + type + \u0026#34; for \u0026#34; + this.id); } };\rNow the code works as expected, but it may look a little bit strange. By calling bind(this), you\u0026rsquo;re actually creating a new function whose this is bound to the current this, which is PageHandler. To avoid creating an extra function, a better way to fix this code is to use an arrow function.\nArrow functions have no this binding, which means the value of this inside an arrow function can only be determined by looking up the scope chain. If the arrow function is contained within a nonarrow function, this will be the same as the containing function; otherwise, this is equivalent to the value of this in the global scope. Here\u0026rsquo;s one way you could write this code using an arrow function:\nvar PageHandler = { id: \u0026#34;123456\u0026#34;, init: function () { document.addEventListener(\u0026#34;click\u0026#34;, (event) =\u0026gt; this.doSomething(event.type), false); }, doSomething: function (type) { console.log(\u0026#34;Handling \u0026#34; + type + \u0026#34; for \u0026#34; + this.id); } };\rThe event handler in this example is an arrow function that calls this.doSomething(). The value of this is the same as it is within init(), so this version of the code works similarly to the one using bind(this). Even though the doSomething() method doesn\u0026rsquo;t return a value, it\u0026rsquo;s still the only statement executed in the function body, and so there is no need to include braces.\nArrow functions are designed to be \u0026ldquo;throwaway\u0026rdquo; functions, and so cannot be used to define new types; this is evident from the missing prototype property, which regular functions have. If you try to use the new operator with an arrow function, you\u0026rsquo;ll get an error, as in this example:\nvar MyType = () =\u0026gt; {}, object = new MyType(); // error - you can\u0026#39;t use arrow functions with \u0026#39;new\u0026#39; In this code, the call to new MyType() fails because MyType is an arrow function and therefore has no [[Construct]] behavior. Knowing that arrow functions cannot be used with new allows JavaScript engines to further optimize their behavior.\nAlso, since the this value is determined by the containing function in which the arrow function is defined, you cannot change the value of this using call(), apply(), or bind().\nArrow Functions and Arrays The concise syntax for arrow functions makes them ideal for use with array processing, too. For example, if you want to sort an array using a custom comparator, you\u0026rsquo;d typically write something like this:\nvar result = values.sort(function (a, b) { return a - b; });\rThat\u0026rsquo;s a lot of syntax for a very simple procedure. Compare that to the more terse arrow function version:\nvar result = values.sort((a, b) =\u0026gt; a - b);\rThe array methods that accept callback functions such as sort(), map(), and reduce() can all benefit from simpler arrow function syntax, which changes seemingly complex processes into simpler code.\nNo arguments Binding Even though arrow functions don\u0026rsquo;t have their own arguments object, it\u0026rsquo;s possible for them to access the arguments object from a containing function. That arguments object is then available no matter where the arrow function is executed later on. For example:\nfunction createArrowFunctionReturningFirstArg() { return () =\u0026gt; arguments[0]; } var arrowFunction = createArrowFunctionReturningFirstArg(5); console.log(arrowFunction()); // 5 Inside createArrowFunctionReturningFirstArg(), the arguments[0] element is referenced by the created arrow function. That reference contains the first argument passed to the createArrowFunctionReturningFirstArg() function. When the arrow function is later executed, it returns 5, which was the first argument passed to createArrowFunctionReturningFirstArg(). Even though the arrow function is no longer in the scope of the function that created it, arguments remains accessible due to scope chain resolution of the arguments identifier.\nIdentifying Arrow Functions Despite the different syntax, arrow functions are still functions, and are identified as such. Consider the following code:\nvar comparator = (a, b) =\u0026gt; a - b; console.log(typeof comparator); // \u0026#34;function\u0026#34; console.log(comparator instanceof Function); // true The console.log() output reveals that both typeof and instanceof behave the same with arrow functions as they do with other functions.\nAlso like other functions, you can still use call(), apply(), and bind() on arrow functions, although the this-binding of the function will not be affected. Here are some examples:\nvar sum = (num1, num2) =\u0026gt; num1 + num2; console.log(sum.call(null, 1, 2)); // 3 console.log(sum.apply(null, [1, 2])); // 3 var boundSum = sum.bind(null, 1, 2); console.log(boundSum()); // 3 The sum() function is called using call() and apply() to pass arguments, as you\u0026rsquo;d do with any function. The bind() method is used to create boundSum(), which has its two arguments bound to 1 and 2 so that they don\u0026rsquo;t need to be passed directly.\nArrow functions are appropriate to use anywhere you\u0026rsquo;re currently using an anonymous function expression, such as with callbacks. The next section covers another major ECMAScript 6 development, but this one is all internal, and has no new syntax.\nTail Call Optimization Perhaps the most interesting change to functions in ECMAScript 6 is an engine optimization, which changes the tail call system. A tail call is when a function is called as the last statement in another function, like this:\nfunction doSomething() { return doSomethingElse(); // tail call }\rTail calls as implemented in ECMAScript 5 engines are handled just like any other function call: a new stack frame is created and pushed onto the call stack to represent the function call. That means every previous stack frame is kept in memory, which is problematic when the call stack gets too large.\nWhat\u0026rsquo;s Different? ECMAScript 6 seeks to reduce the size of the call stack for certain tail calls in strict mode (nonstrict mode tail calls are left untouched). With this optimization, instead of creating a new stack frame for a tail call, the current stack frame is cleared and reused so long as the following conditions are met:\nThe tail call does not require access to variables in the current stack frame (meaning the function is not a closure) The function making the tail call has no further work to do after the tail call returns The result of the tail call is returned as the function value As an example, this code can easily be optimized because it fits all three criteria:\n\u0026#34;use strict\u0026#34;; function doSomething() { // optimized return doSomethingElse(); }\rThis function makes a tail call to doSomethingElse(), returns the result immediately, and doesn\u0026rsquo;t access any variables in the local scope. One small change, not returning the result, results in an unoptimized function:\n\u0026#34;use strict\u0026#34;; function doSomething() { // not optimized - no return doSomethingElse(); }\rSimilarly, if you have a function that performs an operation after returning from the tail call, then the function can\u0026rsquo;t be optimized:\n\u0026#34;use strict\u0026#34;; function doSomething() { // not optimized - must add after returning return 1 + doSomethingElse(); }\rThis example adds the result of doSomethingElse() with 1 before returning the value, and that\u0026rsquo;s enough to turn off optimization.\nAnother common way to inadvertently turn off optimization is to store the result of a function call in a variable and then return the result, such as:\n\u0026#34;use strict\u0026#34;; function doSomething() { // not optimized - call isn\u0026#39;t in tail position var result = doSomethingElse(); return result; }\rThis example cannot be optimized because the value of doSomethingElse() isn\u0026rsquo;t immediately returned.\nPerhaps the hardest situation to avoid is in using closures. Because a closure has access to variables in the containing scope, tail call optimization may be turned off. For example:\n\u0026#34;use strict\u0026#34;; function doSomething() { var num = 1, func = () =\u0026gt; num; // not optimized - function is a closure return func(); }\rThe closure func() has access to the local variable num in this example. Even though the call to func() immediately returns the result, optimization can\u0026rsquo;t occur due to referencing the variable num.\nHow to Harness Tail Call Optimization In practice, tail call optimization happens behind-the-scenes, so you don\u0026rsquo;t need to think about it unless you\u0026rsquo;re trying to optimize a function. The primary use case for tail call optimization is in recursive functions, as that is where the optimization has the greatest effect. Consider this function, which computes factorials:\nfunction factorial(n) { if (n \u0026lt;= 1) { return 1; } else { // not optimized - must multiply after returning return n * factorial(n - 1); } }\rThis version of the function cannot be optimized, because multiplication must happen after the recursive call to factorial(). If n is a very large number, the call stack size will grow and could potentially cause a stack overflow.\nIn order to optimize the function, you need to ensure that the multiplication doesn\u0026rsquo;t happen after the last function call. To do this, you can use a default parameter to move the multiplication operation outside of the return statement. The resulting function carries along the temporary result into the next iteration, creating a function that behaves the same but can be optimized by an ECMAScript 6 engine. Here\u0026rsquo;s the new code:\nfunction factorial(n, p = 1) { if (n \u0026lt;= 1) { return 1 * p; } else { let result = n * p; // optimized return factorial(n - 1, result); } }\rIn this rewritten version of factorial(), a second argument p is added as a parameter with a default value of 1. The p parameter holds the previous multiplication result so that the next result can be computed without another function call. When n is greater than 1, the multiplication is done first and then passed in as the second argument to factorial(). This allows the ECMAScript 6 engine to optimize the recursive call.\nTail call optimization is something you should think about whenever you\u0026rsquo;re writing a recursive function, as it can provide a significant performance improvement, especially when applied in a computationally-expensive function.\nSummary Functions haven\u0026rsquo;t undergone a huge change in ECMAScript 6, but rather, a series of incremental changes that make them easier to work with.\nDefault function parameters allow you to easily specify what value to use when a particular argument isn\u0026rsquo;t passed. Prior to ECMAScript 6, this would require some extra code inside the function, to both check for the presence of arguments and assign a different value.\nRest parameters allow you to specify an array into which all remaining parameters should be placed. Using a real array and letting you indicate which parameters to include makes rest parameters a much more flexible solution than arguments.\nThe spread operator is a companion to rest parameters, allowing you to deconstruct an array into separate parameters when calling a function. Prior to ECMAScript 6, there were only two ways to pass individual parameters contained in an array: by manually specifying each parameter or using apply(). With the spread operator, you can easily pass an array to any function without worrying about the this binding of the function.\nThe addition of the name property should help you more easily identify functions for debugging and evaluation purposes. Additionally, ECMAScript 6 formally defines the behavior of block-level functions so they are no longer a syntax error in strict mode.\nIn ECMAScript 6, the behavior of a function is defined by [[Call]], normal function execution, and [[Construct]], when a function is called with new. The new.target metaproperty also allows you to determine if a function was called using new or not.\nThe biggest change to functions in ECMAScript 6 was the addition of arrow functions. Arrow functions are designed to be used in place of anonymous function expressions. Arrow functions have a more concise syntax, lexical this binding, and no arguments object. Additionally, arrow functions can\u0026rsquo;t change their this binding, and so can\u0026rsquo;t be used as constructors.\nTail call optimization allows some function calls to be optimized in order to keep a smaller call stack, use less memory, and prevent stack overflow errors. This optimization is applied by the engine automatically when it is safe to do so, however, you may decide to rewrite recursive functions in order to take advantage of this optimization.\n","date":"0001-01-01","id":30,"permalink":"/es6/03-functions/","summary":"\u003cp\u003eFunctions are an important part of any programming language, and prior to ECMAScript 6, JavaScript functions hadn\u0026rsquo;t changed much since the language was created. This left a backlog of problems and nuanced behavior that made making mistakes easy and often required more code just to achieve very basic behaviors.\u003c/p\u003e","tags":[],"title":"03 Functions"},{"content":"ECMAScript 6 focuses heavily on improving the utility of objects, which makes sense because nearly every value in JavaScript is some type of object. Additionally, the number of objects used in an average JavaScript program continues to increase as the complexity of JavaScript applications increases, meaning that programs are creating more objects all the time. With more objects comes the necessity to use them more effectively.\nECMAScript 6 improves objects in a number of ways, from simple syntax extensions to options for manipulating and interacting with them.\nObject Categories JavaScript uses a mix of terminology to describe objects found in the standard as opposed to those added by execution environments such as the browser or Node.js, and the ECMAScript 6 specification has clear definitions for each category of object. It\u0026rsquo;s important to understand this terminology to have a good understanding of the language as a whole. The object categories are:\nOrdinary objects Have all the default internal behaviors for objects in JavaScript. Exotic objects Have internal behavior that differs from the default in some way. Standard objects Are those defined by ECMAScript 6, such as Array, Date, and so on. Standard objects may be ordinary or exotic. Built-in objects Are present in a JavaScript execution environment when a script begins to execute. All standard objects are built-in objects. I will use these terms throughout the book to explain the various objects defined by ECMAScript 6.\nObject Literal Syntax Extensions The object literal is one of the most popular patterns in JavaScript. JSON is built upon its syntax, and it\u0026rsquo;s in nearly every JavaScript file on the Internet. The object literal is so popular because it\u0026rsquo;s a succinct syntax for creating objects that otherwise would take several lines of code. Luckily for developers, ECMAScript 6 makes object literals more powerful and even more succinct by extending the syntax in several ways.\nProperty Initializer Shorthand In ECMAScript 5 and earlier, object literals were simply collections of name-value pairs. That meant there could be some duplication when property values are initialized. For example:\nfunction createPerson(name, age) { return { name: name, age: age }; }\rThe createPerson() function creates an object whose property names are the same as the function parameter names. The result appears to be duplication of name and age even though one is the name of an object property while the other provides the value for that property. The key name in the returned object is assigned the value contained in the variable name, and the key age in the returned object is assigned the value contained in the variable age.\nIn ECMAScript 6, you can eliminate the duplication that exists around property names and local variables by using the property initializer shorthand. When an object property name is the same as the local variable name, you can simply include the name without a colon and value. For example, createPerson() can be rewritten for ECMAScript 6 as follows:\nfunction createPerson(name, age) { return { name, age }; }\rWhen a property in an object literal only has a name, the JavaScript engine looks into the surrounding scope for a variable of the same name. If it finds one, that variable\u0026rsquo;s value is assigned to the same name on the object literal. In this example, the object literal property name is assigned the value of the local variable name.\nThis extension makes object literal initialization even more succinct and helps to eliminate naming errors. Assigning a property with the same name as a local variable is a very common pattern in JavaScript, making this extension a welcome addition.\nConcise Methods ECMAScript 6 also improves the syntax for assigning methods to object literals. In ECMAScript 5 and earlier, you must specify a name and then the full function definition to add a method to an object, as follows:\nvar person = { name: \u0026#34;Nicholas\u0026#34;, sayName: function () { console.log(this.name); } };\rIn ECMAScript 6, the syntax is made more concise by eliminating the colon and the function keyword. That means you can rewrite the previous example like this:\nvar person = { name: \u0026#34;Nicholas\u0026#34;, sayName() { console.log(this.name); } };\rThis shorthand syntax, also called concise method syntax, creates a method on the person object just as the previous example did. The sayName() property is assigned an anonymous function and has all the same characteristics as the ECMAScript 5 sayName() function. The one difference is that concise methods may use super (discussed later in the \u0026ldquo;Easy Prototype Access with Super References\u0026rdquo; section), while the nonconcise methods may not.\nI\u0026gt; The name property of a method created using concise method shorthand is the name used before the parentheses. In the last example, the name property for person.sayName() is \u0026quot;sayName\u0026quot;.\nComputed Property Names ECMAScript 5 and earlier could compute property names on object instances when those properties were set with square brackets instead of dot notation. The square brackets allow you to specify property names using variables and string literals that may contain characters that would cause a syntax error if used in an identifier. Here\u0026rsquo;s an example:\nvar person = {}, lastName = \u0026#34;last name\u0026#34;; person[\u0026#34;first name\u0026#34;] = \u0026#34;Nicholas\u0026#34;; person[lastName] = \u0026#34;Zakas\u0026#34;; console.log(person[\u0026#34;first name\u0026#34;]); // \u0026#34;Nicholas\u0026#34; console.log(person[lastName]); // \u0026#34;Zakas\u0026#34; Since lastName is assigned a value of \u0026quot;last name\u0026quot;, both property names in this example use a space, making it impossible to reference them using dot notation. However, bracket notation allows any string value to be used as a property name, so assigning \u0026quot;first name\u0026quot; to \u0026quot;Nicholas\u0026quot; and \u0026ldquo;last name\u0026quot; to \u0026quot;Zakas\u0026quot; works.\nAdditionally, you can use string literals directly as property names in object literals, like this:\nvar person = { \u0026#34;first name\u0026#34;: \u0026#34;Nicholas\u0026#34; }; console.log(person[\u0026#34;first name\u0026#34;]); // \u0026#34;Nicholas\u0026#34; This pattern works for property names that are known ahead of time and can be represented with a string literal. If, however, the property name \u0026quot;first name\u0026quot; were contained in a variable (as in the previous example) or had to be calculated, then there would be no way to define that property using an object literal in ECMAScript 5.\nIn ECMAScript 6, computed property names are part of the object literal syntax, and they use the same square bracket notation that has been used to reference computed property names in object instances. For example:\nvar lastName = \u0026#34;last name\u0026#34;; var person = { \u0026#34;first name\u0026#34;: \u0026#34;Nicholas\u0026#34;, [lastName]: \u0026#34;Zakas\u0026#34; }; console.log(person[\u0026#34;first name\u0026#34;]); // \u0026#34;Nicholas\u0026#34; console.log(person[lastName]); // \u0026#34;Zakas\u0026#34; The square brackets inside the object literal indicate that the property name is computed, so its contents are evaluated as a string. That means you can also include expressions such as:\nvar suffix = \u0026#34; name\u0026#34;; var person = { [\u0026#34;first\u0026#34; + suffix]: \u0026#34;Nicholas\u0026#34;, [\u0026#34;last\u0026#34; + suffix]: \u0026#34;Zakas\u0026#34; }; console.log(person[\u0026#34;first name\u0026#34;]); // \u0026#34;Nicholas\u0026#34; console.log(person[\u0026#34;last name\u0026#34;]); // \u0026#34;Zakas\u0026#34; These properties evaluate to \u0026quot;first name\u0026quot; and \u0026quot;last name\u0026quot;, and those strings can be used to reference the properties later. Anything you would put inside square brackets while using bracket notation on object instances will also work for computed property names inside object literals.\nNew Methods One of the design goals of ECMAScript beginning with ECMAScript 5 was to avoid creating new global functions or methods on Object.prototype, and instead try to find objects on which new methods should be available. As a result, the Object global has received an increasing number of methods when no other objects are more appropriate. ECMAScript 6 introduces a couple new methods on the Object global that are designed to make certain tasks easier.\nThe Object.is() Method When you want to compare two values in JavaScript, you\u0026rsquo;re probably used to using either the equals operator (==) or the identically equals operator (===). Many developers prefer the latter, to avoid type coercion during comparison. But even the identically equals operator isn\u0026rsquo;t entirely accurate. For example, the values +0 and -0 are considered equal by === even though they are represented differently in the JavaScript engine. Also NaN === NaN returns false, which necessitates using isNaN() to detect NaN properly.\nECMAScript 6 introduces the Object.is() method to make up for the remaining quirks of the identically equals operator. This method accepts two arguments and returns true if the values are equivalent. Two values are considered equivalent when they are of the same type and have the same value. Here are some examples:\nconsole.log(+0 == -0); // true console.log(+0 === -0); // true console.log(Object.is(+0, -0)); // false console.log(NaN == NaN); // false console.log(NaN === NaN); // false console.log(Object.is(NaN, NaN)); // true console.log(5 == 5); // true console.log(5 == \u0026#34;5\u0026#34;); // true console.log(5 === 5); // true console.log(5 === \u0026#34;5\u0026#34;); // false console.log(Object.is(5, 5)); // true console.log(Object.is(5, \u0026#34;5\u0026#34;)); // false In many cases, Object.is() works the same as the === operator. The only differences are that +0 and -0 are considered not equivalent and NaN is considered equivalent to NaN. But there\u0026rsquo;s no need to stop using equality operators altogether. Choose whether to use Object.is() instead of == or === based on how those special cases affect your code.\nThe Object.assign() Method Mixins are among the most popular patterns for object composition in JavaScript. In a mixin, one object receives properties and methods from another object. Many JavaScript libraries have a mixin method similar to this:\nfunction mixin(receiver, supplier) { Object.keys(supplier).forEach(function (key) { receiver[key] = supplier[key]; }); return receiver; }\rThe mixin() function iterates over the own properties of supplier and copies them onto receiver (a shallow copy, where object references are shared when property values are objects). This allows the receiver to gain new properties without inheritance, as in this code:\nfunction EventTarget() { /*...*/ } EventTarget.prototype = { constructor: EventTarget, emit: function () { /*...*/ }, on: function () { /*...*/ } }; var myObject = {}; mixin(myObject, EventTarget.prototype); myObject.emit(\u0026#34;somethingChanged\u0026#34;);\rHere, myObject receives behavior from the EventTarget.prototype object. This gives myObject the ability to publish events and subscribe to them using the emit() and on() methods, respectively.\nThis pattern became popular enough that ECMAScript 6 added the Object.assign() method, which behaves the same way, accepting a receiver and any number of suppliers, and then returning the receiver. The name change from mixin() to assign() reflects the actual operation that occurs. Since the mixin() function uses the assignment operator (=), it cannot copy accessor properties to the receiver as accessor properties. The name Object.assign() was chosen to reflect this distinction.\nI\u0026gt; Similar methods in various libraries may have other names for the same basic functionality; popular alternates include the extend() and mix() methods. There was also, briefly, an Object.mixin() method in ECMAScript 6 in addition to the Object.assign() method. The primary difference was that Object.mixin() also copied over accessor properties, but the method was removed due to concerns over the use of super (discussed in the \u0026ldquo;Easy Prototype Access with Super References\u0026rdquo; section of this chapter).\nYou can use Object.assign() anywhere the mixin() function would have been used. Here\u0026rsquo;s an example:\nfunction EventTarget() { /*...*/ } EventTarget.prototype = { constructor: EventTarget, emit: function () { /*...*/ }, on: function () { /*...*/ } }; var myObject = {}; Object.assign(myObject, EventTarget.prototype); myObject.emit(\u0026#34;somethingChanged\u0026#34;);\rThe Object.assign() method accepts any number of suppliers, and the receiver receives the properties in the order in which the suppliers are specified. That means the second supplier might overwrite a value from the first supplier on the receiver, which is what happens in this snippet:\nvar receiver = {}; Object.assign( receiver, { type: \u0026#34;js\u0026#34;, name: \u0026#34;file.js\u0026#34; }, { type: \u0026#34;css\u0026#34; } ); console.log(receiver.type); // \u0026#34;css\u0026#34; console.log(receiver.name); // \u0026#34;file.js\u0026#34; The value of receiver.type is \u0026quot;css\u0026quot; because the second supplier overwrote the value of the first.\nThe Object.assign() method isn\u0026rsquo;t a big addition to ECMAScript 6, but it does formalize a common function found in many JavaScript libraries.\nA\u0026gt; ### Working with Accessor Properties A\u0026gt; A\u0026gt; Keep in mind that Object.assign() doesn\u0026rsquo;t create accessor properties on the receiver when a supplier has accessor properties. Since Object.assign() uses the assignment operator, an accessor property on a supplier will become a data property on the receiver. For example: A\u0026gt; A\u0026gt; js A\u0026gt; var receiver = {}, A\u0026gt; supplier = { A\u0026gt; get name() { A\u0026gt; return \u0026quot;file.js\u0026quot; A\u0026gt; } A\u0026gt; }; A\u0026gt; A\u0026gt; Object.assign(receiver, supplier); A\u0026gt; A\u0026gt; var descriptor = Object.getOwnPropertyDescriptor(receiver, \u0026quot;name\u0026quot;); A\u0026gt; A\u0026gt; console.log(descriptor.value); // \u0026quot;file.js\u0026quot; A\u0026gt; console.log(descriptor.get); // undefined A\u0026gt; A\u0026gt; A\u0026gt; In this code, the supplier has an accessor property called name. After using the Object.assign() method, receiver.name exists as a data property with a value of \u0026quot;file.js\u0026quot; because supplier.name returned \u0026quot;file.js\u0026quot; when Object.assign() was called.\nDuplicate Object Literal Properties ECMAScript 5 strict mode introduced a check for duplicate object literal properties that would throw an error if a duplicate was found. For example, this code was problematic:\n\u0026#34;use strict\u0026#34;; var person = { name: \u0026#34;Nicholas\u0026#34;, name: \u0026#34;Greg\u0026#34; // syntax error in ES5 strict mode };\rWhen running in ECMAScript 5 strict mode, the second name property causes a syntax error. But in ECMAScript 6, the duplicate property check was removed. Both strict and nonstrict mode code no longer check for duplicate properties. Instead, the last property of the given name becomes the property\u0026rsquo;s actual value, as shown here:\n\u0026#34;use strict\u0026#34;; var person = { name: \u0026#34;Nicholas\u0026#34;, name: \u0026#34;Greg\u0026#34; // no error in ES6 strict mode }; console.log(person.name); // \u0026#34;Greg\u0026#34; In this example, the value of person.name is \u0026quot;Greg\u0026quot; because that\u0026rsquo;s the last value assigned to the property.\nOwn Property Enumeration Order ECMAScript 5 didn\u0026rsquo;t define the enumeration order of object properties, as it left this up to the JavaScript engine vendors. However, ECMAScript 6 strictly defines the order in which own properties must be returned when they are enumerated. This affects how properties are returned using Object.getOwnPropertyNames() and Reflect.ownKeys (covered in Chapter 12). It also affects the order in which properties are processed by Object.assign().\nThe basic order for own property enumeration is:\nAll numeric keys in ascending order All string keys in the order in which they were added to the object All symbol keys (covered in Chapter 6) in the order in which they were added to the object Here\u0026rsquo;s an example:\nvar obj = { a: 1, 0: 1, c: 1, 2: 1, b: 1, 1: 1 }; obj.d = 1; console.log(Object.getOwnPropertyNames(obj).join(\u0026#34;\u0026#34;)); // \u0026#34;012acbd\u0026#34; The Object.getOwnPropertyNames() method returns the properties in obj in the order 0, 1, 2, a, c, b, d. Note that the numeric keys are grouped together and sorted, even though they appear out of order in the object literal. The string keys come after the numeric keys and appear in the order that they were added to obj. The keys in the object literal itself come first, followed by any dynamic keys that were added later (in this case, d).\nW\u0026gt; The for-in loop still has an unspecified enumeration order because not all JavaScript engines implement it the same way. The Object.keys() method and JSON.stringify() are both specified to use the same (unspecified) enumeration order as for-in.\nWhile enumeration order is a subtle change to how JavaScript works, it\u0026rsquo;s not uncommon to find programs that rely on a specific enumeration order to work correctly. ECMAScript 6, by defining the enumeration order, ensures that JavaScript code relying on enumeration will work correctly regardless of where it is executed.\nMore Powerful Prototypes Prototypes are the foundation of inheritance in JavaScript, and ECMAScript 6 continues to make prototypes more powerful. Early versions of JavaScript severely limited what could be done with prototypes. However, as the language matured and developers became more familiar with how prototypes work, it became clear that developers wanted more control over prototypes and easier ways to work with them. As a result, ECMAScript 6 introduced some improvements to prototypes.\nChanging an Object\u0026rsquo;s Prototype Normally, the prototype of an object is specified when the object is created, via either a constructor or the Object.create() method. The idea that an object\u0026rsquo;s prototype remains unchanged after instantiation was one of the biggest assumptions in JavaScript programming through ECMAScript 5. ECMAScript 5 did add the Object.getPrototypeOf() method for retrieving the prototype of any given object, but it still lacked a standard way to change an object\u0026rsquo;s prototype after instantiation.\nECMAScript 6 changes that assumption by adding the Object.setPrototypeOf() method, which allows you to change the prototype of any given object. The Object.setPrototypeOf() method accepts two arguments: the object whose prototype should change and the object that should become the first argument\u0026rsquo;s prototype. For example:\nlet person = { getGreeting() { return \u0026#34;Hello\u0026#34;; } }; let dog = { getGreeting() { return \u0026#34;Woof\u0026#34;; } }; // prototype is person let friend = Object.create(person); console.log(friend.getGreeting()); // \u0026#34;Hello\u0026#34; console.log(Object.getPrototypeOf(friend) === person); // true // set prototype to dog Object.setPrototypeOf(friend, dog); console.log(friend.getGreeting()); // \u0026#34;Woof\u0026#34; console.log(Object.getPrototypeOf(friend) === dog); // true This code defines two base objects: person and dog. Both objects have a getGreeting() method that returns a string. The object friend first inherits from the person object, meaning that getGreeting() outputs \u0026quot;Hello\u0026quot;. When the prototype becomes the dog object, friend.getGreeting() outputs \u0026quot;Woof\u0026quot; because the original relationship to person is broken.\nThe actual value of an object\u0026rsquo;s prototype is stored in an internal-only property called [[Prototype]]. The Object.getPrototypeOf() method returns the value stored in [[Prototype]] and Object.setPrototypeOf() changes the value stored in [[Prototype]]. However, these aren\u0026rsquo;t the only ways to work with the value of [[Prototype]].\nEasy Prototype Access with Super References As previously mentioned, prototypes are very important for JavaScript and a lot of work went into making them easier to use in ECMAScript 6. Another improvement is the introduction of super references, which make accessing functionality on an object\u0026rsquo;s prototype easier. For example, to override a method on an object instance such that it also calls the prototype method of the same name, you\u0026rsquo;d do the following:\nlet person = { getGreeting() { return \u0026#34;Hello\u0026#34;; } }; let dog = { getGreeting() { return \u0026#34;Woof\u0026#34;; } }; let friend = { getGreeting() { return Object.getPrototypeOf(this).getGreeting.call(this) + \u0026#34;, hi!\u0026#34;; } }; // set prototype to person Object.setPrototypeOf(friend, person); console.log(friend.getGreeting()); // \u0026#34;Hello, hi!\u0026#34; console.log(Object.getPrototypeOf(friend) === person); // true // set prototype to dog Object.setPrototypeOf(friend, dog); console.log(friend.getGreeting()); // \u0026#34;Woof, hi!\u0026#34; console.log(Object.getPrototypeOf(friend) === dog); // true In this example, getGreeting() on friend calls the prototype method of the same name. The Object.getPrototypeOf() method ensures the correct prototype is called, and then an additional string is appended to the output. The additional .call(this) ensures that the this value inside the prototype method is set correctly.\nRemembering to use Object.getPrototypeOf() and .call(this) to call a method on the prototype is a bit involved, so ECMAScript 6 introduced super. At its simplest, super is a pointer to the current object\u0026rsquo;s prototype, effectively the Object.getPrototypeOf(this) value. Knowing that, you can simplify the getGreeting() method as follows:\nlet friend = { getGreeting() { // in the previous example, this is the same as: // Object.getPrototypeOf(this).getGreeting.call(this) return super.getGreeting() + \u0026#34;, hi!\u0026#34;; } };\rThe call to super.getGreeting() is the same as Object.getPrototypeOf(this).getGreeting.call(this) in this context. Similarly, you can call any method on an object\u0026rsquo;s prototype by using a super reference, so long as it\u0026rsquo;s inside a concise method. Attempting to use super outside of concise methods results in a syntax error, as in this example:\nlet friend = { getGreeting: function () { // syntax error return super.getGreeting() + \u0026#34;, hi!\u0026#34;; } };\rThis example uses a named property with a function, and the call to super.getGreeting() results in a syntax error because super is invalid in this context.\nThe super reference is really powerful when you have multiple levels of inheritance, because in that case, Object.getPrototypeOf() no longer works in all circumstances. For example:\nlet person = { getGreeting() { return \u0026#34;Hello\u0026#34;; } }; // prototype is person let friend = { getGreeting() { return Object.getPrototypeOf(this).getGreeting.call(this) + \u0026#34;, hi!\u0026#34;; } }; Object.setPrototypeOf(friend, person); // prototype is friend let relative = Object.create(friend); console.log(person.getGreeting()); // \u0026#34;Hello\u0026#34; console.log(friend.getGreeting()); // \u0026#34;Hello, hi!\u0026#34; console.log(relative.getGreeting()); // error! The call to Object.getPrototypeOf() results in an error when relative.getGreeting() is called. That\u0026rsquo;s because this is relative, and the prototype of relative is the friend object. When friend.getGreeting().call() is called with relative as this, the process starts over again and continues to call recursively until a stack overflow error occurs.\nThat problem is difficult to solve in ECMAScript 5, but with ECMAScript 6 and super, it\u0026rsquo;s easy:\nlet person = { getGreeting() { return \u0026#34;Hello\u0026#34;; } }; // prototype is person let friend = { getGreeting() { return super.getGreeting() + \u0026#34;, hi!\u0026#34;; } }; Object.setPrototypeOf(friend, person); // prototype is friend let relative = Object.create(friend); console.log(person.getGreeting()); // \u0026#34;Hello\u0026#34; console.log(friend.getGreeting()); // \u0026#34;Hello, hi!\u0026#34; console.log(relative.getGreeting()); // \u0026#34;Hello, hi!\u0026#34; Because super references are not dynamic, they always refer to the correct object. In this case, super.getGreeting() always refers to person.getGreeting(), regardless of how many other objects inherit the method.\nA Formal Method Definition Prior to ECMAScript 6, the concept of a \u0026ldquo;method\u0026rdquo; wasn\u0026rsquo;t formally defined. Methods were just object properties that contained functions instead of data. ECMAScript 6 formally defines a method as a function that has an internal [[HomeObject]] property containing the object to which the method belongs. Consider the following:\nlet person = { // method getGreeting() { return \u0026#34;Hello\u0026#34;; } }; // not a method function shareGreeting() { return \u0026#34;Hi!\u0026#34;; }\rThis example defines person with a single method called getGreeting(). The [[HomeObject]] for getGreeting() is person by virtue of assigning the function directly to an object. The shareGreeting() function, on the other hand, has no [[HomeObject]] specified because it wasn\u0026rsquo;t assigned to an object when it was created. In most cases, this difference isn\u0026rsquo;t important, but it becomes very important when using super references.\nAny reference to super uses the [[HomeObject]] to determine what to do. The first step is to call Object.getPrototypeOf() on the [[HomeObject]] to retrieve a reference to the prototype. Then, the prototype is searched for a function with the same name. Last, the this binding is set and the method is called. Here\u0026rsquo;s an example:\nlet person = { getGreeting() { return \u0026#34;Hello\u0026#34;; } }; // prototype is person let friend = { getGreeting() { return super.getGreeting() + \u0026#34;, hi!\u0026#34;; } }; Object.setPrototypeOf(friend, person); console.log(friend.getGreeting()); // \u0026#34;Hello, hi!\u0026#34; Calling friend.getGreeting() returns a string, which combines the value from person.getGreeting() with \u0026quot;, hi!\u0026quot;. The [[HomeObject]] of friend.getGreeting() is friend, and the prototype of friend is person, so super.getGreeting() is equivalent to person.getGreeting.call(this).\nSummary Objects are the center of programming in JavaScript, and ECMAScript 6 made some helpful changes to objects that both make them easier to deal with and more powerful.\nECMAScript 6 makes several changes to object literals. Shorthand property definitions make assigning properties with the same names as in-scope variables easier. Computed property names allow you to specify non-literal values as property names, which you\u0026rsquo;ve already been able to do in other areas of the language. Shorthand methods let you type a lot fewer characters in order to define methods on object literals, by completely omitting the colon and function keyword. ECMAScript 6 loosens the strict mode check for duplicate object literal property names as well, meaning you can have two properties with the same name in a single object literal without throwing an error.\nThe Object.assign() method makes it easier to change multiple properties on a single object at once. This can be very useful if you use the mixin pattern. The Object.is() method performs strict equality on any value, effectively becoming a safer version of === when dealing with special JavaScript values.\nEnumeration order for own properties is now clearly defined in ECMAScript 6. When enumerating properties, numeric keys always come first in ascending order followed by string keys in insertion order and symbol keys in insertion order.\nIt\u0026rsquo;s now possible to modify an object\u0026rsquo;s prototype after it\u0026rsquo;s already created, thanks to ECMAScript 6\u0026rsquo;s Object.setPrototypeOf() method.\nFinally, you can use the super keyword to call methods on an object\u0026rsquo;s prototype. The this binding inside a method invoked using super is set up to automatically work with the current value of this.\n","date":"0001-01-01","id":31,"permalink":"/es6/04-objects/","summary":"\u003cp\u003eECMAScript 6 focuses heavily on improving the utility of objects, which makes sense because nearly every value in JavaScript is some type of object. Additionally, the number of objects used in an average JavaScript program continues to increase as the complexity of JavaScript applications increases, meaning that programs are creating more objects all the time. With more objects comes the necessity to use them more effectively.\u003c/p\u003e","tags":[],"title":"04 Expanded Object Functionality"},{"content":"Object and array literals are two of the most frequently used notations in JavaScript, and thanks to the popular JSON data format, they\u0026rsquo;ve become a particularly important part of the language. It\u0026rsquo;s quite common to define objects and arrays, and then systematically pull out relevant pieces of information from those structures. ECMAScript 6 simplifies this task by adding destructuring, which is the process of breaking a data structure down into smaller parts. This chapter shows you how to harness destructuring for both objects and arrays.\nWhy is Destructuring Useful? In ECMAScript 5 and earlier, the need to fetch information from objects and arrays could lead to a lot of code that looks the same, just to get certain data into local variables. For example:\nlet options = { repeat: true, save: false }; // extract data from the object let repeat = options.repeat, save = options.save;\rThis code extracts the values of repeat and save from the options object and stores that data in local variables with the same names. While this code looks simple, imagine if you had a large number of variables to assign; you would have to assign them all one by one. And if there was a nested data structure to traverse to find the information instead, you might have to dig through the entire structure just to find one piece of data.\nThat\u0026rsquo;s why ECMAScript 6 adds destructuring for both objects and arrays. When you break a data structure into smaller parts, getting the information you need out of it becomes much easier. Many languages implement destructuring with a minimal amount of syntax to make the process simpler to use. The ECMAScript 6 implementation actually makes use of syntax you\u0026rsquo;re already familiar with: the syntax for object and array literals.\nObject Destructuring Object destructuring syntax uses an object literal on the left side of an assignment operation. For example:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34; }; let { type, name } = node; console.log(type); // \u0026#34;Identifier\u0026#34; console.log(name); // \u0026#34;foo\u0026#34; In this code, the value of node.type is stored in a variable called type and the value of node.name is stored in a variable called name. This syntax is the same as the object literal property initializer shorthand introduced in Chapter 4. The identifiers type and name are both declarations of local variables and the properties to read the value from on the node object.\nA\u0026gt; #### Don\u0026rsquo;t Forget the Initializer A\u0026gt; A\u0026gt;When using destructuring to declare variables using var, let, or const, you must supply an initializer (the value after the equals sign). The following lines of code will all throw syntax errors due to a missing initializer: A\u0026gt; A\u0026gt;js A\u0026gt;// syntax error! A\u0026gt;var { type, name }; A\u0026gt; A\u0026gt;// syntax error! A\u0026gt;let { type, name }; A\u0026gt; A\u0026gt;// syntax error! A\u0026gt;const { type, name }; A\u0026gt; A\u0026gt; A\u0026gt;While const always requires an initializer, even when using nondestructured variables, var and let only require initializers when using destructuring.\nDestructuring Assignment The object destructuring examples so far have used variable declarations. However, it\u0026rsquo;s also possible to use destructuring in assignments. For instance, you may decide to change the values of variables after they are defined, as follows:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34; }, type = \u0026#34;Literal\u0026#34;, name = 5; // assign different values using destructuring ({ type, name } = node); console.log(type); // \u0026#34;Identifier\u0026#34; console.log(name); // \u0026#34;foo\u0026#34; In this example, type and name are initialized with values when declared, and then two variables with the same names are initialized with different values. The next line uses destructuring assignment to change those values by reading from the node object. Note that you must put parentheses around a destructuring assignment statement. That\u0026rsquo;s because an opening curly brace is expected to a be a block statement, and a block statement cannot appear on the left side of an assignment. The parentheses signal that the next curly brace is not a block statement and should be interpreted as an expression, allowing the assignment to complete.\nA destructuring assignment expression evaluates to the right side of the expression (after the =). That means you can use a destructuring assignment expression anywhere a value is expected. For instance, passing a value to a function:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34; }, type = \u0026#34;Literal\u0026#34;, name = 5; function outputInfo(value) { console.log(value === node); } outputInfo(({ type, name } = node)); // true console.log(type); // \u0026#34;Identifier\u0026#34; console.log(name); // \u0026#34;foo\u0026#34; The outputInfo() function is called with a destructuring assignment expression. The expression evaluates to node because that is the value of the right side of the expression. The assignment to type and name both behave as normal and node is passed into outputInfo().\nW\u0026gt; An error is thrown when the right side of the destructuring assignment expression (the expression after =) evaluates to null or undefined. This happens because any attempt to read a property of null or undefined results in a runtime error.\nDefault Values When you use a destructuring assignment statement, if you specify a local variable with a property name that doesn\u0026rsquo;t exist on the object, then that local variable is assigned a value of undefined. For example:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34; }; let { type, name, value } = node; console.log(type); // \u0026#34;Identifier\u0026#34; console.log(name); // \u0026#34;foo\u0026#34; console.log(value); // undefined This code defines an additional local variable called value and attempts to assign it a value. However, there is no corresponding value property on the node object, so the variable is assigned the value of undefined as expected.\nYou can optionally define a default value to use when a specified property doesn\u0026rsquo;t exist. To do so, insert an equals sign (=) after the property name and specify the default value, like this:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34; }; let { type, name, value = true } = node; console.log(type); // \u0026#34;Identifier\u0026#34; console.log(name); // \u0026#34;foo\u0026#34; console.log(value); // true In this example, the variable value is given true as a default value. The default value is only used if the property is missing on node or has a value of undefined. Since there is no node.value property, the variable value uses the default value. This works similarly to the default parameter values for functions, as discussed in Chapter 3.\nAssigning to Different Local Variable Names Up to this point, each example destructuring assignment has used the object property name as the local variable name; for example, the value of node.type was stored in a type variable. That works well when you want to use the same name, but what if you don\u0026rsquo;t? ECMAScript 6 has an extended syntax that allows you to assign to a local variable with a different name, and that syntax looks like the object literal nonshorthand property initializer syntax. Here\u0026rsquo;s an example:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34; }; let { type: localType, name: localName } = node; console.log(localType); // \u0026#34;Identifier\u0026#34; console.log(localName); // \u0026#34;foo\u0026#34; This code uses destructuring assignment to declare the localType and localName variables, which contain the values from the node.type and node.name properties, respectively. The syntax type: localType says to read the property named type and store its value in the localType variable. This syntax is effectively the opposite of traditional object literal syntax, where the name is on the left of the colon and the value is on the right. In this case, the name is on the right of the colon and the location of the value to read is on the left.\nYou can add default values when using a different variable name, as well. The equals sign and default value are still placed after the local variable name. For example:\nlet node = { type: \u0026#34;Identifier\u0026#34; }; let { type: localType, name: localName = \u0026#34;bar\u0026#34; } = node; console.log(localType); // \u0026#34;Identifier\u0026#34; console.log(localName); // \u0026#34;bar\u0026#34; Here, the localName variable has a default value of \u0026quot;bar\u0026quot;. The variable is assigned its default value because there\u0026rsquo;s no node.name property.\nSo far, you\u0026rsquo;ve seen how to deal with destructuring of an object whose properties are primitive values. Object destructuring can also be used to retrieve values in nested object structures.\nNested Object Destructuring By using a syntax similar to object literals, you can navigate into a nested object structure to retrieve just the information you want. Here\u0026rsquo;s an example:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34;, loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 4 } } }; let { loc: { start } } = node; console.log(start.line); // 1 console.log(start.column); // 1 The destructuring pattern in this example uses curly braces to indicate that the pattern should descend into the property named loc on node and look for the start property. Remember from the last section that whenever there\u0026rsquo;s a colon in a destructuring pattern, it means the identifier before the colon is giving a location to inspect, and the right side assigns a value. When there\u0026rsquo;s a curly brace after the colon, that indicates that the destination is nested another level into the object.\nYou can go one step further and use a different name for the local variable as well:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34;, loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 4 } } }; // extract node.loc.start let { loc: { start: localStart } } = node; console.log(localStart.line); // 1 console.log(localStart.column); // 1 In this version of the code, node.loc.start is stored in a new local variable called localStart. Destructuring patterns can be nested to an arbitrary level of depth, with all capabilities available at each level.\nObject destructuring is very powerful and has a lot of options, but array destructuring offers some unique capabilities that allow you to extract information from arrays.\nA\u0026gt; #### Syntax Gotcha A\u0026gt; A\u0026gt;Be careful when using nested destructuring because you can inadvertently create a statement that has no effect. Empty curly braces are legal in object destructuring, however, they don\u0026rsquo;t do anything. For example: A\u0026gt; A\u0026gt;js A\u0026gt;// no variables declared! A\u0026gt;let { loc: {} } = node; A\u0026gt; A\u0026gt; A\u0026gt;There are no bindings declared in this statement. Due to the curly braces on the right, loc is used as a location to inspect rather than a binding to create. In such a case, it\u0026rsquo;s likely that the intent was to use = to define a default value rather than : to define a location. It\u0026rsquo;s possible that this syntax will be made illegal in the future, but for now, this is a gotcha to look out for.\nArray Destructuring Array destructuring syntax is very similar to object destructuring; it just uses array literal syntax instead of object literal syntax. The destructuring operates on positions within an array, rather than the named properties that are available in objects. For example:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let [firstColor, secondColor] = colors; console.log(firstColor); // \u0026#34;red\u0026#34; console.log(secondColor); // \u0026#34;green\u0026#34; Here, array destructuring pulls out the values \u0026quot;red\u0026quot; and \u0026quot;green\u0026quot; from the colors array and stores them in the firstColor and secondColor variables. Those values are chosen because of their position in the array; the actual variable names could be anything. Any items not explicitly mentioned in the destructuring pattern are ignored. Keep in mind that the array itself isn\u0026rsquo;t changed in any way.\nYou can also omit items in the destructuring pattern and only provide variable names for the items you\u0026rsquo;re interested in. If, for example, you just want the third value of an array, you don\u0026rsquo;t need to supply variable names for the first and second items. Here\u0026rsquo;s how that works:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let [, , thirdColor] = colors; console.log(thirdColor); // \u0026#34;blue\u0026#34; This code uses a destructuring assignment to retrieve the third item in colors. The commas preceding thirdColor in the pattern are placeholders for the array items that come before it. By using this approach, you can easily pick out values from any number of slots in the middle of an array without needing to provide variable names for them.\nW\u0026gt; Similar to object destructuring, you must always provide an initializer when using array destructuring with var, let, or const.\nDestructuring Assignment You can use array destructuring in the context of an assignment, but unlike object destructuring, there is no need to wrap the expression in parentheses. For example:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;], firstColor = \u0026#34;black\u0026#34;, secondColor = \u0026#34;purple\u0026#34;; [firstColor, secondColor] = colors; console.log(firstColor); // \u0026#34;red\u0026#34; console.log(secondColor); // \u0026#34;green\u0026#34; The destructured assignment in this code works in a similar manner to the last array destructuring example. The only difference is that firstColor and secondColor have already been defined. Most of the time, that\u0026rsquo;s probably all you\u0026rsquo;ll need to know about array destructuring assignment, but there\u0026rsquo;s a little bit more to it that you will probably find useful.\nArray destructuring assignment has a very unique use case that makes it easier to swap the values of two variables. Value swapping is a common operation in sorting algorithms, and the ECMAScript 5 way of swapping variables involves a third, temporary variable, as in this example:\n// Swapping variables in ECMAScript 5 let a = 1, b = 2, tmp; tmp = a; a = b; b = tmp; console.log(a); // 2 console.log(b); // 1 The intermediate variable tmp is necessary in order to swap the values of a and b. Using array destructuring assignment, however, there\u0026rsquo;s no need for that extra variable. Here\u0026rsquo;s how you can swap variables in ECMAScript 6:\n// Swapping variables in ECMAScript 6 let a = 1, b = 2; [a, b] = [b, a]; console.log(a); // 2 console.log(b); // 1 The array destructuring assignment in this example looks like a mirror image. The left side of the assignment (before the equals sign) is a destructuring pattern just like those in the other array destructuring examples. The right side is an array literal that is temporarily created for the swap. The destructuring happens on the temporary array, which has the values of b and a copied into its first and second positions. The effect is that the variables have swapped values.\nW\u0026gt; Like object destructuring assignment, an error is thrown when the right side of an array destructured assignment expression evaluates to null or undefined.\nDefault Values Array destructuring assignment allows you to specify a default value for any position in the array, too. The default value is used when the property at the given position either doesn\u0026rsquo;t exist or has the value undefined. For example:\nlet colors = [\u0026#34;red\u0026#34;]; let [firstColor, secondColor = \u0026#34;green\u0026#34;] = colors; console.log(firstColor); // \u0026#34;red\u0026#34; console.log(secondColor); // \u0026#34;green\u0026#34; In this code, the colors array has only one item, so there is nothing for secondColor to match. Since there is a default value, secondColor is set to \u0026quot;green\u0026quot; instead of undefined.\nNested Destructuring You can destructure nested arrays in a manner similar to destructuring nested objects. By inserting another array pattern into the overall pattern, the destructuring will descend into a nested array, like this:\nlet colors = [\u0026#34;red\u0026#34;, [\u0026#34;green\u0026#34;, \u0026#34;lightgreen\u0026#34;], \u0026#34;blue\u0026#34;]; // later let [firstColor, [secondColor]] = colors; console.log(firstColor); // \u0026#34;red\u0026#34; console.log(secondColor); // \u0026#34;green\u0026#34; Here, the secondColor variable refers to the \u0026quot;green\u0026quot; value inside the colors array. That item is contained within a second array, so the extra square brackets around secondColor in the destructuring pattern are necessary. As with objects, you can nest arrays arbitrarily deep.\nRest Items Chapter 3 introduced rest parameters for functions, and array destructuring has a similar concept called rest items. Rest items use the ... syntax to assign the remaining items in an array to a particular variable. Here\u0026rsquo;s an example:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let [firstColor, ...restColors] = colors; console.log(firstColor); // \u0026#34;red\u0026#34; console.log(restColors.length); // 2 console.log(restColors[0]); // \u0026#34;green\u0026#34; console.log(restColors[1]); // \u0026#34;blue\u0026#34; The first item in colors is assigned to firstColor, and the rest are assigned into a new restColors array. The restColors array, therefore, has two items: \u0026quot;green\u0026quot; and \u0026quot;blue\u0026quot;. Rest items are useful for extracting certain items from an array and keeping the rest available, but there\u0026rsquo;s another helpful use.\nA glaring omission from JavaScript arrays is the ability to easily create a clone. In ECMAScript 5, developers frequently used the concat() method as an easy way to clone an array. For example:\n// cloning an array in ECMAScript 5 var colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; var clonedColors = colors.concat(); console.log(clonedColors); //\u0026#34;[red,green,blue]\u0026#34; While the concat() method is intended to concatenate two arrays together, calling it without an argument returns a clone of the array. In ECMAScript 6, you can use rest items to achieve the same thing through syntax intended to function that way. It works like this:\n// cloning an array in ECMAScript 6 let colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let [...clonedColors] = colors; console.log(clonedColors); //\u0026#34;[red,green,blue]\u0026#34; In this example, rest items are used to copy values from the colors array into the clonedColors array. While it\u0026rsquo;s a matter of perception as to whether this technique makes the developer\u0026rsquo;s intent clearer than using the concat() method, this is a useful ability to be aware of.\nW\u0026gt; Rest items must be the last entry in the destructured array and cannot be followed by a comma. Including a comma after rest items is a syntax error.\nMixed Destructuring Object and array destructuring can be used together to create more complex expressions. In doing so, you are able to extract just the pieces of information you want from any mixture of objects and arrays. For example:\nlet node = { type: \u0026#34;Identifier\u0026#34;, name: \u0026#34;foo\u0026#34;, loc: { start: { line: 1, column: 1 }, end: { line: 1, column: 4 } }, range: [0, 3] }; let { loc: { start }, range: [startIndex] } = node; console.log(start.line); // 1 console.log(start.column); // 1 console.log(startIndex); // 0 This code extracts node.loc.start and node.range[0] into start and startIndex, respectively. Keep in mind that loc: and range: in the destructured pattern are just locations that correspond to properties in the node object. There is no part of node that cannot be extracted using destructuring when you use a mix of object and array destructuring. This approach is particularly useful for pulling values out of JSON configuration structures without navigating the entire structure.\nDestructured Parameters Destructuring has one more particularly helpful use case, and that is when passing function arguments. When a JavaScript function takes a large number of optional parameters, one common pattern is to create an options object whose properties specify the additional parameters, like this:\n// properties on options represent additional parameters function setCookie(name, value, options) { options = options || {}; let secure = options.secure, path = options.path, domain = options.domain, expires = options.expires; // code to set the cookie } // third argument maps to options setCookie(\u0026#34;type\u0026#34;, \u0026#34;js\u0026#34;, { secure: true, expires: 60000 });\rMany JavaScript libraries contain setCookie() functions that look similar to this one. In this function, the name and value arguments are required, but secure, path, domain, and expires are not. And since there is no priority order for the other data, it\u0026rsquo;s efficient to just have an options object with named properties, rather than list extra named parameters. This approach works, but now you can\u0026rsquo;t tell what input the function expects just by looking at the function definition; you need to read the function body.\nDestructured parameters offer an alternative that makes it clearer what arguments a function expects. A destructured parameter uses an object or array destructuring pattern in place of a named parameter. To see this in action, look at this rewritten version of the setCookie() function from the last example:\nfunction setCookie(name, value, { secure, path, domain, expires }) { // code to set the cookie } setCookie(\u0026#34;type\u0026#34;, \u0026#34;js\u0026#34;, { secure: true, expires: 60000 });\rThis function behaves similarly to the previous example, but now, the third argument uses destructuring to pull out the necessary data. The parameters outside the destructured parameter are clearly expected, and at the same time, it\u0026rsquo;s clear to someone using setCookie() what options are available in terms of extra arguments. And of course, if the third argument is required, the values it should contain are crystal clear. The destructured parameters also act like regular parameters in that they are set to undefined if they are not passed.\nA\u0026gt;Destructured parameters have all of the capabilities of destructuring that you\u0026rsquo;ve learned so far in this chapter. You can use default values, mix object and array patterns, and use variable names that differ from the properties you\u0026rsquo;re reading from.\nDestructured Parameters are Required One quirk of using destructured parameters is that, by default, an error is thrown when they are not provided in a function call. For instance, this call to the setCookie() function in the last example throws an error:\n// Error! setCookie(\u0026#34;type\u0026#34;, \u0026#34;js\u0026#34;);\rThe third argument is missing, and so it evaluates to undefined as expected. This causes an error because destructured parameters are really just a shorthand for destructured declaration. When the setCookie() function is called, the JavaScript engine actually does this:\nfunction setCookie(name, value, options) { let { secure, path, domain, expires } = options; // code to set the cookie }\rSince destructuring throws an error when the right side expression evaluates to null or undefined, the same is true when the third argument isn\u0026rsquo;t passed to the setCookie() function.\nIf you want the destructured parameter to be required, then this behavior isn\u0026rsquo;t all that troubling. But if you want the destructured parameter to be optional, you can work around this behavior by providing a default value for the destructured parameter, like this:\nfunction setCookie(name, value, { secure, path, domain, expires } = {}) { // ... }\rThis example provides a new object as the default value for the third parameter. Providing a default value for the destructured parameter means that the secure, path, domain, and expires will all be undefined if the third argument to setCookie() isn\u0026rsquo;t provided, and no error will be thrown.\nDefault Values for Destructured Parameters You can specify destructured default values for destructured parameters just as you would in destructured assignment. Just add the equals sign after the parameter and specify the default value. For example:\nfunction setCookie(name, value, { secure = false, path = \u0026#34;/\u0026#34;, domain = \u0026#34;example.com\u0026#34;, expires = new Date(Date.now() + 360000000) } = {}) { // ... }\rEach property in the destructured parameter has a default value in this code, so you can avoid checking to see if a given property has been included in order to use the correct value. Also, the entire destructured parameter has a default value of an empty object, making the parameter optional. This does make the function declaration look a bit more complicated than usual, but that\u0026rsquo;s a small price to pay for ensuring each argument has a usable value.\nSummary Destructuring makes working with objects and arrays in JavaScript easier. Using the familiar object literal and array literal syntax, you can pick data structures apart to get at just the information you\u0026rsquo;re interested in. Object patterns allow you to extract data from objects while array patterns let you extract data from arrays.\nBoth object and array destructuring can specify default values for any property or item that is undefined and both throw errors when the right side of an assignment evaluates to null or undefined. You can also navigate deeply nested data structures with object and array destructuring, descending to any arbitrary depth.\nDestructuring declarations use var, let, or const to create variables and must always have an initializer. Destructuring assignments are used in place of other assignments and allow you to destructure into object properties and already-existing variables.\nDestructured parameters use the destructuring syntax to make \u0026ldquo;options\u0026rdquo; objects more transparent when used as function parameters. The actual data you\u0026rsquo;re interested in can be listed out along with other named parameters. Destructured parameters can be array patterns, object patterns, or a mixture, and you can use all of the features of destructuring.\n","date":"0001-01-01","id":32,"permalink":"/es6/05-destructuring/","summary":"\u003cp\u003eObject and array literals are two of the most frequently used notations in JavaScript, and thanks to the popular JSON data format, they\u0026rsquo;ve become a particularly important part of the language. It\u0026rsquo;s quite common to define objects and arrays, and then systematically pull out relevant pieces of information from those structures. ECMAScript 6 simplifies this task by adding \u003cem\u003edestructuring\u003c/em\u003e, which is the process of breaking a data structure down into smaller parts. This chapter shows you how to harness destructuring for both objects and arrays.\u003c/p\u003e","tags":[],"title":"05 Destructuring for Easier Data Access"},{"content":"Symbols are a primitive type introduced in ECMAScript 6, joining the existing primitive types: strings, numbers, booleans, null, and undefined. Symbols began as a way to create private object members, a feature JavaScript developers wanted for a long time. Before symbols, any property with a string name was easy to access regardless of the obscurity of the name, and the \u0026ldquo;private names\u0026rdquo; feature was meant to let developers create non-string property names. That way, normal techniques for detecting these private names wouldn\u0026rsquo;t work.\nThe private names proposal eventually evolved into ECMAScript 6 symbols, and this chapter will teach you how to use symbols effectively. While the implementation details remained the same (that is, they added non-string values for property names), the goal of privacy was dropped. Instead, symbol properties are categorized separately from other object properties.\nCreating Symbols Symbols are unique among JavaScript primitives in that they don\u0026rsquo;t have a literal form, like true for booleans or 42 for numbers. You can create a symbol by using the global Symbol function, as in this example:\nlet firstName = Symbol(); let person = {}; person[firstName] = \u0026#34;Nicholas\u0026#34;; console.log(person[firstName]); // \u0026#34;Nicholas\u0026#34; Here, the symbol firstName is created and used to assign a new property on the person object. That symbol must be used each time you want to access that same property. Naming the symbol variable appropriately is a good idea, so you can easily tell what the symbol represents.\nW\u0026gt; Because symbols are primitive values, calling new Symbol() throws an error when called. You can create an instance of Symbol via new Object(yourSymbol) as well, but it\u0026rsquo;s unclear when this capability would be useful.\nThe Symbol function also accepts an optional argument that is the description of the symbol. The description itself cannot be used to access the property, but is used for debugging purposes. For example:\nlet firstName = Symbol(\u0026#34;first name\u0026#34;); let person = {}; person[firstName] = \u0026#34;Nicholas\u0026#34;; console.log(\u0026#34;first name\u0026#34; in person); // false console.log(person[firstName]); // \u0026#34;Nicholas\u0026#34; console.log(firstName); // \u0026#34;Symbol(first name)\u0026#34; A symbol\u0026rsquo;s description is stored internally in the [[Description]] property. This property is read whenever the symbol\u0026rsquo;s toString() method is called either explicitly or implicitly. The firstName symbol\u0026rsquo;s toString() method is called implictly by console.log() in this example, so the description gets printed to the log. It is not otherwise possible to access [[Description]] directly from code. I recommended always providing a description to make both reading and debugging symbols easier.\nA\u0026gt; ### Identifying Symbols A\u0026gt; A\u0026gt;Since symbols are primitive values, you can use the typeof operator to determine if a variable contains a symbol. ECMAScript 6 extends typeof to return \u0026quot;symbol\u0026quot; when used on a symbol. For example: A\u0026gt; A\u0026gt;js A\u0026gt;let symbol = Symbol(\u0026quot;test symbol\u0026quot;); A\u0026gt;console.log(typeof symbol); // \u0026quot;symbol\u0026quot; A\u0026gt; A\u0026gt; A\u0026gt;While there are other indirect ways of determining whether a variable is a symbol, the typeof operator is the most accurate and preferred technique.\nUsing Symbols You can use symbols anywhere you\u0026rsquo;d use a computed property name. You\u0026rsquo;ve already seen bracket notation used with symbols in this chapter, but you can use symbols in computed object literal property names as well as with Object.defineProperty() and Object.defineProperties() calls, such as:\nlet firstName = Symbol(\u0026#34;first name\u0026#34;); // use a computed object literal property let person = { [firstName]: \u0026#34;Nicholas\u0026#34; }; // make the property read only Object.defineProperty(person, firstName, { writable: false }); let lastName = Symbol(\u0026#34;last name\u0026#34;); Object.defineProperties(person, { [lastName]: { value: \u0026#34;Zakas\u0026#34;, writable: false } }); console.log(person[firstName]); // \u0026#34;Nicholas\u0026#34; console.log(person[lastName]); // \u0026#34;Zakas\u0026#34; This example first uses a computed object literal property to create the firstName symbol property. The following line then sets the property to be read-only. Later, a read-only lastName symbol property is created using the Object.defineProperties() method. A computed object literal property is used once again, but this time, it\u0026rsquo;s part of the second argument to the Object.defineProperties() call.\nWhile symbols can be used in any place that computed property names are allowed, you\u0026rsquo;ll need to have a system for sharing these symbols between different pieces of code in order to use them effectively.\nSharing Symbols You may find that you want different parts of your code to use the same symbols. For example, suppose you have two different object types in your application that should use the same symbol property to represent a unique identifier. Keeping track of symbols across files or large codebases can be difficult and error-prone. That\u0026rsquo;s why ECMAScript 6 provides a global symbol registry that you can access at any point in time.\nWhen you want to create a symbol to be shared, use the Symbol.for() method instead of calling the Symbol() method. The Symbol.for() method accepts a single parameter, which is a string identifier for the symbol you want to create. That parameter is also used as the symbol\u0026rsquo;s description. For example:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;); let object = {}; object[uid] = \u0026#34;12345\u0026#34;; console.log(object[uid]); // \u0026#34;12345\u0026#34; console.log(uid); // \u0026#34;Symbol(uid)\u0026#34; The Symbol.for() method first searches the global symbol registry to see if a symbol with the key \u0026quot;uid\u0026quot; exists. If so, the method returns the existing symbol. If no such symbol exists, then a new symbol is created and registered to the global symbol registry using the specified key. The new symbol is then returned. That means subsequent calls to Symbol.for() using the same key will return the same symbol, as follows:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;); let object = { [uid]: \u0026#34;12345\u0026#34; }; console.log(object[uid]); // \u0026#34;12345\u0026#34; console.log(uid); // \u0026#34;Symbol(uid)\u0026#34; let uid2 = Symbol.for(\u0026#34;uid\u0026#34;); console.log(uid === uid2); // true console.log(object[uid2]); // \u0026#34;12345\u0026#34; console.log(uid2); // \u0026#34;Symbol(uid)\u0026#34; In this example, uid and uid2 contain the same symbol and so they can be used interchangeably. The first call to Symbol.for() creates the symbol, and the second call retrieves the symbol from the global symbol registry.\nAnother unique aspect of shared symbols is that you can retrieve the key associated with a symbol in the global symbol registry by calling the Symbol.keyFor() method. For example:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;); console.log(Symbol.keyFor(uid)); // \u0026#34;uid\u0026#34; let uid2 = Symbol.for(\u0026#34;uid\u0026#34;); console.log(Symbol.keyFor(uid2)); // \u0026#34;uid\u0026#34; let uid3 = Symbol(\u0026#34;uid\u0026#34;); console.log(Symbol.keyFor(uid3)); // undefined Notice that both uid and uid2 return the \u0026quot;uid\u0026quot; key. The symbol uid3 doesn\u0026rsquo;t exist in the global symbol registry, so it has no key associated with it and Symbol.keyFor() returns undefined.\nW\u0026gt; The global symbol registry is a shared environment, just like the global scope. That means you can\u0026rsquo;t make assumptions about what is or is not already present in that environment. Use namespacing of symbol keys to reduce the likelihood of naming collisions when using third-party components. For example, jQuery code might use \u0026quot;jquery.\u0026quot; to prefix all keys, for keys like \u0026quot;jquery.element\u0026quot; or similar.\nSymbol Coercion Type coercion is a significant part of JavaScript, and there\u0026rsquo;s a lot of flexibility in the language\u0026rsquo;s ability to coerce one data type into another. Symbols, however, are quite inflexible when it comes to coercion because other types lack a logical equivalent to a symbol. Specifically, symbols cannot be coerced into strings or numbers so that they cannot accidentally be used as properties that would otherwise be expected to behave as symbols.\nThe examples in this chapter have used console.log() to indicate the output for symbols, and that works because console.log() calls String() on symbols to create useful output. You can use String() directly to get the same result. For instance:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;), desc = String(uid); console.log(desc); // \u0026#34;Symbol(uid)\u0026#34; The String() function calls uid.toString() and the symbol\u0026rsquo;s string description is returned. If you try to concatenate the symbol directly with a string, however, an error will be thrown:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;), desc = uid + \u0026#34;\u0026#34;; // error! Concatenating uid with an empty string requires that uid first be coerced into a string. An error is thrown when the coercion is detected, preventing its use in this manner.\nSimilarly, you cannot coerce a symbol to a number. All mathematical operators cause an error when applied to a symbol. For example:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;), sum = uid / 1; // error! This example attempts to divide the symbol by 1, which causes an error. Errors are thrown regardless of the mathematical operator used (logical operators do not throw an error because all symbols are considered equivalent to true, just like any other non-empty value in JavaScript).\nRetrieving Symbol Properties The Object.keys() and Object.getOwnPropertyNames() methods can retrieve all property names in an object. The former method returns all enumerable property names, and the latter returns all properties regardless of enumerability. Neither method returns symbol properties, however, to preserve their ECMAScript 5 functionality. Instead, the Object.getOwnPropertySymbols() method was added in ECMAScript 6 to allow you to retrieve property symbols from an object.\nThe return value of Object.getOwnPropertySymbols() is an array of own property symbols. For example:\nlet uid = Symbol.for(\u0026#34;uid\u0026#34;); let object = { [uid]: \u0026#34;12345\u0026#34; }; let symbols = Object.getOwnPropertySymbols(object); console.log(symbols.length); // 1 console.log(symbols[0]); // \u0026#34;Symbol(uid)\u0026#34; console.log(object[symbols[0]]); // \u0026#34;12345\u0026#34; In this code, object has a single symbol property called uid. The array returned from Object.getOwnPropertySymbols() is an array containing just that symbol.\nAll objects start with zero own symbol properties, but objects can inherit symbol properties from their prototypes. ECMAScript 6 predefines several such properties, implemented using what are called well-known symbols.\nExposing Internal Operations with Well-Known Symbols A central theme for ECMAScript 5 was exposing and defining some of the \u0026ldquo;magic\u0026rdquo; parts of JavaScript, the parts that developers couldn\u0026rsquo;t emulate at the time. ECMAScript 6 carries on that tradition by exposing even more of the previously internal logic of the language, primarily by using symbol prototype properties to define the basic behavior of certain objects.\nECMAScript 6 has predefined symbols called well-known symbols that represent common behaviors in JavaScript that were previously considered internal-only operations. Each well-known symbol is represented by a property on the Symbol object, such as Symbol.create.\nThe well-known symbols are:\nSymbol.hasInstance - A method used by instanceof to determine an object\u0026rsquo;s inheritance. Symbol.isConcatSpreadable - A Boolean value indicating that Array.prototype.concat() should flatten the collection\u0026rsquo;s elements if the collection is passed as a parameter to Array.prototype.concat(). Symbol.iterator - A method that returns an iterator. (Iterators are covered in Chapter 8.) Symbol.match - A method used by String.prototype.match() to compare strings. Symbol.replace - A method used by String.prototype.replace() to replace substrings. Symbol.search - A method used by String.prototype.search() to locate substrings. Symbol.species - The constructor for making derived objects. (Derived objects are covered in Chapter 9.) Symbol.split - A method used by String.prototype.split() to split up strings. Symbol.toPrimitive - A method that returns a primitive value representation of an object. Symbol.toStringTag - A string used by Object.prototype.toString() to create an object description. Symbol.unscopables - An object whose properties are the names of object properties that should not be included in a with statement. Some commonly used well-known symbols are discussed in the following sections, while others are discussed throughout the rest of the book to keep them in the correct context.\nI\u0026gt; Overwriting a method defined with a well-known symbol changes an ordinary object to an exotic object because this changes some internal default behavior. There is no practical impact to your code as a result, it just changes the way the specification describes the object.\nThe Symbol.hasInstance Property Every function has a Symbol.hasInstance method that determines whether or not a given object is an instance of that function. The method is defined on Function.prototype so that all functions inherit the default behavior for the instanceof property and the method is nonwritable and nonconfigurable as well as nonenumerable, to ensure it doesn\u0026rsquo;t get overwritten by mistake.\nThe Symbol.hasInstance method accepts a single argument: the value to check. It returns true if the value passed is an instance of the function. To understand how Symbol.hasInstance works, consider the following code:\nobj instanceof Array;\rThis code is equivalent to:\nArray[Symbol.hasInstance](obj);\rECMAScript 6 essentially redefined the instanceof operator as shorthand syntax for this method call. And now that there\u0026rsquo;s a method call involved, you can actually change how instanceof works.\nFor instance, suppose you want to define a function that claims no object as an instance. You can do so by hardcoding the return value of Symbol.hasInstance to false, such as:\nfunction MyObject() { // ... } Object.defineProperty(MyObject, Symbol.hasInstance, { value: function (v) { return false; } }); let obj = new MyObject(); console.log(obj instanceof MyObject); // false You must use Object.defineProperty() to overwrite a nonwritable property, so this example uses that method to overwrite the Symbol.hasInstance method with a new function. The new function always returns false, so even though obj is actually an instance of the MyObject class, the instanceof operator returns false after the Object.defineProperty() call.\nOf course, you can also inspect the value and decide whether or not a value should be considered an instance based on any arbitrary condition. For instance, maybe numbers with values between 1 and 100 are to be considered instances of a special number type. To achieve that behavior, you might write code like this:\nfunction SpecialNumber() { // empty } Object.defineProperty(SpecialNumber, Symbol.hasInstance, { value: function (v) { return v instanceof Number \u0026amp;\u0026amp; v \u0026gt;= 1 \u0026amp;\u0026amp; v \u0026lt;= 100; } }); let two = new Number(2), zero = new Number(0); console.log(two instanceof SpecialNumber); // true console.log(zero instanceof SpecialNumber); // false This code defines a Symbol.hasInstance method that returns true if the value is an instance of Number and also has a value between 1 and 100. Thus, SpecialNumber will claim two as an instance even though there is no directly defined relationship between the SpecialNumber function and the two variable. Note that the left operand to instanceof must be an object to trigger the Symbol.hasInstance call, as nonobjects cause instanceof to simply return false all the time.\nW\u0026gt; You can also overwrite the default Symbol.hasInstance property for all builtin functions such as the Date and Error functions. This isn\u0026rsquo;t recommended, however, as the effects on your code can be unexpected and confusing. It\u0026rsquo;s a good idea to only overwrite Symbol.hasInstance on your own functions and only when necessary.\nThe Symbol.isConcatSpreadable Symbol JavaScript arrays have a concat() method designed to concatenate two arrays together. Here\u0026rsquo;s how that method is used:\nlet colors1 = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;], colors2 = colors1.concat([\u0026#34;blue\u0026#34;, \u0026#34;black\u0026#34;]); console.log(colors2.length); // 4 console.log(colors2); // [\u0026#34;red\u0026#34;,\u0026#34;green\u0026#34;,\u0026#34;blue\u0026#34;,\u0026#34;black\u0026#34;] This code concatenates a new array to the end of colors1 and creates colors2, a single array with all items from both arrays. However, the concat() method can also accept nonarray arguments and, in that case, those arguments are simply added to the end of the array. For example:\nlet colors1 = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;], colors2 = colors1.concat([\u0026#34;blue\u0026#34;, \u0026#34;black\u0026#34;], \u0026#34;brown\u0026#34;); console.log(colors2.length); // 5 console.log(colors2); // [\u0026#34;red\u0026#34;,\u0026#34;green\u0026#34;,\u0026#34;blue\u0026#34;,\u0026#34;black\u0026#34;,\u0026#34;brown\u0026#34;] Here, the extra argument \u0026quot;brown\u0026quot; is passed to concat() and it becomes the fifth item in the colors2 array. Why is an array argument treated differently than a string argument? The JavaScript specification says that arrays are automatically split into their individual items and all other types are not. Prior to ECMAScript 6, there was no way to adjust this behavior.\nThe Symbol.isConcatSpreadable property is a boolean value indicating that an object has a length property and numeric keys, and that its numeric property values should be added individually to the result of a concat() call. Unlike other well-known symbols, this symbol property doesn\u0026rsquo;t appear on any standard objects by default. Instead, the symbol is available as a way to augment how concat() works on certain types of objects, effectively short-circuiting the default behavior. You can define any type to behave like arrays do in a concat() call, like this:\nlet collection = { 0: \u0026#34;Hello\u0026#34;, 1: \u0026#34;world\u0026#34;, length: 2, [Symbol.isConcatSpreadable]: true }; let messages = [\u0026#34;Hi\u0026#34;].concat(collection); console.log(messages.length); // 3 console.log(messages); // [\u0026#34;Hi\u0026#34;,\u0026#34;Hello\u0026#34;,\u0026#34;world\u0026#34;] The collection object in this example is set up to look like an array: it has a length property and two numeric keys. The Symbol.isConcatSpreadable property is set to true to indicate that the property values should be added as individual items to an array. When collection is passed to the concat() method, the resulting array has \u0026quot;Hello\u0026quot; and \u0026quot;world\u0026quot; as separate items after the \u0026quot;Hi\u0026quot; element.\nI\u0026gt; You can also set Symbol.isConcatSpreadable to false on array subclasses to prevent items from being separated by concat() calls. Subclassing is discussed in Chapter 8.\nThe Symbol.match, Symbol.replace, Symbol.search, and Symbol.split Symbols Strings and regular expressions have always had a close relationship in JavaScript. The string type, in particular, has several methods that accept regular expressions as arguments:\nmatch(regex) - Determines whether the given string matches a regular expression replace(regex, replacement) - Replaces regular expression matches with a replacement search(regex) - Locates a regular expression match inside the string split(regex) - Splits a string into an array on a regular expression match Prior to ECMAScript 6, the way these methods interacted with regular expressions was hidden from developers, leaving no way to mimic regular expressions using developer-defined objects. ECMAScript 6 defines four symbols that correspond to these four methods, effectively outsourcing the native behavior to the RegExp builtin object.\nThe Symbol.match, Symbol.replace, Symbol.search, and Symbol.split symbols represent methods on the regular expression argument that should be called on the first argument to the match() method, the replace() method, the search() method, and the split() method, respectively. The four symbol properties are defined on RegExp.prototype as the default implementation that the string methods should use.\nKnowing this, you can create an object to use with the string methods in a way that is similar to regular expressions. To do, you can use the following symbol functions in code:\nSymbol.match - A function that accepts a string argument and returns an array of matches, or null if no match is found. Symbol.replace - A function that accepts a string argument and a replacement string, and returns a string. Symbol.search - A function that accepts a string argument and returns the numeric index of the match, or -1 if no match is found. Symbol.split - A function that accepts a string argument and returns an array containing pieces of the string split on the match. The ability to define these properties on an object allows you to create objects that implement pattern matching without regular expressions and use them in methods that expect regular expressions. Here\u0026rsquo;s an example that shows these symbols in action:\n// effectively equivalent to /^.{10}$/ let hasLengthOf10 = { [Symbol.match]: function (value) { return value.length === 10 ? [value] : null; }, [Symbol.replace]: function (value, replacement) { return value.length === 10 ? replacement : value; }, [Symbol.search]: function (value) { return value.length === 10 ? 0 : -1; }, [Symbol.split]: function (value) { return value.length === 10 ? [\u0026#34;\u0026#34;, \u0026#34;\u0026#34;] : [value]; } }; let message1 = \u0026#34;Hello world\u0026#34;, // 11 characters message2 = \u0026#34;Hello John\u0026#34;; // 10 characters let match1 = message1.match(hasLengthOf10), match2 = message2.match(hasLengthOf10); console.log(match1); // null console.log(match2); // [\u0026#34;Hello John\u0026#34;] let replace1 = message1.replace(hasLengthOf10, \u0026#34;Howdy!\u0026#34;), replace2 = message2.replace(hasLengthOf10, \u0026#34;Howdy!\u0026#34;); console.log(replace1); // \u0026#34;Hello world\u0026#34; console.log(replace2); // \u0026#34;Howdy!\u0026#34; let search1 = message1.search(hasLengthOf10), search2 = message2.search(hasLengthOf10); console.log(search1); // -1 console.log(search2); // 0 let split1 = message1.split(hasLengthOf10), split2 = message2.split(hasLengthOf10); console.log(split1); // [\u0026#34;Hello world\u0026#34;] console.log(split2); // [\u0026#34;\u0026#34;, \u0026#34;\u0026#34;] The hasLengthOf10 object is intended to work like a regular expression that matches whenever the string length is exactly 10. Each of the four methods on hasLengthOf10 is implemented using the appropriate symbol, and then the corresponding methods on two strings are called. The first string, message1, has 11 characters and so it will not match; the second string, message2, has 10 characters and so it will match. Despite not being a regular expression, hasLengthOf10 is passed to each string method and used correctly due to the additional methods.\nWhile this is a simple example, the ability to perform more complex matches than are currently possible with regular expressions opens up a lot of possibilities for custom pattern matchers.\nThe Symbol.toPrimitive Method JavaScript frequently attempts to convert objects into primitive values implicitly when certain operations are applied. For instance, when you compare a string to an object using the double equals (==) operator, the object is converted into a primitive value before comparing. Exactly what primitive value should be used was previously an internal operation, but ECMAScript 6 exposes that value (making it changeable) through the Symbol.toPrimitive method.\nThe Symbol.toPrimitive method is defined on the prototype of each standard type and prescribes what should happen when the object is converted into a primitive. When a primitive conversion is needed, Symbol.toPrimitive is called with a single argument, referred to as hint in the specification. The hint argument is one of three string values. If hint is \u0026quot;number\u0026quot; then Symbol.toPrimitive should return a number. If hint is \u0026quot;string\u0026quot; then a string should be returned, and if it\u0026rsquo;s \u0026quot;default\u0026quot; then the operation has no preference as to the type.\nFor most standard objects, number mode has the following behaviors, in order by priority:\nCall the valueOf() method, and if the result is a primitive value, return it. Otherwise, call the toString() method, and if the result is a primitive value, return it. Otherwise, throw an error. Similarly, for most standard objects, the behaviors of string mode have the following priority:\nCall the toString() method, and if the result is a primitive value, return it. Otherwise, call the valueOf() method, and if the result is a primitive value, return it. Otherwise, throw an error. In many cases, standard objects treat default mode as equivalent to number mode (except for Date, which treats default mode as equivalent to string mode). By defining an Symbol.toPrimitive method, you can override these default coercion behaviors.\nI\u0026gt; Default mode is only used for the == operator, the + operator, and when passing a single argument to the Date constructor. Most operations use string or number mode.\nTo override the default conversion behaviors, use Symbol.toPrimitive and assign a function as its value. For example:\nfunction Temperature(degrees) { this.degrees = degrees; } Temperature.prototype[Symbol.toPrimitive] = function (hint) { switch (hint) { case \u0026#34;string\u0026#34;: return this.degrees + \u0026#34;\\u00b0\u0026#34;; // degrees symbol case \u0026#34;number\u0026#34;: return this.degrees; case \u0026#34;default\u0026#34;: return this.degrees + \u0026#34; degrees\u0026#34;; } }; let freezing = new Temperature(32); console.log(freezing + \u0026#34;!\u0026#34;); // \u0026#34;32 degrees!\u0026#34; console.log(freezing / 2); // 16 console.log(String(freezing)); // \u0026#34;32°\u0026#34; This script defines a Temperature constructor and overrides the default Symbol.toPrimitive method on the prototype. A different value is returned depending on whether the hint argument indicates string, number, or default mode (the hint argument is filled in by the JavaScript engine). In string mode, the Symbol.toPrimitive method returns the temperature with the Unicode degrees symbol. In number mode, it returns just the numeric value, and in default mode, it appends the word \u0026ldquo;degrees\u0026rdquo; after the number.\nEach of the log statements triggers a different hint argument value. The + operator triggers default mode by setting hint to \u0026quot;default\u0026quot;, the / operator triggers number mode by setting hint to \u0026quot;number\u0026quot;, and the String() function triggers string mode by setting hint to \u0026quot;string\u0026quot;. Returning different values for all three modes is possible, it\u0026rsquo;s much more common to set the default mode to be the same as string or number mode.\nThe Symbol.toStringTag Symbol One of the most interesting problems in JavaScript has been the availability of multiple global execution environments. This occurs in web browsers when a page includes an iframe, as the page and the iframe each have their own execution environments. In most cases, this isn\u0026rsquo;t a problem, as data can be passed back and forth between the environments with little cause for concern. The problem arises when trying to identify what type of object you\u0026rsquo;re dealing with after the object has been passed between different environments.\nThe canonical example of this issue is passing an array from an iframe into the containing page or vice-versa. In ECMAScript 6 terminology, the iframe and the containing page each represent a different realm which is an execution environment for JavaScript. Each realm has its own global scope with its own copy of global objects. In whichever realm the array is created, it is definitely an array. When it\u0026rsquo;s passed to a different realm, however, an instanceof Array call returns false because the array was created with a constructor from a different realm and Array represents the constructor in the current realm.\nA Workaround for the Identification Problem Faced with this problem, developers soon found a good way to identify arrays. They discovered that by calling the standard toString() method on the object, a predictable string was always returned. Thus, many JavaScript libraries began including a function like this:\nfunction isArray(value) { return Object.prototype.toString.call(value) === \u0026#34;[object Array]\u0026#34;; } console.log(isArray([])); // true This may look a bit roundabout, but it worked quite well for identifying arrays in all browsers. The toString() method on arrays isn\u0026rsquo;t useful for identifying an object because it returns a string representation of the items the object contains. But the toString() method on Object.prototype had a quirk: it included internally-defined name called [[Class]] in the returned result. Developers could use this method on an object to retrieve what the JavaScript environment thought the object\u0026rsquo;s data type was.\nDevelopers quickly realized that since there was no way to change this behavior, it was possible to use the same approach to distinguish between native objects and those created by developers. The most important case of this was the ECMAScript 5 JSON object.\nPrior to ECMAScript 5, many developers used Douglas Crockford\u0026rsquo;s json2.js, which creates a global JSON object. As browsers started to implement the JSON global object, figuring out whether the global JSON was provided by the JavaScript environment itself or through some other library became necessary. Using the same technique I showed with the isArray() function, many developers created functions like this:\nfunction supportsNativeJSON() { return typeof JSON !== \u0026#34;undefined\u0026#34; \u0026amp;\u0026amp; Object.prototype.toString.call(JSON) === \u0026#34;[object JSON]\u0026#34;; }\rThe same characteristic of Object.prototype that allowed developers to identify arrays across iframe boundaries also provided a way to tell if JSON was the native JSON object or not. A non-native JSON object would return [object Object] while the native version returned [object JSON] instead. This approach became the de facto standard for identifying native objects.\nThe ECMAScript 6 Answer ECMAScript 6 redefines this behavior through the Symbol.toStringTag symbol. This symbol represents a property on each object that defines what value should be produced when Object.prototype.toString.call() is called on it. For an array, the value that function returns is explained by storing \u0026quot;Array\u0026quot; in the Symbol.toStringTag property.\nLikewise, you can define the Symbol.toStringTag value for your own objects:\nfunction Person(name) { this.name = name; } Person.prototype[Symbol.toStringTag] = \u0026#34;Person\u0026#34;; let me = new Person(\u0026#34;Nicholas\u0026#34;); console.log(me.toString()); // \u0026#34;[object Person]\u0026#34; console.log(Object.prototype.toString.call(me)); // \u0026#34;[object Person]\u0026#34; In this example, a Symbol.toStringTag property is defined on Person.prototype to provide the default behavior for creating a string representation. Since Person.prototype inherits the Object.prototype.toString() method, the value returned from Symbol.toStringTag is also used when calling the me.toString() method. However, you can still define your own toString() method that provides a different behavior without affecting the use of the Object.prototype.toString.call() method. Here\u0026rsquo;s how that might look:\nfunction Person(name) { this.name = name; } Person.prototype[Symbol.toStringTag] = \u0026#34;Person\u0026#34;; Person.prototype.toString = function () { return this.name; }; let me = new Person(\u0026#34;Nicholas\u0026#34;); console.log(me.toString()); // \u0026#34;Nicholas\u0026#34; console.log(Object.prototype.toString.call(me)); // \u0026#34;[object Person]\u0026#34; This code defines Person.prototype.toString() to return the value of the name property. Since Person instances no longer inherit the Object.prototype.toString() method, calling me.toString() exhibits a different behavior.\nI\u0026gt; All objects inherit Symbol.toStringTag from Object.prototype unless otherwise specified. The string \u0026quot;Object\u0026quot; is the default property value.\nThere is no restriction on which values can be used for Symbol.toStringTag on developer-defined objects. For example, nothing prevents you from using \u0026quot;Array\u0026quot; as the value of the Symbol.toStringTag property, such as:\nfunction Person(name) { this.name = name; } Person.prototype[Symbol.toStringTag] = \u0026#34;Array\u0026#34;; Person.prototype.toString = function () { return this.name; }; let me = new Person(\u0026#34;Nicholas\u0026#34;); console.log(me.toString()); // \u0026#34;Nicholas\u0026#34; console.log(Object.prototype.toString.call(me)); // \u0026#34;[object Array]\u0026#34; The result of calling Object.prototype.toString() is \u0026quot;[object Array]\u0026quot; in this code, which is the same result you\u0026rsquo;d get from an actual array. This highlights the fact that Object.prototype.toString() is no longer a completely reliable way of identifying an object\u0026rsquo;s type.\nChanging the string tag for native objects is also possible. Just assign to Symbol.toStringTag on the object\u0026rsquo;s prototype, like this:\nArray.prototype[Symbol.toStringTag] = \u0026#34;Magic\u0026#34;; let values = []; console.log(Object.prototype.toString.call(values)); // \u0026#34;[object Magic]\u0026#34; Even though Symbol.toStringTag is overwritten for arrays in this example, the call to Object.prototype.toString() results in \u0026quot;[object Magic]\u0026quot; instead. While I recommended not changing built-in objects in this way, there\u0026rsquo;s nothing in the language that forbids doing so.\nThe Symbol.unscopables Symbol The with statement is one of the most controversial parts of JavaScript. Originally designed to avoid repetitive typing, the with statement later became roundly criticized for making code harder to understand and for negative performance implications as well as being error-prone.\nAs a result, the with statement is not allowed in strict mode; that restriction also affects classes and modules, which are strict mode by default and have no opt-out.\nWhile future code will undoubtedly not use the with statement, ECMAScript 6 still supports with in nonstrict mode for backwards compatibility and, as such, had to find ways to allow code that does use with to continue to work properly.\nTo understand the complexity of this task, consider the following code:\nlet values = [1, 2, 3], colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;], color = \u0026#34;black\u0026#34;; with (colors) { push(color); push(...values); } console.log(colors); // [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;black\u0026#34;, 1, 2, 3] In this example, the two calls to push() inside the with statement are equivalent to colors.push() because the with statement added push as a local binding. The color reference refers to the variable created outside the with statement, as does the values reference.\nBut ECMAScript 6 added a values method to arrays. (The values method is discussed in detail in Chapter 7, \u0026ldquo;Iterators and Generators.\u0026rdquo;) That would mean in an ECMAScript 6 environment, the values reference inside the with statement should refer not to the local variable values, but to the array\u0026rsquo;s values method, which would break the code. This is why the Symbol.unscopables symbol exists.\nThe Symbol.unscopables symbol is used on Array.prototype to indicate which properties shouldn\u0026rsquo;t create bindings inside of a with statement. When present, Symbol.unscopables is an object whose keys are the identifiers to omit from with statement bindings and whose values are true to enforce the block. Here\u0026rsquo;s the default Symbol.unscopables property for arrays:\n// built into ECMAScript 6 by default Array.prototype[Symbol.unscopables] = Object.assign(Object.create(null), { copyWithin: true, entries: true, fill: true, find: true, findIndex: true, keys: true, values: true });\rThe Symbol.unscopables object has a null prototype, which is created by the Object.create(null) call, and contains all of the new array methods in ECMAScript 6. (These methods are covered in detail in Chapter 7, \u0026ldquo;Iterators and Generators,\u0026rdquo; and Chapter 9, \u0026ldquo;Arrays.\u0026rdquo;) Bindings for these methods are not created inside a with statement, allowing old code to continue working without any problem.\nIn general, you shouldn\u0026rsquo;t need to define Symbol.unscopables for your objects unless you use the with statement and are making changes to an existing object in your code base.\nSummary Symbols are a new type of primitive value in JavaScript and are used to create properties that can\u0026rsquo;t be accessed without referencing the symbol.\nWhile not truly private, these properties are harder to accidentally change or overwrite and are therefore suitable for functionality that needs a level of protection from developers.\nYou can provide descriptions for symbols that allow for easier identification of symbol values. There is a global symbol registry that allows you to use shared symbols in different parts of code by using the same description. In this way, the same symbol can be used for the same reason in multiple places.\nMethods like Object.keys() or Object.getOwnPropertyNames() don\u0026rsquo;t return symbols, so a new method called Object.getOwnPropertySymbols() was added in ECMAScript 6 to allow retrieval of symbol properties. You can still make changes to symbol properties by calling the Object.defineProperty() and Object.defineProperties() methods.\nWell-known symbols define previously internal-only functionality for standard objects and use globally-available symbol constants, such as the Symbol.hasInstance property. These symbols use the prefix Symbol. in the specification and allow developers to modify standard object behavior in a variety of ways.\n","date":"0001-01-01","id":33,"permalink":"/es6/06-symbols/","summary":"\u003cp\u003eSymbols are a primitive type introduced in ECMAScript 6, joining the existing primitive types: strings, numbers, booleans, \u003ccode\u003enull\u003c/code\u003e, and \u003ccode\u003eundefined\u003c/code\u003e. Symbols began as a way to create private object members, a feature JavaScript developers wanted for a long time. Before symbols, any property with a string name was easy to access regardless of the obscurity of the name, and the \u0026ldquo;private names\u0026rdquo; feature was meant to let developers create non-string property names. That way, normal techniques for detecting these private names wouldn\u0026rsquo;t work.\u003c/p\u003e","tags":[],"title":"06 Symbols and Symbol Properties"},{"content":"JavaScript only had one type of collection, represented by the Array type, for most of its history (though some may argue all non-array objects are just collections of key-value pairs, their intended use was, originally quite different from arrays). Arrays are used in JavaScript just like arrays in other languages, but the lack of other collection options meant arrays were often used as queues and stacks, as well. Since arrays only use numeric indices, developers used non-array objects whenever a non-numeric index was necessary. That technique led to custom implementations of sets and maps using non-array objects.\nA set is a list of values that cannot contain duplicates. You typically don\u0026rsquo;t access individual items in a set like you would items in an array; instead, it\u0026rsquo;s much more common to just check a set to see if a value is present. A map is a collection of keys that correspond to specific values. As such, each item in a map stores two pieces of data, and values are retrieved by specifying the key to read from. Maps are frequently used as caches, for storing data to be quickly retrieved later. While ECMAScript 5 didn\u0026rsquo;t formally have sets and maps, developers worked around this limitation using non-array objects, too.\nECMAScript 6 added sets and maps to JavaScript, and this chapter discusses everything you need to know about these two collection types.\nFirst, I will discuss the workarounds developers used to implement sets and maps before ECMAScript 6, and why those implementations were problematic. After that important background information, I will cover how sets and maps work in ECMAScript 6.\nSets and Maps in ECMAScript 5 In ECMAScript 5, developers mimicked sets and maps by using object properties, like this:\nlet set = Object.create(null); set.foo = true; // checking for existence if (set.foo) { // do something }\rThe set variable in this example is an object with a null prototype, ensuring that there are no inherited properties on the object. Using object properties as unique values to be checked is a common approach in ECMAScript 5. When a property is added to the set object, it is set to true so conditional statements (such as the if statement in this example) can easily check whether the value is present.\nThe only real difference between an object used as a set and an object used as a map is the value being stored. For instance, this example uses an object as a map:\nlet map = Object.create(null); map.foo = \u0026#34;bar\u0026#34;; // retrieving a value let value = map.foo; console.log(value); // \u0026#34;bar\u0026#34; This code stores a string value \u0026quot;bar\u0026quot; under the key foo. Unlike sets, maps are mostly used to retrieve information, rather than just checking for the key\u0026rsquo;s existence.\nProblems with Workarounds While using objects as sets and maps works okay in simple situations, the approach can get more complicated once you run into the limitations of object properties. For example, since all object properties must be strings, you must be certain no two keys evaluate to the same string. Consider the following:\nlet map = Object.create(null); map[5] = \u0026#34;foo\u0026#34;; console.log(map[\u0026#34;5\u0026#34;]); // \u0026#34;foo\u0026#34; This example assigns the string value \u0026quot;foo\u0026quot; to a numeric key of 5. Internally, that numeric value is converted to a string, so map[\u0026quot;5\u0026quot;] and map[5] actually reference the same property. That internal conversion can cause problems when you want to use both numbers and strings as keys. Another problem arises when using objects as keys, like this:\nlet map = Object.create(null), key1 = {}, key2 = {}; map[key1] = \u0026#34;foo\u0026#34;; console.log(map[key2]); // \u0026#34;foo\u0026#34; Here, map[key2] and map[key1] reference the same value. The objects key1 and key2 are converted to strings because object properties must be strings. Since \u0026quot;[object Object]\u0026quot; is the default string representation for objects, both key1 and key2 are converted to that string. This can cause errors that may not be obvious because it\u0026rsquo;s logical to assume that different object keys would, in fact, be different.\nThe conversion to the default string representation makes it difficult to use objects as keys. (The same problem exists when trying to use an object as a set.)\nMaps with a key whose value is falsy present their own particular problem, too. A falsy value is automatically converted to false when used in situations where a boolean value is required, such as in the condition of an if statement. This conversion alone isn\u0026rsquo;t a problem\u0026ndash;so long as you\u0026rsquo;re careful as to how you use values. For instance, look at this code:\nlet map = Object.create(null); map.count = 1; // checking for the existence of \u0026#34;count\u0026#34; or a nonzero value? if (map.count) { // ... }\rThis example has some ambiguity as to how map.count should be used. Is the if statement intended to check for the existence of map.count or that the value is nonzero? The code inside the if statement will execute because the value 1 is truthy. However, if map.count is 0, or if map.count doesn\u0026rsquo;t exist, the code inside the if statement would not be executed.\nThese are difficult problems to identify and debug when they occur in large applications, which is a prime reason that ECMAScript 6 adds both sets and maps to the language.\nI\u0026gt; JavaScript has the in operator that returns true if a property exists in an object without reading the value of the object. However, the in operator also searches the prototype of an object, which makes it only safe to use when an object has a null prototype. Even so, many developers still incorrectly use code as in the last example rather than using in.\nSets in ECMAScript 6 ECMAScript 6 adds a Set type that is an ordered list of values without duplicates. Sets allow fast access to the data they contain, adding a more efficient manner of tracking discrete values.\nCreating Sets and Adding Items Sets are created using new Set() and items are added to a set by calling the add() method. You can see how many items are in a set by checking the size property:\nlet set = new Set(); set.add(5); set.add(\u0026#34;5\u0026#34;); console.log(set.size); // 2 Sets do not coerce values to determine whether they are the same. That means a set can contain both the number 5 and the string \u0026quot;5\u0026quot; as two separate items. (The only exception is that -0 and +0 are considered to be the same.) You can also add multiple objects to the set, and those objects will remain distinct:\nlet set = new Set(), key1 = {}, key2 = {}; set.add(key1); set.add(key2); console.log(set.size); // 2 Because key1 and key2 are not converted to strings, they count as two unique items in the set. (Remember, if they were converted to strings, they would both be equal to \u0026quot;[object Object]\u0026quot;.)\nIf the add() method is called more than once with the same value, all calls after the first one are effectively ignored:\nlet set = new Set(); set.add(5); set.add(\u0026#34;5\u0026#34;); set.add(5); // duplicate - this is ignored console.log(set.size); // 2 You can initialize a set using an array, and the Set constructor will ensure that only unique values are used. For instance:\nlet set = new Set([1, 2, 3, 4, 5, 5, 5, 5]); console.log(set.size); // 5 In this example, an array with duplicate values is used to initialize the set. The number 5 only appears once in the set even though it appears four times in the array. This functionality makes converting existing code or JSON structures to use sets easy.\nI\u0026gt; The Set constructor actually accepts any iterable object as an argument. Arrays work because they are iterable by default, as are sets and maps. The Set constructor uses an iterator to extract values from the argument. (Iterables and iterators are discussed in detail in Chapter 8.)\nYou can test which values are in a set using the has() method, like this:\nlet set = new Set(); set.add(5); set.add(\u0026#34;5\u0026#34;); console.log(set.has(5)); // true console.log(set.has(6)); // false Here, set.has(6) would return false because the set doesn\u0026rsquo;t have that value.\nRemoving Values It\u0026rsquo;s also possible to remove values from a set. You can remove single value by using the delete() method, or you can remove all values from the set by calling the clear() method. This code shows both in action:\nlet set = new Set(); set.add(5); set.add(\u0026#34;5\u0026#34;); console.log(set.has(5)); // true set.delete(5); console.log(set.has(5)); // false console.log(set.size); // 1 set.clear(); console.log(set.has(\u0026#34;5\u0026#34;)); // false console.log(set.size); // 0 After the delete() call, only 5 is gone; after the clear() method executes, set is empty.\nAll of this amounts to a very easy mechanism for tracking unique ordered values. However, what if you want to add items to a set and then perform some operation on each item? That\u0026rsquo;s where the forEach() method comes in.\nThe forEach() Method for Sets If you\u0026rsquo;re used to working with arrays, then you may already be familiar with the forEach() method. ECMAScript 5 added forEach() to arrays to make working on each item in an array without setting up a for loop easier. The method proved popular among developers, and so the same method is available on sets and works the same way.\nThe forEach() method is passed a callback function that accepts three arguments:\nThe value from the next position in the set The same value as the first argument The set from which the value is read The strange difference between the set version of forEach() and the array version is that the first and second arguments to the callback function are the same. While this might look like a mistake, there\u0026rsquo;s a good reason for the behavior.\nThe other objects that have forEach() methods (arrays and maps) pass three arguments to their callback functions. The first two arguments for arrays and maps are the value and the key (the numeric index for arrays).\nSets do not have keys, however. The people behind the ECMAScript 6 standard could have made the callback function in the set version of forEach() accept two arguments, but that would have made it different from the other two. Instead, they found a way to keep the callback function the same and accept three arguments: each value in a set is considered to be both the key and the value. As such, the first and second argument are always the same in forEach() on sets to keep this functionality consistent with the other forEach() methods on arrays and maps.\nOther than the difference in arguments, using forEach() is basically the same for a set as it is for an array. Here\u0026rsquo;s some code that shows the method at work:\nlet set = new Set([1, 2]); set.forEach(function (value, key, ownerSet) { console.log(key + \u0026#34; \u0026#34; + value); console.log(ownerSet === set); });\rThis code iterates over each item in the set and outputs the values passed to the forEach() callback function. Each time the callback function executes, key and value are the same, and ownerSet is always equal to set. This code outputs:\n1 1 true 2 2 true\rAlso the same as arrays, you can pass a this value as the second argument to forEach() if you need to use this in your callback function:\nlet set = new Set([1, 2]); let processor = { output(value) { console.log(value); }, process(dataSet) { dataSet.forEach(function (value) { this.output(value); }, this); } }; processor.process(set);\rIn this example, the processor.process() method calls forEach() on the set and passes this as the this value for the callback. That\u0026rsquo;s necessary so this.output() will correctly resolve to the processor.output() method. The forEach() callback function only makes use of the first argument, value, so the others are omitted. You can also use an arrow function to get the same effect without passing the second argument, like this:\nlet set = new Set([1, 2]); let processor = { output(value) { console.log(value); }, process(dataSet) { dataSet.forEach((value) =\u0026gt; this.output(value)); } }; processor.process(set);\rThe arrow function in this example reads this from the containing process() function, and so it should correctly resolve this.output() to a processor.output() call.\nKeep in mind that while sets are great for tracking values and forEach() lets you work on each value sequentially, you can\u0026rsquo;t directly access a value by index like you can with an array. If you need to do so, then the best option is to convert the set into an array.\nConverting a Set to an Array It\u0026rsquo;s easy to convert an array into a set because you can pass the array to the Set constructor. It\u0026rsquo;s also easy to convert a set back into an array using the spread operator. Chapter 3 introduced the spread operator (...) as a way to split items in an array into separate function parameters. You can also use the spread operator to work on iterable objects, such as sets, to convert them into arrays. For example:\nlet set = new Set([1, 2, 3, 3, 3, 4, 5]), array = [...set]; console.log(array); // [1,2,3,4,5] Here, a set is initially loaded with an array that contains duplicates. The set removes the duplicates, and then the items are placed into a new array using the spread operator. The set itself still contains the same items (1, 2, 3, 4, and 5) it received when it was created. They\u0026rsquo;ve just been copied to a new array.\nThis approach is useful when you already have an array and want to create an array without duplicates. For example:\nfunction eliminateDuplicates(items) { return [...new Set(items)]; } let numbers = [1, 2, 3, 3, 3, 4, 5], noDuplicates = eliminateDuplicates(numbers); console.log(noDuplicates); // [1,2,3,4,5] In the eliminateDuplicates() function, the set is just a temporary intermediary used to filter out duplicate values before creating a new array that has no duplicates.\nWeak Sets The Set type could alternately be called a strong set, because of the way it stores object references. An object stored in an instance of Set is effectively the same as storing that object inside a variable. As long as a reference to that Set instance exists, the object cannot be garbage collected to free memory. For example:\nlet set = new Set(), key = {}; set.add(key); console.log(set.size); // 1 // eliminate original reference key = null; console.log(set.size); // 1 // get the original reference back key = [...set][0];\rIn this example, setting key to null clears one reference of the key object, but another remains inside set. You can still retrieve key by converting the set to an array with the spread operator and accessing the first item. That result is fine for most programs, but sometimes, it\u0026rsquo;s better for references in a set to disappear when all other references disappear. For instance, if your JavaScript code is running in a web page and wants to keep track of DOM elements that might be removed by another script, you don\u0026rsquo;t want your code holding onto the last reference to a DOM element. (That situation is called a memory leak.)\nTo alleviate such issues, ECMAScript 6 also includes weak sets, which only store weak object references and cannot store primitive values. A weak reference to an object does not prevent garbage collection if it is the only remaining reference.\nCreating a Weak Set Weak sets are created using the WeakSet constructor and have an add() method, a has() method, and a delete() method. Here\u0026rsquo;s an example that uses all three:\nlet set = new WeakSet(), key = {}; // add the object to the set set.add(key); console.log(set.has(key)); // true set.delete(key); console.log(set.has(key)); // false Using a weak set is a lot like using a regular set. You can add, remove, and check for references in the weak set. You can also seed a weak set with values by passing an iterable to the constructor:\nlet key1 = {}, key2 = {}, set = new WeakSet([key1, key2]); console.log(set.has(key1)); // true console.log(set.has(key2)); // true In this example, an array is passed to the WeakSet constructor. Since this array contains two objects, those objects are added into the weak set. Keep in mind that an error will be thrown if the array contains any non-object values, since WeakSet can\u0026rsquo;t accept primitive values.\nKey Differences Between Set Types The biggest difference between weak sets and regular sets is the weak reference held to the object value. Here\u0026rsquo;s an example that demonstrates that difference:\nlet set = new WeakSet(), key = {}; // add the object to the set set.add(key); console.log(set.has(key)); // true // remove the last strong reference to key, also removes from weak set key = null;\rAfter this code executes, the reference to key in the weak set is no longer accessible. It is not possible to verify its removal because you would need one reference to that object to pass to the has() method. This can make testing weak sets a little confusing, but you can trust that the reference has been properly removed by the JavaScript engine.\nThese examples show that weak sets share some characteristics with regular sets, but there are some key differences. Those are:\nIn a WeakSet instance, the add() method throws an error when passed a non-object (has() and delete() always return false for non-object arguments). Weak sets are not iterables and therefore cannot be used in a for-of loop. Weak sets do not expose any iterators (such as the keys() and values() methods), so there is no way to programmatically determine the contents of a weak set. Weak sets do not have a forEach() method. Weak sets do not have a size property. The seemingly limited functionality of weak sets is necessary in order to properly handle memory. In general, if you only need to track object references, then you should use a weak set instead of a regular set.\nSets give you a new way to handle lists of values, but they aren\u0026rsquo;t useful when you need to associate additional information with those values. That\u0026rsquo;s why ECMAScript 6 also adds maps.\nMaps in ECMAScript 6 The ECMAScript 6 Map type is an ordered list of key-value pairs, where both the key and the value can have any type. Keys equivalence is determined by using the same approach as Set objects, so you can have both a key of 5 and a key of \u0026quot;5\u0026quot; because they are different types. This is quite different from using object properties as keys, as object properties always coerce values into strings.\nYou can add items to maps by calling the set() method and passing it a key and the value to associate with the key. You can later retrieve a value by passing the key to the get() method. For example:\nlet map = new Map(); map.set(\u0026#34;title\u0026#34;, \u0026#34;Understanding ES6\u0026#34;); map.set(\u0026#34;year\u0026#34;, 2016); console.log(map.get(\u0026#34;title\u0026#34;)); // \u0026#34;Understanding ES6\u0026#34; console.log(map.get(\u0026#34;year\u0026#34;)); // 2016 In this example, two key-value pairs are stored. The \u0026quot;title\u0026quot; key stores a string while the \u0026quot;year\u0026quot; key stores a number. The get() method is called later to retrieve the values for both keys. If either key didn\u0026rsquo;t exist in the map, then get() would have returned the special value undefined instead of a value.\nYou can also use objects as keys, which isn\u0026rsquo;t possible when using object properties to create a map in the old workaround approach. Here\u0026rsquo;s an example:\nlet map = new Map(), key1 = {}, key2 = {}; map.set(key1, 5); map.set(key2, 42); console.log(map.get(key1)); // 5 console.log(map.get(key2)); // 42 This code uses the objects key1 and key2 as keys in the map to store two different values. Because these keys are not coerced into another form, each object is considered unique. This allows you to associate additional data with an object without modifying the object itself.\nMap Methods Maps share several methods with sets. That is intentional, and it allows you to interact with maps and sets in similar ways. These three methods are available on both maps and sets:\nhas(key) - Determines if the given key exists in the map delete(key) - Removes the key and its associated value from the map clear() - Removes all keys and values from the map Maps also have a size property that indicates how many key-value pairs it contains. This code uses all three methods and size in different ways:\nlet map = new Map(); map.set(\u0026#34;name\u0026#34;, \u0026#34;Nicholas\u0026#34;); map.set(\u0026#34;age\u0026#34;, 25); console.log(map.size); // 2 console.log(map.has(\u0026#34;name\u0026#34;)); // true console.log(map.get(\u0026#34;name\u0026#34;)); // \u0026#34;Nicholas\u0026#34; console.log(map.has(\u0026#34;age\u0026#34;)); // true console.log(map.get(\u0026#34;age\u0026#34;)); // 25 map.delete(\u0026#34;name\u0026#34;); console.log(map.has(\u0026#34;name\u0026#34;)); // false console.log(map.get(\u0026#34;name\u0026#34;)); // undefined console.log(map.size); // 1 map.clear(); console.log(map.has(\u0026#34;name\u0026#34;)); // false console.log(map.get(\u0026#34;name\u0026#34;)); // undefined console.log(map.has(\u0026#34;age\u0026#34;)); // false console.log(map.get(\u0026#34;age\u0026#34;)); // undefined console.log(map.size); // 0 As with sets, the size property always contains the number of key-value pairs in the map. The Map instance in this example starts with the \u0026quot;name\u0026quot; and \u0026quot;age\u0026quot; keys, so has() returns true when passed either key. After the \u0026quot;name\u0026quot; key is removed by the delete() method, the has() method returns false when passed \u0026quot;name\u0026quot; and the size property indicates one less item. The clear() method then removes the remaining key, as indicated by has() returning false for both keys and size being 0.\nThe clear() method is a fast way to remove a lot of data from a map, but there\u0026rsquo;s also a way to add a lot of data to a map at one time.\nMap Initialization Also similar to sets, you can initialize a map with data by passing an array to the Map constructor. Each item in the array must itself be an array where the first item is the key and the second is that key\u0026rsquo;s corresponding value. The entire map, therefore, is an array of these two-item arrays, for example:\nlet map = new Map([ [\u0026#34;name\u0026#34;, \u0026#34;Nicholas\u0026#34;], [\u0026#34;age\u0026#34;, 25] ]); console.log(map.has(\u0026#34;name\u0026#34;)); // true console.log(map.get(\u0026#34;name\u0026#34;)); // \u0026#34;Nicholas\u0026#34; console.log(map.has(\u0026#34;age\u0026#34;)); // true console.log(map.get(\u0026#34;age\u0026#34;)); // 25 console.log(map.size); // 2 The keys \u0026quot;name\u0026quot; and \u0026quot;age\u0026quot; are added into map through initialization in the constructor. While the array of arrays may look a bit strange, it\u0026rsquo;s necessary to accurately represent keys, as keys can be any data type. Storing the keys in an array is the only way to ensure they aren\u0026rsquo;t coerced into another data type before being stored in the map.\nThe forEach Method on Maps The forEach() method for maps is similar to forEach() for sets and arrays, in that it accepts a callback function that receives three arguments:\nThe value from the next position in the map The key for that value The map from which the value is read These callback arguments more closely match the forEach() behavior in arrays, where the first argument is the value and the second is the key (corresponding to a numeric index in arrays). Here\u0026rsquo;s an example:\nlet map = new Map([ [\u0026#34;name\u0026#34;, \u0026#34;Nicholas\u0026#34;], [\u0026#34;age\u0026#34;, 25] ]); map.forEach(function (value, key, ownerMap) { console.log(key + \u0026#34; \u0026#34; + value); console.log(ownerMap === map); });\rThe forEach() callback function outputs the information that is passed to it. The value and key are output directly, and ownerMap is compared to map to show that the values are equivalent. This outputs:\nname Nicholas true age 25 true\rThe callback passed to forEach() receives each key-value pair in the order in which the pairs were inserted into the map. This behavior differs slightly from calling forEach() on arrays, where the callback receives each item in order of numeric index.\nI\u0026gt; You can also provide a second argument to forEach() to specify the this value inside the callback function. A call like that behaves the same as the set version of the forEach() method.\nWeak Maps Weak maps are to maps what weak sets are to sets: they\u0026rsquo;re a way to store weak object references. In weak maps, every key must be an object (an error is thrown if you try to use a non-object key), and those object references are held weakly so they don\u0026rsquo;t interfere with garbage collection. When there are no references to a weak map key outside a weak map, the key-value pair is removed from the weak map.\nThe most useful place to employ weak maps is when creating an object related to a particular DOM element in a web page. For example, some JavaScript libraries for web pages maintain one custom object for every DOM element referenced in the library, and that mapping is stored in a cache of objects internally.\nThe difficult part of this approach is determining when a DOM element no longer exists in the web page, so that the library can remove its associated object. Otherwise, the library would hold onto the DOM element reference past the reference\u0026rsquo;s usefulness and cause a memory leak. Tracking the DOM elements with a weak map would still allow the library to associate a custom object with every DOM element, and it could automatically destroy any object in the map when that object\u0026rsquo;s DOM element no longer exists.\nI\u0026gt; It\u0026rsquo;s important to note that only weak map keys, and not weak map values, are weak references. An object stored as a weak map value will prevent garbage collection if all other references are removed.\nUsing Weak Maps The ECMAScript 6 WeakMap type is an unordered list of key-value pairs, where a key must be a non-null object and a value can be of any type. The interface for WeakMap is very similar to that of Map in that set() and get() are used to add and retrieve data, respectively:\nlet map = new WeakMap(), element = document.querySelector(\u0026#34;.element\u0026#34;); map.set(element, \u0026#34;Original\u0026#34;); let value = map.get(element); console.log(value); // \u0026#34;Original\u0026#34; // remove the element element.parentNode.removeChild(element); element = null; // the weak map is empty at this point In this example, one key-value pair is stored. The element key is a DOM element used to store a corresponding string value. That value is then retrieved by passing in the DOM element to the get() method. When the DOM element is later removed from the document and the variable referencing it is set to null, the data is also removed from the weak map.\nSimilar to weak sets, there is no way to verify that a weak map is empty, because it doesn\u0026rsquo;t have a size property. Because there are no remaining references to the key, you can\u0026rsquo;t retrieve the value by calling the get() method, either. The weak map has cut off access to the value for that key, and when the garbage collector runs, the memory occupied by the value will be freed.\nWeak Map Initialization To initialize a weak map, pass an array of arrays to the WeakMap constructor. Just like initializing a regular map, each array inside the containing array should have two items, where the first item is the non-null object key and the second item is the value (any data type). For example:\nlet key1 = {}, key2 = {}, map = new WeakMap([ [key1, \u0026#34;Hello\u0026#34;], [key2, 42] ]); console.log(map.has(key1)); // true console.log(map.get(key1)); // \u0026#34;Hello\u0026#34; console.log(map.has(key2)); // true console.log(map.get(key2)); // 42 The objects key1 and key2 are used as keys in the weak map, and the get() and has() methods can access them. An error is thrown if the WeakMap constructor receives a non-object key in any of the key-value pairs.\nWeak Map Methods Weak maps have only two additional methods available to interact with key-value pairs. There is a has() method to determine if a given key exists in the map and a delete() method to remove a specific key-value pair. There is no clear() method because that would require enumerating keys, and like weak sets, that isn\u0026rsquo;t possible with weak maps. This example uses both the has() and delete() methods:\nlet map = new WeakMap(), element = document.querySelector(\u0026#34;.element\u0026#34;); map.set(element, \u0026#34;Original\u0026#34;); console.log(map.has(element)); // true console.log(map.get(element)); // \u0026#34;Original\u0026#34; map.delete(element); console.log(map.has(element)); // false console.log(map.get(element)); // undefined Here, a DOM element is once again used as the key in a weak map. The has() method is useful for checking to see if a reference is currently being used as a key in the weak map. Keep in mind that this only works when you have a non-null reference to a key. The key is forcibly removed from the weak map by the delete() method, at which point has() returns false and get() returns undefined.\nPrivate Object Data While most developers consider the main use case of weak maps to be associated data with DOM elements, there are many other possible uses (and no doubt, some that have yet to be discovered). One practical use of weak maps is to store data that is private to object instances. All object properties are public in ECMAScript 6, and so you need to use some creativity to make data accessible to objects, but not accessible to everything. Consider the following example:\nfunction Person(name) { this._name = name; } Person.prototype.getName = function () { return this._name; };\rThis code uses the common convention of a leading underscore to indicate that a property is considered private and should not be modified outside the object instance. The intent is to use getName() to read this._name and not allow the _name value to change. However, there is nothing standing in the way of someone writing to the _name property, so it can be overwritten either intentionally or accidentally.\nIn ECMAScript 5, it\u0026rsquo;s possible to get close to having truly private data, by creating an object using a pattern such as this:\nvar Person = (function () { var privateData = {}, privateId = 0; function Person(name) { Object.defineProperty(this, \u0026#34;_id\u0026#34;, { value: privateId++ }); privateData[this._id] = { name: name }; } Person.prototype.getName = function () { return privateData[this._id].name; }; return Person; })();\rThis example wraps the definition of Person in an IIFE that contains two private variables, privateData and privateId. The privateData object stores private information for each instance while privateId is used to generate a unique ID for each instance. When the Person constructor is called, a nonenumerable, nonconfigurable, and nonwritable _id property is added.\nThen, an entry is made into the privateData object that corresponds to the ID for the object instance; that\u0026rsquo;s where the name is stored. Later, in the getName() function, the name can be retrieved by using this._id as the key into privateData. Because privateData is not accessible outside of the IIFE, the actual data is safe, even though this._id is exposed publicly.\nThe big problem with this approach is that the data in privateData never disappears because there is no way to know when an object instance is destroyed; the privateData object will always contain extra data. This problem can be solved by using a weak map instead, as follows:\nlet Person = (function () { let privateData = new WeakMap(); function Person(name) { privateData.set(this, { name: name }); } Person.prototype.getName = function () { return privateData.get(this).name; }; return Person; })();\rThis version of the Person example uses a weak map for the private data instead of an object. Because the Person object instance itself can be used as a key, there\u0026rsquo;s no need to keep track of a separate ID. When the Person constructor is called, a new entry is made into the weak map with a key of this and a value of an object containing private information. In this case, that value is an object containing only name. The getName() function retrieves that private information by passing this to the privateData.get() method, which fetches the value object and accesses the name property. This technique keeps the private information private, and destroys that information whenever an object instance associated with it is destroyed.\nWeak Map Uses and Limitations When deciding whether to use a weak map or a regular map, the primary decision to consider is whether you want to use only object keys. Anytime you\u0026rsquo;re going to use only object keys, then the best choice is a weak map. That will allow you to optimize memory usage and avoid memory leaks by ensuring that extra data isn\u0026rsquo;t kept around after it\u0026rsquo;s no longer accessible.\nKeep in mind that weak maps give you very little visibility into their contents, so you can\u0026rsquo;t use the forEach() method, the size property, or the clear() method to manage the items. If you need some inspection capabilities, then regular maps are a better choice. Just be sure to keep an eye on memory usage.\nOf course, if you only want to use non-object keys, then regular maps are your only choice.\nSummary ECMAScript 6 formally introduces sets and maps into JavaScript. Prior to this, developers frequently used objects to mimic both sets and maps, often running into problems due to the limitations associated with object properties.\nSets are ordered lists of unique values. Values are not coerced to determine equivalence. Sets automatically remove duplicate values, so you can use a set to filter an array for duplicates and return the result. Sets aren\u0026rsquo;t subclasses of arrays, so you cannot randomly access a set\u0026rsquo;s values. Instead, you can use the has() method to determine if a value is contained in the set and the size property to inspect the number of values in the set. The Set type also has a forEach() method to process each set value.\nWeak sets are special sets that can contain only objects. The objects are stored with weak references, meaning that an item in a weak set will not block garbage collection if that item is the only remaining reference to an object. Weak set contents can\u0026rsquo;t be inspected due to the complexities of memory management, so it\u0026rsquo;s best to use weak sets only for tracking objects that need to be grouped together.\nMaps are ordered key-value pairs where the key can be any data type. Similar to sets, keys are not coerced to determine equivalence, which means you can have a numeric key 5 and a string \u0026quot;5\u0026quot; as two separate keys. A value of any data type can be associated with a key using the set() method, and that value can later be retrieved by using the get() method. Maps also have a size property and a forEach() method to allow for easier item access.\nWeak maps are a special type of map that can only have object keys. As with weak sets, an object key reference is weak and doesn\u0026rsquo;t prevent garbage collection when it\u0026rsquo;s the only remaining reference to an object. When a key is garbage collected, the value associated with the key is also removed from the weak map. This memory management aspect makes weak maps uniquely suited for correlating additional information with objects whose lifecycles are managed outside of the code accessing them.\n","date":"0001-01-01","id":34,"permalink":"/es6/07-sets-and-maps/","summary":"\u003cp\u003eJavaScript only had one type of collection, represented by the \u003ccode\u003eArray\u003c/code\u003e type, for most of its history (though some may argue all non-array objects are just collections of key-value pairs, their intended use was, originally quite different from arrays). Arrays are used in JavaScript just like arrays in other languages, but the lack of other collection options meant arrays were often used as queues and stacks, as well. Since arrays only use numeric indices, developers used non-array objects whenever a non-numeric index was necessary. That technique led to custom implementations of sets and maps using non-array objects.\u003c/p\u003e","tags":[],"title":"07 Sets and Maps"},{"content":"Many programming languages have shifted from iterating over data with for loops, which require initializing variables to track position in a collection, to using iterator objects that programmatically return the next item in a collection. Iterators make working with collections of data easier, and ECMAScript 6 adds iterators to JavaScript. When coupled with new array methods and new types of collections (such as sets and maps), iterators are key for efficient data processing, and you will find them in many parts of the language. There\u0026rsquo;s a new for-of loop that works with iterators, the spread (...) operator uses iterators, and iterators even make asynchronous programming easier.\nThis chapter covers the many uses of iterators, but first, it\u0026rsquo;s important to understand the history behind why iterators were added to JavaScript.\nThe Loop Problem If you\u0026rsquo;ve ever programmed in JavaScript, you\u0026rsquo;ve probably written code that looks like this:\nvar colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; for (var i = 0, len = colors.length; i \u0026lt; len; i++) { console.log(colors[i]); }\rThis standard for loop tracks the index into the colors array with the i variable. The value of i increments each time the loop executes if i isn\u0026rsquo;t larger than the length of the array (stored in len).\nWhile this loop is fairly straightforward, loops grow in complexity when you nest them and need to keep track of multiple variables. Additional complexity can lead to errors, and the boilerplate nature of the for loop lends itself to more errors as similar code is written in multiple places. Iterators are meant to solve that problem.\nWhat are Iterators? Iterators are just objects with a specific interface designed for iteration. All iterator objects have a next() method that returns a result object. The result object has two properties: value, which is the next value, and done, which is a boolean that\u0026rsquo;s true when there are no more values to return. The iterator keeps an internal pointer to a location within a collection of values and with each call to the next() method, it returns the next appropriate value.\nIf you call next() after the last value has been returned, the method returns done as true and value contains the return value for the iterator. That return value is not part of the data set, but rather a final piece of related data, or undefined if no such data exists. An iterator\u0026rsquo;s return value is similar to a function\u0026rsquo;s return value in that it\u0026rsquo;s a final way to pass information to the caller.\nWith that in mind, creating an iterator using ECMAScript 5 is fairly straightforward:\nfunction createIterator(items) { var i = 0; return { next: function () { var done = i \u0026gt;= items.length; var value = !done ? items[i++] : undefined; return { done: done, value: value }; } }; } var iterator = createIterator([1, 2, 3]); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 3, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; // for all further calls console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; The createIterator() function returns an object with a next() method. Each time the method is called, the next value in the items array is returned as value. When i is 3, done becomes true and the ternary conditional operator that sets value evaluates to undefined. These two results fulfill the special last case for iterators in ECMAScript 6, where next() is called on an iterator after the last piece of data has been used.\nAs this example shows, writing iterators that behave according to the rules laid out in ECMAScript 6 is a bit complex.\nFortunately, ECMAScript 6 also provides generators, which make creating iterator objects much simpler.\nWhat Are Generators? A generator is a function that returns an iterator. Generator functions are indicated by a star character (*) after the function keyword and use the new yield keyword. It doesn\u0026rsquo;t matter if the star is directly next to function or if there\u0026rsquo;s some whitespace between it and the * character, as in this example:\n// generator function* createIterator() { yield 1; yield 2; yield 3; } // generators are called like regular functions but return an iterator let iterator = createIterator(); console.log(iterator.next().value); // 1 console.log(iterator.next().value); // 2 console.log(iterator.next().value); // 3 The * before createIterator() makes this function a generator. The yield keyword, also new to ECMAScript 6, specifies values the resulting iterator should return when next() is called, in the order they should be returned. The iterator generated in this example has three different values to return on successive calls to the next() method: first 1, then 2, and finally 3. A generator gets called like any other function, as shown when iterator is created.\nPerhaps the most interesting aspect of generator functions is that they stop execution after each yield statement. For instance, after yield 1 executes in this code, the function doesn\u0026rsquo;t execute anything else until the iterator\u0026rsquo;s next() method is called. At that point, yield 2 executes. This ability to stop execution in the middle of a function is extremely powerful and leads to some interesting uses of generator functions (discussed in the \u0026ldquo;Advanced Iterator Functionality\u0026rdquo; section).\nThe yield keyword can be used with any value or expression, so you can write generator functions that add items to iterators without just listing the items one by one. For example, here\u0026rsquo;s one way you could use yield inside a for loop:\nfunction* createIterator(items) { for (let i = 0; i \u0026lt; items.length; i++) { yield items[i]; } } let iterator = createIterator([1, 2, 3]); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 3, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; // for all further calls console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; This example passes an array called items to the createIterator() generator function. Inside the function, a for loop yields the elements from the array into the iterator as the loop progresses. Each time yield is encountered, the loop stops, and each time next() is called on iterator, the loop picks up with the next yield statement.\nGenerator functions are an important feature of ECMAScript 6, and since they are just functions, they can be used in all the same places. The rest of this section focuses on other useful ways to write generators.\nW\u0026gt; The yield keyword can only be used inside of generators. Use of yield anywhere else is a syntax error, including functions that are inside of generators, such as: W\u0026gt; W\u0026gt; js W\u0026gt; function *createIterator(items) { W\u0026gt; W\u0026gt; items.forEach(function(item) { W\u0026gt; W\u0026gt; // syntax error W\u0026gt; yield item + 1; W\u0026gt; }); W\u0026gt; } W\u0026gt; W\u0026gt; W\u0026gt; Even though yield is technically inside of createIterator(), this code is a syntax error because yield cannot cross function boundaries. In this way, yield is similar to return, in that a nested function cannot return a value for its containing function.\nGenerator Function Expressions You can use function expressions to create generators by just including a star (*) character between the function keyword and the opening parenthesis. For example:\nlet createIterator = function* (items) { for (let i = 0; i \u0026lt; items.length; i++) { yield items[i]; } }; let iterator = createIterator([1, 2, 3]); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 3, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; // for all further calls console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; In this code, createIterator() is a generator function expression instead of a function declaration. The asterisk goes between the function keyword and the opening parentheses because the function expression is anonymous. Otherwise, this example is the same as the previous version of the createIterator() function, which also used a for loop.\nI\u0026gt; Creating an arrow function that is also a generator is not possible.\nGenerator Object Methods Because generators are just functions, they can be added to objects, too. For example, you can make a generator in an ECMAScript 5-style object literal with a function expression:\nvar o = { createIterator: function* (items) { for (let i = 0; i \u0026lt; items.length; i++) { yield items[i]; } } }; let iterator = o.createIterator([1, 2, 3]);\rYou can also use the ECMAScript 6 method shorthand by prepending the method name with a star (*):\nvar o = { *createIterator(items) { for (let i = 0; i \u0026lt; items.length; i++) { yield items[i]; } } }; let iterator = o.createIterator([1, 2, 3]);\rThese examples are functionally equivalent to the example in the \u0026ldquo;Generator Function Expressions\u0026rdquo; section; they just use different syntax. In the shorthand version, because the createIterator() method is defined with no function keyword, the star is placed immediately before the method name, though you can leave whitespace between the star and the method name.\nIterables and for-of Closely related to iterators, an iterable is an object with a Symbol.iterator property. The well-known Symbol.iterator symbol specifies a function that returns an iterator for the given object. All collection objects (arrays, sets, and maps) and strings are iterables in ECMAScript 6 and so they have a default iterator specified. Iterables are designed to be used with a new addition to ECMAScript: the for-of loop.\nI\u0026gt; All iterators created by generators are also iterables, as generators assign the Symbol.iterator property by default.\nAt the beginning of this chapter, I mentioned the problem of tracking an index inside a for loop. Iterators are the first part of the solution to that problem. The for-of loop is the second part: it removes the need to track an index into a collection entirely, leaving you free to focus on working with the contents of the collection.\nA for-of loop calls next() on an iterable each time the loop executes and stores the value from the result object in a variable. The loop continues this process until the returned object\u0026rsquo;s done property is true. Here\u0026rsquo;s an example:\nlet values = [1, 2, 3]; for (let num of values) { console.log(num); }\rThis code outputs the following:\n1 2 3\rThis for-of loop first calls the Symbol.iterator method on the values array to retrieve an iterator. (The call to Symbol.iterator happens behind the scenes in the JavaScript engine itself.) Then iterator.next() is called, and the value property on the iterator\u0026rsquo;s result object is read into num. The num variable is first 1, then 2, and finally 3. When done on the result object is true, the loop exits, so num is never assigned the value of undefined.\nIf you are simply iterating over values in an array or collection, then it\u0026rsquo;s a good idea to use a for-of loop instead of a for loop. The for-of loop is generally less error-prone because there are fewer conditions to keep track of. Save the traditional for loop for more complex control conditions.\nW\u0026gt; The for-of statement will throw an error when used on, a non-iterable object, null, or undefined.\nAccessing the Default Iterator You can use Symbol.iterator to access the default iterator for an object, like this:\nlet values = [1, 2, 3]; let iterator = values[Symbol.iterator](); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 3, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; This code gets the default iterator for values and uses that to iterate over the items in the array. This is the same process that happens behind-the-scenes when using a for-of loop.\nSince Symbol.iterator specifies the default iterator, you can use it to detect whether an object is iterable as follows:\nfunction isIterable(object) { return typeof object[Symbol.iterator] === \u0026#34;function\u0026#34;; } console.log(isIterable([1, 2, 3])); // true console.log(isIterable(\u0026#34;Hello\u0026#34;)); // true console.log(isIterable(new Map())); // true console.log(isIterable(new Set())); // true console.log(isIterable(new WeakMap())); // false console.log(isIterable(new WeakSet())); // false The isIterable() function simply checks to see if a default iterator exists on the object and is a function. The for-of loop does a similar check before executing.\nSo far, the examples in this section have shown ways to use Symbol.iterator with built-in iterable types, but you can also use the Symbol.iterator property to create your own iterables.\nCreating Iterables Developer-defined objects are not iterable by default, but you can make them iterable by creating a Symbol.iterator property containing a generator. For example:\nlet collection = { items: [], *[Symbol.iterator]() { for (let item of this.items) { yield item; } } }; collection.items.push(1); collection.items.push(2); collection.items.push(3); for (let x of collection) { console.log(x); }\rThis code outputs the following:\n1 2 3\rFirst, the example defines a default iterator for an object called collection. The default iterator is created by the Symbol.iterator method, which is a generator (note the star still comes before the name). The generator then uses a for-of loop to iterate over the values in this.items and uses yield to return each one. Instead of manually iterating to define values for the default iterator of collection to return, the collection object relies on the default iterator of this.items to do the work.\nI\u0026gt; \u0026ldquo;Delegating Generators\u0026rdquo; later in this chapter describes a different approach to using the iterator of another object.\nNow you\u0026rsquo;ve seen some uses for the default array iterator, but there are many more iterators built in to ECMAScript 6 to make working with collections of data easy.\nBuilt-in Iterators Iterators are an important part of ECMAScript 6, and as such, you don\u0026rsquo;t need to create your own iterators for many built-in types; the language includes them by default. You only need to create iterators when the built-in iterators don\u0026rsquo;t serve your purpose, which will most frequently be when defining your own objects or classes. Otherwise, you can rely on built-in iterators to do your work. Perhaps the most common iterators to use are those that work on collections.\nCollection Iterators ECMAScript 6 has three types of collection objects: arrays, maps, and sets. All three have the following built-in iterators to help you navigate their content:\nentries() - Returns an iterator whose values are a key-value pair values() - Returns an iterator whose values are the values of the collection keys() - Returns an iterator whose values are the keys contained in the collection You can retrieve an iterator for a collection by calling one of these methods.\nThe entries() Iterator The entries() iterator returns a two-item array each time next() is called. The two-item array represents the key and value for each item in the collection. For arrays, the first item is the numeric index; for sets, the first item is also the value (since values double as keys in sets); for maps, the first item is the key.\nHere are some examples that use this iterator:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let tracking = new Set([1234, 5678, 9012]); let data = new Map(); data.set(\u0026#34;title\u0026#34;, \u0026#34;Understanding ECMAScript 6\u0026#34;); data.set(\u0026#34;format\u0026#34;, \u0026#34;ebook\u0026#34;); for (let entry of colors.entries()) { console.log(entry); } for (let entry of tracking.entries()) { console.log(entry); } for (let entry of data.entries()) { console.log(entry); }\rThe console.log() calls give the following output:\n[0, \u0026#34;red\u0026#34;] [1, \u0026#34;green\u0026#34;] [2, \u0026#34;blue\u0026#34;] [1234, 1234] [5678, 5678] [9012, 9012] [\u0026#34;title\u0026#34;, \u0026#34;Understanding ECMAScript 6\u0026#34;] [\u0026#34;format\u0026#34;, \u0026#34;ebook\u0026#34;]\rThis code uses the entries() method on each type of collection to retrieve an iterator, and it uses for-of loops to iterate the items. The console output shows how the keys and values are returned in pairs for each object.\nThe values() Iterator The values() iterator simply returns values as they are stored in the collection. For example:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let tracking = new Set([1234, 5678, 9012]); let data = new Map(); data.set(\u0026#34;title\u0026#34;, \u0026#34;Understanding ECMAScript 6\u0026#34;); data.set(\u0026#34;format\u0026#34;, \u0026#34;ebook\u0026#34;); for (let value of colors.values()) { console.log(value); } for (let value of tracking.values()) { console.log(value); } for (let value of data.values()) { console.log(value); }\rThis code outputs the following:\n\u0026#34;red\u0026#34; \u0026#34;green\u0026#34; \u0026#34;blue\u0026#34; 1234 5678 9012 \u0026#34;Understanding ECMAScript 6\u0026#34; \u0026#34;ebook\u0026#34;\rCalling the values() iterator, as in this example, returns the exact data contained in each collection without any information about that data\u0026rsquo;s location in the collection.\nThe keys() Iterator The keys() iterator returns each key present in a collection. For arrays, it only returns numeric keys, never other own properties of the array. For sets, the keys are the same as the values, and so keys() and values() return the same iterator. For maps, the keys() iterator returns each unique key. Here\u0026rsquo;s an example that demonstrates all three:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let tracking = new Set([1234, 5678, 9012]); let data = new Map(); data.set(\u0026#34;title\u0026#34;, \u0026#34;Understanding ECMAScript 6\u0026#34;); data.set(\u0026#34;format\u0026#34;, \u0026#34;ebook\u0026#34;); for (let key of colors.keys()) { console.log(key); } for (let key of tracking.keys()) { console.log(key); } for (let key of data.keys()) { console.log(key); }\rThis example outputs the following:\n0 1 2 1234 5678 9012 \u0026#34;title\u0026#34; \u0026#34;format\u0026#34;\rThe keys() iterator fetches each key in colors, tracking, and data, and those keys are printed from inside the three for-of loops. For the array object, only numeric indices are printed, which would still happen even if you added named properties to the array. This is different from the way the for-in loop works with arrays, because the for-in loop iterates over properties rather than just the numeric indices.\nDefault Iterators for Collection Types Each collection type also has a default iterator that is used by for-of whenever an iterator isn\u0026rsquo;t explicitly specified. The values() method is the default iterator for arrays and sets, while the entries() method is the default iterator for maps. These defaults make using collection objects in for-of loops a little easier. For instance, consider this example:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let tracking = new Set([1234, 5678, 9012]); let data = new Map(); data.set(\u0026#34;title\u0026#34;, \u0026#34;Understanding ECMAScript 6\u0026#34;); data.set(\u0026#34;format\u0026#34;, \u0026#34;print\u0026#34;); // same as using colors.values() for (let value of colors) { console.log(value); } // same as using tracking.values() for (let num of tracking) { console.log(num); } // same as using data.entries() for (let entry of data) { console.log(entry); }\rNo iterator is specified, so the default iterator functions will be used. The default iterators for arrays, sets, and maps are designed to reflect how these objects are initialized, so this code outputs the following:\n\u0026#34;red\u0026#34; \u0026#34;green\u0026#34; \u0026#34;blue\u0026#34; 1234 5678 9012 [\u0026#34;title\u0026#34;, \u0026#34;Understanding ECMAScript 6\u0026#34;] [\u0026#34;format\u0026#34;, \u0026#34;print\u0026#34;]\rArrays and sets return their values by default, while maps return the same array format that can be passed into the Map constructor. Weak sets and weak maps, on the other hand, do not have built-in iterators. Managing weak references means there\u0026rsquo;s no way to know exactly how many values are in these collections, which also means there\u0026rsquo;s no way to iterate over them.\nA\u0026gt; ### Destructuring and for-of Loops A\u0026gt; A\u0026gt; The behavior of the default iterator for maps is also helpful when used in for-of loops with destructuring, as in this example: A\u0026gt; A\u0026gt; js A\u0026gt; let data = new Map(); A\u0026gt; A\u0026gt; data.set(\u0026quot;title\u0026quot;, \u0026quot;Understanding ECMAScript 6\u0026quot;); A\u0026gt; data.set(\u0026quot;format\u0026quot;, \u0026quot;ebook\u0026quot;); A\u0026gt; A\u0026gt; // same as using data.entries() A\u0026gt; for (let [key, value] of data) { A\u0026gt; console.log(key + \u0026quot;=\u0026quot; + value); A\u0026gt; } A\u0026gt; A\u0026gt; A\u0026gt; The for-of loop in this code uses a destructured array to assign key and value for each entry in the map. In this way, you can easily work with keys and values at the same time without needing to access a two-item array or going back to the map to fetch either the key or the value. Using a destructured array for maps makes the for-of loop equally useful for maps as it is for sets and arrays.\nString Iterators JavaScript strings have slowly become more like arrays since ECMAScript 5 was released. For example, ECMAScript 5 formalized bracket notation for accessing characters in strings (that is, using text[0] to get the first character, and so on). But bracket notation works on code units rather than characters, so it cannot be used to access double-byte characters correctly, as this example demonstrates:\nvar message = \u0026#34;A 𠮷 B\u0026#34;; for (let i = 0; i \u0026lt; message.length; i++) { console.log(message[i]); }\rThis code uses bracket notation and the length property to iterate over and print a string containing a Unicode character. The output is a bit unexpected:\nA (blank) (blank) (blank) (blank) B\rSince the double-byte character is treated as two separate code units, there are four empty lines between A and B in the output.\nFortunately, ECMAScript 6 aims to fully support Unicode (see Chapter 2), and the default string iterator is an attempt to solve the string iteration problem. As such, the default iterator for strings works on characters rather than code units. Changing this example to use the default string iterator with a for-of loop results in more appropriate output. Here\u0026rsquo;s the tweaked code:\nvar message = \u0026#34;A 𠮷 B\u0026#34;; for (let c of message) { console.log(c); }\rThis outputs the following:\nA (blank) 𠮷 (blank) B\rThis result is more in line with what you\u0026rsquo;d expect when working with characters: the loop successfully prints the Unicode character, as well as all the rest.\nNodeList Iterators The Document Object Model (DOM) has a NodeList type that represents a collection of elements in a document. For those who write JavaScript to run in web browsers, understanding the difference between NodeList objects and arrays has always been a bit difficult. Both NodeList objects and arrays use the length property to indicate the number of items, and both use bracket notation to access individual items. Internally, however, a NodeList and an array behave quite differently, which has led to a lot of confusion.\nWith the addition of default iterators in ECMAScript 6, the DOM definition of NodeList (included in the HTML specification rather than ECMAScript 6 itself) includes a default iterator that behaves in the same manner as the array default iterator. That means you can use NodeList in a for-of loop or any other place that uses an object\u0026rsquo;s default iterator. For example:\nvar divs = document.getElementsByTagName(\u0026#34;div\u0026#34;); for (let div of divs) { console.log(div.id); }\rThis code calls getElementsByTagName() to retrieve a NodeList that represents all of the \u0026lt;div\u0026gt; elements in the document object. The for-of loop then iterates over each element and outputs the element IDs, effectively making the code the same as it would be for a standard array.\nThe Spread Operator and Non-Array Iterables Recall from Chapter 7 that the spread operator (...) can be used to convert a set into an array. For example:\nlet set = new Set([1, 2, 3, 3, 3, 4, 5]), array = [...set]; console.log(array); // [1,2,3,4,5] This code uses the spread operator inside an array literal to fill in that array with the values from set. The spread operator works on all iterables and uses the default iterator to determine which values to include. All values are read from the iterator and inserted into the array in the order in which values were returned from the iterator. This example works because sets are iterables, but it can work equally well on any iterable. Here\u0026rsquo;s another example:\nlet map = new Map([ [\u0026#34;name\u0026#34;, \u0026#34;Nicholas\u0026#34;], [\u0026#34;age\u0026#34;, 25] ]), array = [...map]; console.log(array); // [ [\u0026#34;name\u0026#34;, \u0026#34;Nicholas\u0026#34;], [\u0026#34;age\u0026#34;, 25]] Here, the spread operator converts map into an array of arrays. Since the default iterator for maps returns key-value pairs, the resulting array looks like the array that was passed during the new Map() call.\nYou can use the spread operator in an array literal as many times as you want, and you can use it wherever you want to insert multiple items from an iterable. Those items will just appear in order in the new array at the location of the spread operator. For example:\nlet smallNumbers = [1, 2, 3], bigNumbers = [100, 101, 102], allNumbers = [0, ...smallNumbers, ...bigNumbers]; console.log(allNumbers.length); // 7 console.log(allNumbers); // [0, 1, 2, 3, 100, 101, 102] The spread operator is used to create allNumbers from the values in smallNumbers and bigNumbers. The values are placed in allNumbers in the same order the arrays are added when allNumbers is created: 0 is first, followed by the values from smallNumbers, followed by the values from bigNumbers. The original arrays are unchanged, though, as their values have just been copied into allNumbers.\nSince the spread operator can be used on any iterable, it\u0026rsquo;s the easiest way to convert an iterable into an array. You can convert strings into arrays of characters (not code units) and NodeList objects in the browser into arrays of nodes.\nNow that you understand the basics of how iterators work, including for-of and the spread operator, it\u0026rsquo;s time to look at some more complex uses of iterators.\nAdvanced Iterator Functionality You can accomplish a lot with the basic functionality of iterators and the convenience of creating them using generators. However, iterators are much more powerful when used for tasks other than simply iterating over a collection of values. During the development of ECMAScript 6, a lot of unique ideas and patterns emerged that encouraged the creators to add more functionality. Some of those additions are subtle, but when used together, can accomplish some interesting interactions.\nPassing Arguments to Iterators Throughout this chapter, examples have shown iterators passing values out via the next() method or by using yield in a generator. But you can also pass arguments to the iterator through the next() method. When an argument is passed to the next() method, that argument becomes the value of the yield statement inside a generator. This capability is important for more advanced functionality such as asynchronous programming. Here\u0026rsquo;s a basic example:\nfunction* createIterator() { let first = yield 1; let second = yield first + 2; // 4 + 2 yield second + 3; // 5 + 3 } let iterator = createIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next(4)); // \u0026#34;{ value: 6, done: false }\u0026#34; console.log(iterator.next(5)); // \u0026#34;{ value: 8, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; The first call to next() is a special case where any argument passed to it is lost. Since arguments passed to next() become the values returned by yield, an argument from the first call to next() could only replace the first yield statement in the generator function if it could be accessed before that yield statement. That\u0026rsquo;s not possible, so there\u0026rsquo;s no reason to pass an argument the first time next() is called.\nOn the second call to next(), the value 4 is passed as the argument. The 4 ends up assigned to the variable first inside the generator function. In a yield statement including an assignment, the right side of the expression is evaluated on the first call to next() and the left side is evaluated on the second call to next() before the function continues executing. Since the second call to next() passes in 4, that value is assigned to first and then execution continues.\nThe second yield uses the result of the first yield and adds two, which means it returns a value of six. When next() is called a third time, the value 5 is passed as an argument. That value is assigned to the variable second and then used in the third yield statement to return 8.\nIt\u0026rsquo;s a bit easier to think about what\u0026rsquo;s happening by considering which code is executing each time execution continues inside the generator function. Figure 8-1 uses colors to show the code being executed before yielding.\nThe color yellow represents the first call to next() and all the code executed inside of the generator as a result. The color aqua represents the call to next(4) and the code that is executed with that call. The color purple represents the call to next(5) and the code that is executed as a result. The tricky part is how the code on the right side of each expression executes and stops before the left side is executed. This makes debugging complicated generators a bit more involved than debugging regular functions.\nSo far, you\u0026rsquo;ve seen that yield can act like return when a value is passed to the next() method. However, that\u0026rsquo;s not the only execution trick you can do inside a generator. You can also cause iterators throw an error.\nThrowing Errors in Iterators It\u0026rsquo;s possible to pass not just data into iterators but also error conditions. Iterators can choose to implement a throw() method that instructs the iterator to throw an error when it resumes. This is an important capability for asynchronous programming, but also for flexibility inside generators, where you want to be able to mimic both return values and thrown errors (the two ways of exiting a function). You can pass an error object to throw() that should be thrown when the iterator continues processing. For example:\nfunction* createIterator() { let first = yield 1; let second = yield first + 2; // yield 4 + 2, then throw yield second + 3; // never is executed } let iterator = createIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next(4)); // \u0026#34;{ value: 6, done: false }\u0026#34; console.log(iterator.throw(new Error(\u0026#34;Boom\u0026#34;))); // error thrown from generator In this example, the first two yield expressions are evaluated as normal, but when throw() is called, an error is thrown before let second is evaluated. This effectively halts code execution similar to directly throwing an error. The only difference is the location in which the error is thrown. Figure 8-2 shows which code is executed at each step.\nIn this figure, the color red represents the code executed when throw() is called, and the red star shows approximately when the error is thrown inside the generator. The first two yield statements are executed, and when throw() is called, an error is thrown before any other code executes.\nKnowing this, you can catch such errors inside the generator using a try-catch block:\nfunction* createIterator() { let first = yield 1; let second; try { second = yield first + 2; // yield 4 + 2, then throw } catch (ex) { second = 6; // on error, assign a different value } yield second + 3; } let iterator = createIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next(4)); // \u0026#34;{ value: 6, done: false }\u0026#34; console.log(iterator.throw(new Error(\u0026#34;Boom\u0026#34;))); // \u0026#34;{ value: 9, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; In this example, a try-catch block is wrapped around the second yield statement. While this yield executes without error, the error is thrown before any value can be assigned to second, so the catch block assigns it a value of six. Execution then flows to the next yield and returns nine.\nNotice that something interesting happened: the throw() method returned a result object just like the next() method. Because the error was caught inside the generator, code execution continued on to the next yield and returned the next value, 9.\nIt helps to think of next() and throw() as both being instructions to the iterator. The next() method instructs the iterator to continue executing (possibly with a given value) and throw() instructs the iterator to continue executing by throwing an error. What happens after that point depends on the code inside the generator.\nThe next() and throw() methods control execution inside an iterator when using yield, but you can also use the return statement. But return works a bit differently than it does in regular functions, as you will see in the next section.\nGenerator Return Statements Since generators are functions, you can use the return statement both to exit early and specify a return value for the last call to the next() method. In most examples in this chapter, the last call to next() on an iterator returns undefined, but you can specify an alternate value by using return as you would in any other function. In a generator, return indicates that all processing is done, so the done property is set to true and the value, if provided, becomes the value field. Here\u0026rsquo;s an example that simply exits early using return:\nfunction* createIterator() { yield 1; return; yield 2; yield 3; } let iterator = createIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; In this code, the generator has a yield statement followed by a return statement. The return indicates that there are no more values to come, and so the rest of the yield statements will not execute (they are unreachable).\nYou can also specify a return value that will end up in the value field of the returned object. For example:\nfunction* createIterator() { yield 1; return 42; } let iterator = createIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 42, done: true }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; Here, the value 42 is returned in the value field on the second call to the next() method (which is the first time that done is true). The third call to next() returns an object whose value property is once again undefined. Any value you specify with return is only available on the returned object one time before the value field is reset to undefined.\nI\u0026gt; The spread operator and for-of ignore any value specified by a return statement. As soon as they see done is true, they stop without reading the value. Iterator return values are helpful, however, when delegating generators.\nDelegating Generators In some cases, combining the values from two iterators into one is useful. Generators can delegate to other iterators using a special form of yield with a star (*) character. As with generator definitions, where the star appears doesn\u0026rsquo;t matter, as long as the star falls between the yield keyword and the generator function name. Here\u0026rsquo;s an example:\nfunction* createNumberIterator() { yield 1; yield 2; } function* createColorIterator() { yield \u0026#34;red\u0026#34;; yield \u0026#34;green\u0026#34;; } function* createCombinedIterator() { yield* createNumberIterator(); yield* createColorIterator(); yield true; } var iterator = createCombinedIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;red\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;green\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: true, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; In this example, the createCombinedIterator() generator delegates first to the iterator returned from createNumberIterator() and then to the iterator returned from createColorIterator(). The iterator returned from createCombinedIterator() appears, from the outside, to be one consistent iterator that has produced all of the values. Each call to next() is delegated to the appropriate iterator until the iterators created by createNumberIterator() and createColorIterator() are empty. Then the final yield is executed to return true.\nGenerator delegation also lets you make further use of generator return values. This is the easiest way to access such returned values and can be quite useful in performing complex tasks. For example:\nfunction* createNumberIterator() { yield 1; yield 2; return 3; } function* createRepeatingIterator(count) { for (let i = 0; i \u0026lt; count; i++) { yield \u0026#34;repeat\u0026#34;; } } function* createCombinedIterator() { let result = yield* createNumberIterator(); yield* createRepeatingIterator(result); } var iterator = createCombinedIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;repeat\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;repeat\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;repeat\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; Here, the createCombinedIterator() generator delegates to createNumberIterator() and assigns the return value to result. Since createNumberIterator() contains return 3, the returned value is 3. The result variable is then passed to createRepeatingIterator() as an argument indicating how many times to yield the same string (in this case, three times).\nNotice that the value 3 was never output from any call to the next() method. Right now, it exists solely inside the createCombinedIterator() generator. But you can output that value as well by adding another yield statement, such as:\nfunction* createNumberIterator() { yield 1; yield 2; return 3; } function* createRepeatingIterator(count) { for (let i = 0; i \u0026lt; count; i++) { yield \u0026#34;repeat\u0026#34;; } } function* createCombinedIterator() { let result = yield* createNumberIterator(); yield result; yield* createRepeatingIterator(result); } var iterator = createCombinedIterator(); console.log(iterator.next()); // \u0026#34;{ value: 1, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 2, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: 3, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;repeat\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;repeat\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: \u0026#34;repeat\u0026#34;, done: false }\u0026#34; console.log(iterator.next()); // \u0026#34;{ value: undefined, done: true }\u0026#34; In this code, the extra yield statement explicitly outputs the returned value from the createNumberIterator() generator.\nGenerator delegation using the return value is a very powerful paradigm that allows for some very interesting possibilities, especially when used in conjunction with asynchronous operations.\nI\u0026gt; You can use yield * directly on strings (such as yield * \u0026quot;hello\u0026quot;) and the string\u0026rsquo;s default iterator will be used.\nAsynchronous Task Running A lot of the excitement around generators is directly related to asynchronous programming. Asynchronous programming in JavaScript is a double-edged sword: simple tasks are easy to do asynchronously, while complex tasks become an errand in code organization. Since generators allow you to effectively pause code in the middle of execution, they open up a lot of possibilities related to asynchronous processing.\nThe traditional way to perform asynchronous operations is to call a function that has a callback. For example, consider reading a file from the disk in Node.js:\nlet fs = require(\u0026#34;fs\u0026#34;); fs.readFile(\u0026#34;config.json\u0026#34;, function (err, contents) { if (err) { throw err; } doSomethingWith(contents); console.log(\u0026#34;Done\u0026#34;); });\rThe fs.readFile() method is called with the filename to read and a callback function. When the operation is finished, the callback function is called. The callback checks to see if there\u0026rsquo;s an error, and if not, processes the returned contents. This works well when you have a small, finite number of asynchronous tasks to complete, but gets complicated when you need to nest callbacks or otherwise sequence a series of asynchronous tasks. This is where generators and yield are helpful.\nA Simple Task Runner Because yield stops execution and waits for the next() method to be called before starting again, you can implement asynchronous calls without managing callbacks. To start, you need a function that can call a generator and start the iterator, such as this:\nfunction run(taskDef) { // create the iterator, make available elsewhere let task = taskDef(); // start the task let result = task.next(); // recursive function to keep calling next() function step() { // if there\u0026#39;s more to do if (!result.done) { result = task.next(); step(); } } // start the process step(); }\rThe run() function accepts a task definition (a generator function) as an argument. It calls the generator to create an iterator and stores the iterator in task. The task variable is outside the function so it can be accessed by other functions; I will explain why later in this section. The first call to next() begins the iterator and the result is stored for later use. The step() function checks to see if result.done is false and, if so, calls next() before recursively calling itself. Each call to next() stores the return value in result, which is always overwritten to contain the latest information. The initial call to step() starts the process of looking at the result.done variable to see whether there\u0026rsquo;s more to do.\nWith this implementation of run(), you can run a generator containing multiple yield statements, such as:\nrun(function* () { console.log(1); yield; console.log(2); yield; console.log(3); });\rThis example just outputs three numbers to the console, which simply shows that all calls to next() are being made. However, just yielding a couple of times isn\u0026rsquo;t very useful. The next step is to pass values into and out of the iterator.\nTask Running With Data The easiest way to pass data through the task runner is to pass the value specified by yield into the next call to the next() method. To do so, you need only pass result.value, as in this code:\nfunction run(taskDef) { // create the iterator, make available elsewhere let task = taskDef(); // start the task let result = task.next(); // recursive function to keep calling next() function step() { // if there\u0026#39;s more to do if (!result.done) { result = task.next(result.value); step(); } } // start the process step(); }\rNow that result.value is passed to next() as an argument, it\u0026rsquo;s possible to pass data between yield calls, like this:\nrun(function* () { let value = yield 1; console.log(value); // 1 value = yield value + 3; console.log(value); // 4 });\rThis example outputs two values to the console: 1 and 4. The value 1 comes from yield 1, as the 1 is passed right back into the value variable. The 4 is calculated by adding 3 to value and passing that result back to value. Now that data is flowing between calls to yield, you just need one small change to allow asynchronous calls.\nAsynchronous Task Runner The previous example passed static data back and forth between yield calls, but waiting for an asynchronous process is slightly different. The task runner needs to know about callbacks and how to use them. And since yield expressions pass their values into the task runner, that means any function call must return a value that somehow indicates the call is an asynchronous operation that the task runner should wait for.\nHere\u0026rsquo;s one way you might signal that a value is an asynchronous operation:\nfunction fetchData() { return function (callback) { callback(null, \u0026#34;Hi!\u0026#34;); }; }\rFor the purposes of this example, any function meant to be called by the task runner will return a function that executes a callback. The fetchData() function returns a function that accepts a callback function as an argument. When the returned function is called, it executes the callback function with a single piece of data (the \u0026quot;Hi!\u0026quot; string). The callback argument needs to come from the task runner to ensure executing the callback correctly interacts with the underlying iterator. While the fetchData() function is synchronous, you can easily extend it to be asynchronous by calling the callback with a slight delay, such as:\nfunction fetchData() { return function (callback) { setTimeout(function () { callback(null, \u0026#34;Hi!\u0026#34;); }, 50); }; }\rThis version of fetchData() introduces a 50ms delay before calling the callback, demonstrating that this pattern works equally well for synchronous and asynchronous code. You just have to make sure each function that wants to be called using yield follows the same pattern.\nWith a good understanding of how a function can signal that it\u0026rsquo;s an asynchronous process, you can modify the task runner to take that fact into account. Anytime result.value is a function, the task runner will execute it instead of just passing that value to the next() method. Here\u0026rsquo;s the updated code:\nfunction run(taskDef) { // create the iterator, make available elsewhere let task = taskDef(); // start the task let result = task.next(); // recursive function to keep calling next() function step() { // if there\u0026#39;s more to do if (!result.done) { if (typeof result.value === \u0026#34;function\u0026#34;) { result.value(function (err, data) { if (err) { result = task.throw(err); return; } result = task.next(data); step(); }); } else { result = task.next(result.value); step(); } } } // start the process step(); }\rWhen result.value is a function (checked with the === operator), it is called with a callback function. That callback function follows the Node.js convention of passing any possible error as the first argument (err) and the result as the second argument. If err is present, then that means an error occurred and task.throw() is called with the error object instead of task.next() so an error is thrown at the correct location. If there is no error, then data is passed into task.next() and the result is stored. Then, step() is called to continue the process. When result.value is not a function, it is directly passed to the next() method.\nThis new version of the task runner is ready for all asynchronous tasks. To read data from a file in Node.js, you need to create a wrapper around fs.readFile() that returns a function similar to the fetchData() function from the beginning of this section. For example:\nlet fs = require(\u0026#34;fs\u0026#34;); function readFile(filename) { return function (callback) { fs.readFile(filename, callback); }; }\rThe readFile() method accepts a single argument, the filename, and returns a function that calls a callback. The callback is passed directly to the fs.readFile() method, which will execute the callback upon completion. You can then run this task using yield as follows:\nrun(function* () { let contents = yield readFile(\u0026#34;config.json\u0026#34;); doSomethingWith(contents); console.log(\u0026#34;Done\u0026#34;); });\rThis example is performing the asynchronous readFile() operation without making any callbacks visible in the main code. Aside from yield, the code looks the same as synchronous code. As long as the functions performing asynchronous operations all conform to the same interface, you can write logic that reads like synchronous code.\nOf course, there are downsides to the pattern used in these examples\u0026ndash;namely that you can\u0026rsquo;t always be sure a function that returns a function is asynchronous. For now, though, it\u0026rsquo;s only important that you understand the theory behind the task running. Using promises offers more powerful ways of scheduling asynchronous tasks, and Chapter 11 covers this topic further.\nSummary Iterators are an important part of ECMAScript 6 and are at the root of several key language elements. On the surface, iterators provide a simple way to return a sequence of values using a simple API. However, there are far more complex ways to use iterators in ECMAScript 6.\nThe Symbol.iterator symbol is used to define default iterators for objects. Both built-in objects and developer-defined objects can use this symbol to provide a method that returns an iterator. When Symbol.iterator is provided on an object, the object is considered an iterable.\nThe for-of loop uses iterables to return a series of values in a loop. Using for-of is easier than iterating with a traditional for loop because you no longer need to track values and control when the loop ends. The for-of loop automatically reads all values from the iterator until there are no more, and then it exits.\nTo make for-of easier to use, many values in ECMAScript 6 have default iterators. All the collection types\u0026ndash;that is, arrays, maps, and sets\u0026ndash;have iterators designed to make their contents easy to access. Strings also have a default iterator, which makes iterating over the characters of the string (rather than the code units) easy.\nThe spread operator works with any iterable and makes converting iterables into arrays easy, too. The conversion works by reading values from an iterator and inserting them individually into an array.\nA generator is a special function that automatically creates an iterator when called. Generator definitions are indicated by a star (*) character and use of the yield keyword to indicate which value to return for each successive call to the next() method.\nGenerator delegation encourages good encapsulation of iterator behavior by letting you reuse existing generators in new generators. You can use an existing generator inside another generator by calling yield * instead of yield. This process allows you to create an iterator that returns values from multiple iterators.\nPerhaps the most interesting and exciting aspect of generators and iterators is the possibility of creating cleaner-looking asynchronous code. Instead of needing to use callbacks everywhere, you can set up code that looks synchronous but in fact uses yield to wait for asynchronous operations to complete.\n","date":"0001-01-01","id":35,"permalink":"/es6/08-iterators-and-generators/","summary":"\u003cp\u003eMany programming languages have shifted from iterating over data with \u003ccode\u003efor\u003c/code\u003e loops, which require initializing variables to track position in a collection, to using iterator objects that programmatically return the next item in a collection. Iterators make working with collections of data easier, and ECMAScript 6 adds iterators to JavaScript. When coupled with new array methods and new types of collections (such as sets and maps), iterators are key for efficient data processing, and you will find them in many parts of the language. There\u0026rsquo;s a new \u003ccode\u003efor-of\u003c/code\u003e loop that works with iterators, the spread (\u003ccode\u003e...\u003c/code\u003e) operator uses iterators, and iterators even make asynchronous programming easier.\u003c/p\u003e","tags":[],"title":"08 Iterators and Generators"},{"content":"Unlike most formal object-oriented programming languages, JavaScript didn\u0026rsquo;t support classes and classical inheritance as the primary way of defining similar and related objects when it was created. This left many developers confused, and from pre-ECMAScript 1 all the way through ECMAScript 5, many libraries created utilities to make JavaScript look like it supports classes. While some JavaScript developers do feel strongly that the language doesn\u0026rsquo;t need classes, the number of libraries created specifically for this purpose led to the inclusion of classes in ECMAScript 6.\nWhile exploring ECMAScript 6 classes, it\u0026rsquo;s helpful to understand the underlying mechanisms that classes use, so this chapter starts by discussing how ECMAScript 5 developers achieved class-like behavior. As you will see after that, however, ECMAScript 6 classes aren\u0026rsquo;t exactly the same as classes in other languages. There\u0026rsquo;s a uniqueness about them that embraces the dynamic nature of JavaScript.\nClass-Like Structures in ECMAScript 5 In ECMAScript 5 and earlier, JavaScript had no classes. The closest equivalent to a class was creating a constructor and then assigning methods to the constructor\u0026rsquo;s prototype, an approach typically called creating a custom type. For example:\nfunction PersonType(name) { this.name = name; } PersonType.prototype.sayName = function () { console.log(this.name); }; let person = new PersonType(\u0026#34;Nicholas\u0026#34;); person.sayName(); // outputs \u0026#34;Nicholas\u0026#34; console.log(person instanceof PersonType); // true console.log(person instanceof Object); // true In this code, PersonType is a constructor function that creates a single property called name. The sayName() method is assigned to the prototype so the same function is shared by all instances of the PersonType object. Then, a new instance of PersonType is created via the new operator. The resulting person object is considered an instance of PersonType and of Object through prototypal inheritance.\nThis basic pattern underlies a lot of the class-mimicking JavaScript libraries, and that\u0026rsquo;s where ECMAScript 6 classes start.\nClass Declarations The simplest class form in ECMAScript 6 is the class declaration, which looks similar to classes in other languages.\nA Basic Class Declaration Class declarations begin with the class keyword followed by the name of the class. The rest of the syntax looks similar to concise methods in object literals, without requiring commas between them. For example, here\u0026rsquo;s a simple class declaration:\nclass PersonClass { // equivalent of the PersonType constructor constructor(name) { this.name = name; } // equivalent of PersonType.prototype.sayName sayName() { console.log(this.name); } } let person = new PersonClass(\u0026#34;Nicholas\u0026#34;); person.sayName(); // outputs \u0026#34;Nicholas\u0026#34; console.log(person instanceof PersonClass); // true console.log(person instanceof Object); // true console.log(typeof PersonClass); // \u0026#34;function\u0026#34; console.log(typeof PersonClass.prototype.sayName); // \u0026#34;function\u0026#34; The class declaration PersonClass behaves quite similarly to PersonType from the previous example. But instead of defining a function as the constructor, class declarations allow you to define the constructor directly inside the class with the special constructor method name. Since class methods use the concise syntax, there\u0026rsquo;s no need to use the function keyword. All other method names have no special meaning, so you can add as many methods as you want.\nI\u0026gt; Own properties, properties that occur on the instance rather than the prototype, can only be created inside a class constructor or method. In this example, name is an own property. I recommend creating all possible own properties inside the constructor function so a single place in the class is responsible for all of them.\nInterestingly, class declarations are just syntactic sugar on top of the existing custom type declarations. The PersonClass declaration actually creates a function that has the behavior of the constructor method, which is why typeof PersonClass gives \u0026quot;function\u0026quot; as the result. The sayName() method also ends up as a method on PersonClass.prototype in this example, similar to the relationship between sayName() and PersonType.prototype in the previous example. These similarities allow you to mix custom types and classes without worrying too much about which you\u0026rsquo;re using.\nWhy to Use the Class Syntax Despite the similarities between classes and custom types, there are some important differences to keep in mind:\nClass declarations, unlike function declarations, are not hoisted. Class declarations act like let declarations and so exist in the temporal dead zone until execution reaches the declaration. All code inside of class declarations runs in strict mode automatically. There\u0026rsquo;s no way to opt-out of strict mode inside of classes. All methods are non-enumerable. This is a significant change from custom types, where you need to use Object.defineProperty() to make a method non-enumerable. All methods lack an internal [[Construct]] method and will throw an error if you try to call them with new. Calling the class constructor without new throws an error. Attempting to overwrite the class name within a class method throws an error. With all of this in mind, the PersonClass declaration from the previous example is directly equivalent to the following code, which doesn\u0026rsquo;t use the class syntax:\n// direct equivalent of PersonClass let PersonType2 = (function () { \u0026#34;use strict\u0026#34;; const PersonType2 = function (name) { // make sure the function was called with new if (typeof new.target === \u0026#34;undefined\u0026#34;) { throw new Error(\u0026#34;Constructor must be called with new.\u0026#34;); } this.name = name; }; Object.defineProperty(PersonType2.prototype, \u0026#34;sayName\u0026#34;, { value: function () { // make sure the method wasn\u0026#39;t called with new if (typeof new.target !== \u0026#34;undefined\u0026#34;) { throw new Error(\u0026#34;Method cannot be called with new.\u0026#34;); } console.log(this.name); }, enumerable: false, writable: true, configurable: true }); return PersonType2; })();\rFirst, notice that there are two PersonType2 declarations: a let declaration in the outer scope and a const declaration inside the IIFE. This is how class methods are forbidden from overwriting the class name while code outside the class is allowed to do so. The constructor function checks new.target to ensure that it\u0026rsquo;s being called with new; if not, an error is thrown. Next, the sayName() method is defined as nonenumerable, and the method checks new.target to ensure that it wasn\u0026rsquo;t called with new. The final step returns the constructor function.\nThis example shows that while it\u0026rsquo;s possible to do everything classes do without using the new syntax, the class syntax simplifies all of the functionality significantly.\nA\u0026gt; ### Constant Class Names A\u0026gt; A\u0026gt; The name of a class is only specified as if using const inside of the class itself. That means you can overwrite the class name outside of the class but not inside a class method. For example: A\u0026gt; A\u0026gt; js A\u0026gt; class Foo { A\u0026gt; constructor() { A\u0026gt; Foo = \u0026quot;bar\u0026quot;; // throws an error when executed A\u0026gt; } A\u0026gt; } A\u0026gt; A\u0026gt;// but this is okay after the class declaration A\u0026gt; Foo = \u0026quot;baz\u0026quot;; A\u0026gt; A\u0026gt; A\u0026gt; In this code, the Foo inside the class constructor is a separate binding from the Foo outside the class. The internal Foo is defined as if it\u0026rsquo;s a const and cannot be overwritten. An error is thrown when the constructor attempts to overwrite Foo with any value. But since the external Foo is defined as if it\u0026rsquo;s a let declaration, you can overwrite its value at any time.\nClass Expressions Classes and functions are similar in that they have two forms: declarations and expressions. Function and class declarations begin with an appropriate keyword (function or class, respectively) followed by an identifier. Functions have an expression form that doesn\u0026rsquo;t require an identifier after function, and similarly, classes have an expression form that doesn\u0026rsquo;t require an identifier after class. These class expressions are designed to be used in variable declarations or passed into functions as arguments.\nA Basic Class Expression Here\u0026rsquo;s the class expression equivalent of the previous PersonClass examples, followed by some code that uses it:\nlet PersonClass = class { // equivalent of the PersonType constructor constructor(name) { this.name = name; } // equivalent of PersonType.prototype.sayName sayName() { console.log(this.name); } }; let person = new PersonClass(\u0026#34;Nicholas\u0026#34;); person.sayName(); // outputs \u0026#34;Nicholas\u0026#34; console.log(person instanceof PersonClass); // true console.log(person instanceof Object); // true console.log(typeof PersonClass); // \u0026#34;function\u0026#34; console.log(typeof PersonClass.prototype.sayName); // \u0026#34;function\u0026#34; As this example demonstrates, class expressions do not require identifiers after class. Aside from the syntax, class expressions are functionally equivalent to class declarations.\nWhether you use class declarations or class expressions is mostly a matter of style. Unlike function declarations and function expressions, both class declarations and class expressions are not hoisted, and so the choice has little bearing on the runtime behavior of the code.\nNamed Class Expressions The previous section used an anonymous class expression in the example, but just like function expressions, you can also name class expressions. To do so, include an identifier after the class keyword like this:\nlet PersonClass = class PersonClass2 { // equivalent of the PersonType constructor constructor(name) { this.name = name; } // equivalent of PersonType.prototype.sayName sayName() { console.log(this.name); } }; console.log(typeof PersonClass); // \u0026#34;function\u0026#34; console.log(typeof PersonClass2); // \u0026#34;undefined\u0026#34; In this example, the class expression is named PersonClass2. The PersonClass2 identifier exists only within the class definition so that it can be used inside the class methods (such as the sayName() method in this example). Outside the class, typeof PersonClass2 is \u0026quot;undefined\u0026quot; because no PersonClass2 binding exists there. To understand why this is, look at an equivalent declaration that doesn\u0026rsquo;t use classes:\n// direct equivalent of PersonClass named class expression let PersonClass = (function () { \u0026#34;use strict\u0026#34;; const PersonClass2 = function (name) { // make sure the function was called with new if (typeof new.target === \u0026#34;undefined\u0026#34;) { throw new Error(\u0026#34;Constructor must be called with new.\u0026#34;); } this.name = name; }; Object.defineProperty(PersonClass2.prototype, \u0026#34;sayName\u0026#34;, { value: function () { // make sure the method wasn\u0026#39;t called with new if (typeof new.target !== \u0026#34;undefined\u0026#34;) { throw new Error(\u0026#34;Method cannot be called with new.\u0026#34;); } console.log(this.name); }, enumerable: false, writable: true, configurable: true }); return PersonClass2; })();\rCreating a named class expression slightly changes what\u0026rsquo;s happening in the JavaScript engine. For class declarations, the outer binding (defined with let) has the same name as the inner binding (defined with const). A named class expression uses its name in the const definition, so PersonClass2 is defined for use only inside the class.\nWhile named class expressions behave differently from named function expressions, there are still a lot of similarities between the two. Both can be used as values, and that opens up a lot of possibilities, which I\u0026rsquo;ll cover next.\nClasses as First-Class Citizens In programming, something is said to be a first-class citizen when it can be used as a value, meaning it can be passed into a function, returned from a function, and assigned to a variable. JavaScript functions are first-class citizens (sometimes they\u0026rsquo;re just called first class functions), and that\u0026rsquo;s part of what makes JavaScript unique.\nECMAScript 6 continues this tradition by making classes first-class citizens as well. That allows classes to be used in a lot of different ways. For example, they can be passed into functions as arguments:\nfunction createObject(classDef) { return new classDef(); } let obj = createObject( class { sayHi() { console.log(\u0026#34;Hi!\u0026#34;); } } ); obj.sayHi(); // \u0026#34;Hi!\u0026#34; In this example, the createObject() function is called with an anonymous class expression as an argument, creates an instance of that class with new, and returns the instance. The variable obj then stores the returned instance.\nAnother interesting use of class expressions is creating singletons by immediately invoking the class constructor. To do so, you must use new with a class expression and include parentheses at the end. For example:\nlet person = new (class { constructor(name) { this.name = name; } sayName() { console.log(this.name); } })(\u0026#34;Nicholas\u0026#34;); person.sayName(); // \u0026#34;Nicholas\u0026#34; Here, an anonymous class expression is created and then executed immediately. This pattern allows you to use the class syntax for creating singletons without leaving a class reference available for inspection. (Remember that PersonClass only creates a binding inside of the class, not outside.) The parentheses at the end of the class expression are the indicator that you\u0026rsquo;re calling a function while also allowing you to pass in an argument.\nThe examples in this chapter so far have focused on classes with methods. But you can also create accessor properties on classes using a syntax similar to object literals.\nAccessor Properties While own properties should be created inside class constructors, classes allow you to define accessor properties on the prototype. To create a getter, use the keyword get followed by a space, followed by an identifier; to create a setter, do the same using the keyword set. For example:\nclass CustomHTMLElement { constructor(element) { this.element = element; } get html() { return this.element.innerHTML; } set html(value) { this.element.innerHTML = value; } } var descriptor = Object.getOwnPropertyDescriptor(CustomHTMLElement.prototype, \u0026#34;html\u0026#34;); console.log(\u0026#34;get\u0026#34; in descriptor); // true console.log(\u0026#34;set\u0026#34; in descriptor); // true console.log(descriptor.enumerable); // false In this code, the CustomHTMLElement class is made as a wrapper around an existing DOM element. It has both a getter and setter for html that delegates to the innerHTML method on the element itself. This accessor property is created on the CustomHTMLElement.prototype and, just like any other method would be, is created as non-enumerable. The equivalent non-class representation is:\n// direct equivalent to previous example let CustomHTMLElement = (function () { \u0026#34;use strict\u0026#34;; const CustomHTMLElement = function (element) { // make sure the function was called with new if (typeof new.target === \u0026#34;undefined\u0026#34;) { throw new Error(\u0026#34;Constructor must be called with new.\u0026#34;); } this.element = element; }; Object.defineProperty(CustomHTMLElement.prototype, \u0026#34;html\u0026#34;, { enumerable: false, configurable: true, get: function () { return this.element.innerHTML; }, set: function (value) { this.element.innerHTML = value; } }); return CustomHTMLElement; })();\rAs with previous examples, this one shows just how much code you can save by using a class instead of the non-class equivalent. The html accessor property definition alone is almost the size of the equivalent class declaration.\nComputed Member Names The similarities between object literals and classes aren\u0026rsquo;t quite over yet. Class methods and accessor properties can also have computed names. Instead of using an identifier, use square brackets around an expression, which is the same syntax used for object literal computed names. For example:\nlet methodName = \u0026#34;sayName\u0026#34;; class PersonClass { constructor(name) { this.name = name; } [methodName]() { console.log(this.name); } } let me = new PersonClass(\u0026#34;Nicholas\u0026#34;); me.sayName(); // \u0026#34;Nicholas\u0026#34; This version of PersonClass uses a variable to assign a name to a method inside its definition. The string \u0026quot;sayName\u0026quot; is assigned to the methodName variable, and then methodName is used to declare the method. The sayName() method is later accessed directly.\nAccessor properties can use computed names in the same way, like this:\nlet propertyName = \u0026#34;html\u0026#34;; class CustomHTMLElement { constructor(element) { this.element = element; } get [propertyName]() { return this.element.innerHTML; } set [propertyName](value) { this.element.innerHTML = value; } }\rHere, the getter and setter for html are set using the propertyName variable. Accessing the property by using .html only affects the definition.\nYou\u0026rsquo;ve seen that there are a lot of similarities between classes and object literals, with methods, accessor properties, and computed names. There\u0026rsquo;s just one more similarity to cover: generators.\nGenerator Methods When Chapter 8 introduced generators, you learned how to define a generator on an object literal by prepending a star (*) to the method name. The same syntax works for classes as well, allowing any method to be a generator. Here\u0026rsquo;s an example:\nclass MyClass { *createIterator() { yield 1; yield 2; yield 3; } } let instance = new MyClass(); let iterator = instance.createIterator();\rThis code creates a class called MyClass with a createIterator() generator method. The method returns an iterator whose values are hardcoded into the generator. Generator methods are useful when you have an object that represents a collection of values and you\u0026rsquo;d like to iterate over those values easily. Arrays, sets, and maps all have multiple generator methods to account for the different ways developers need to interact with their items.\nWhile generator methods are useful, defining a default iterator for your class is much more helpful if the class represents a collection of values. You can define the default iterator for a class by using Symbol.iterator to define a generator method, such as:\nclass Collection { constructor() { this.items = []; } *[Symbol.iterator]() { yield* this.items.values(); } } var collection = new Collection(); collection.items.push(1); collection.items.push(2); collection.items.push(3); for (let x of collection) { console.log(x); } // Output: // 1 // 2 // 3 This example uses a computed name for a generator method that delegates to the values() iterator of the this.items array. Any class that manages a collection of values should include a default iterator because some collection-specific operations require collections they operate on to have an iterator. Now, any instance of Collection can be used directly in a for-of loop or with the spread operator.\nAdding methods and accessor properties to a class prototype is useful when you want those to show up on object instances. If, on the other hand, you\u0026rsquo;d like methods or accessor properties on the class itself, then you\u0026rsquo;ll need to use static members.\nStatic Members Adding additional methods directly onto constructors to simulate static members is another common pattern in ECMAScript 5 and earlier. For example:\nfunction PersonType(name) { this.name = name; } // static method PersonType.create = function (name) { return new PersonType(name); }; // instance method PersonType.prototype.sayName = function () { console.log(this.name); }; var person = PersonType.create(\u0026#34;Nicholas\u0026#34;);\rIn other programming languages, the factory method called PersonType.create() would be considered a static method, as it doesn\u0026rsquo;t depend on an instance of PersonType for its data. ECMAScript 6 classes simplify the creation of static members by using the formal static annotation before the method or accessor property name. For instance, here\u0026rsquo;s the class equivalent of the last example:\nclass PersonClass { // equivalent of the PersonType constructor constructor(name) { this.name = name; } // equivalent of PersonType.prototype.sayName sayName() { console.log(this.name); } // equivalent of PersonType.create static create(name) { return new PersonClass(name); } } let person = PersonClass.create(\u0026#34;Nicholas\u0026#34;);\rThe PersonClass definition has a single static method called create(). The method syntax is the same used for sayName() except for the static keyword. You can use the static keyword on any method or accessor property definition within a class. The only restriction is that you can\u0026rsquo;t use static with the constructor method definition.\nW\u0026gt; Static members are not accessible from instances. You must always access static members from the class directly.\nInheritance with Derived Classes Prior to ECMAScript 6, implementing inheritance with custom types was an extensive process. Proper inheritance required multiple steps. For instance, consider this example:\nfunction Rectangle(length, width) { this.length = length; this.width = width; } Rectangle.prototype.getArea = function () { return this.length * this.width; }; function Square(length) { Rectangle.call(this, length, length); } Square.prototype = Object.create(Rectangle.prototype, { constructor: { value: Square, enumerable: false, writable: true, configurable: true } }); var square = new Square(3); console.log(square.getArea()); // 9 console.log(square instanceof Square); // true console.log(square instanceof Rectangle); // true Square inherits from Rectangle, and to do so, it must overwrite Square.prototype with a new object created from Rectangle.prototype as well as call the Rectangle.call() method. These steps often confused JavaScript newcomers and were a source of errors for experienced developers.\nClasses make inheritance easier to implement by using the familiar extends keyword to specify the function from which the class should inherit. The prototypes are automatically adjusted, and you can access the base class constructor by calling the super() method. Here\u0026rsquo;s the ECMAScript 6 equivalent of the previous example:\nclass Rectangle { constructor(length, width) { this.length = length; this.width = width; } getArea() { return this.length * this.width; } } class Square extends Rectangle { constructor(length) { // same as Rectangle.call(this, length, length) super(length, length); } } var square = new Square(3); console.log(square.getArea()); // 9 console.log(square instanceof Square); // true console.log(square instanceof Rectangle); // true This time, the Square class inherits from Rectangle using the extends keyword. The Square constructor uses super() to call the Rectangle constructor with the specified arguments. Note that unlike the ECMAScript 5 version of the code, the identifier Rectangle is only used within the class declaration (after extends).\nClasses that inherit from other classes are referred to as derived classes. Derived classes require you to use super() if you specify a constructor; if you don\u0026rsquo;t, an error will occur. If you choose not to use a constructor, then super() is automatically called for you with all arguments upon creating a new instance of the class. For instance, the following two classes are identical:\nclass Square extends Rectangle { // no constructor } // Is equivalent to class Square extends Rectangle { constructor(...args) { super(...args); } }\rThe second class in this example shows the equivalent of the default constructor for all derived classes. All of the arguments are passed, in order, to the base class constructor. In this case, the functionality isn\u0026rsquo;t quite correct because the Square constructor needs only one argument, and so it\u0026rsquo;s best to manually define the constructor.\nW\u0026gt; There are a few things to keep in mind when using super(): W\u0026gt; W\u0026gt; 1. You can only use super() in a derived class. If you try to use it in a non-derived class (a class that doesn\u0026rsquo;t use extends) or a function, it will throw an error. W\u0026gt; 1. You must call super() before accessing this in the constructor. Since super() is responsible for initializing this, attempting to access this before calling super() results in an error. W\u0026gt; 1. The only way to avoid calling super() is to return an object from the class constructor.\nShadowing Class Methods The methods on derived classes always shadow methods of the same name on the base class. For instance, you can add getArea() to Square to redefine that functionality:\nclass Square extends Rectangle { constructor(length) { super(length, length); } // override and shadow Rectangle.prototype.getArea() getArea() { return this.length * this.length; } }\rSince getArea() is defined as part of Square, the Rectangle.prototype.getArea() method will no longer be called by any instances of Square. Of course, you can always decide to call the base class version of the method by using the super.getArea() method, like this:\nclass Square extends Rectangle { constructor(length) { super(length, length); } // override, shadow, and call Rectangle.prototype.getArea() getArea() { return super.getArea(); } }\rUsing super in this way works the same as the the super references discussed in Chapter 4 (see \u0026ldquo;Easy Prototype Access With Super References\u0026rdquo;). The this value is automatically set correctly so you can make a simple method call.\nInherited Static Members If a base class has static members, then those static members are also available on the derived class. Inheritance works like that in other languages, but this is a new concept for JavaScript. Here\u0026rsquo;s an example:\nclass Rectangle { constructor(length, width) { this.length = length; this.width = width; } getArea() { return this.length * this.width; } static create(length, width) { return new Rectangle(length, width); } } class Square extends Rectangle { constructor(length) { // same as Rectangle.call(this, length, length) super(length, length); } } var rect = Square.create(3, 4); console.log(rect instanceof Rectangle); // true console.log(rect.getArea()); // 12 console.log(rect instanceof Square); // false In this code, a new static create() method is added to the Rectangle class. Through inheritance, that method is available as Square.create() and behaves in the same manner as the Rectangle.create() method.\nDerived Classes from Expressions Perhaps the most powerful aspect of derived classes in ECMAScript 6 is the ability to derive a class from an expression. You can use extends with any expression as long as the expression resolves to a function with [[Construct]] and a prototype. For instance:\nfunction Rectangle(length, width) { this.length = length; this.width = width; } Rectangle.prototype.getArea = function () { return this.length * this.width; }; class Square extends Rectangle { constructor(length) { super(length, length); } } var x = new Square(3); console.log(x.getArea()); // 9 console.log(x instanceof Rectangle); // true Rectangle is defined as an ECMAScript 5-style constructor while Square is a class. Since Rectangle has [[Construct]] and a prototype, the Square class can still inherit directly from it.\nAccepting any type of expression after extends offers powerful possibilities, such as dynamically determining what to inherit from. For example:\nfunction Rectangle(length, width) { this.length = length; this.width = width; } Rectangle.prototype.getArea = function () { return this.length * this.width; }; function getBase() { return Rectangle; } class Square extends getBase() { constructor(length) { super(length, length); } } var x = new Square(3); console.log(x.getArea()); // 9 console.log(x instanceof Rectangle); // true The getBase() function is called directly as part of the class declaration. It returns Rectangle, making this example is functionally equivalent to the previous one. And since you can determine the base class dynamically, it\u0026rsquo;s possible to create different inheritance approaches. For instance, you can effectively create mixins:\nlet SerializableMixin = { serialize() { return JSON.stringify(this); } }; let AreaMixin = { getArea() { return this.length * this.width; } }; function mixin(...mixins) { var base = function () {}; Object.assign(base.prototype, ...mixins); return base; } class Square extends mixin(AreaMixin, SerializableMixin) { constructor(length) { super(); this.length = length; this.width = length; } } var x = new Square(3); console.log(x.getArea()); // 9 console.log(x.serialize()); // \u0026#34;{\u0026#34;length\u0026#34;:3,\u0026#34;width\u0026#34;:3}\u0026#34; In this example, mixins are used instead of classical inheritance. The mixin() function takes any number of arguments that represent mixin objects. It creates a function called base and assigns the properties of each mixin object to the prototype. The function is then returned so Square can use extends. Keep in mind that since extends is still used, you are required to call super() in the constructor.\nThe instance of Square has both getArea() from AreaMixin and serialize from SerializableMixin. This is accomplished through prototypal inheritance. The mixin() function dynamically populates the prototype of a new function with all of the own properties of each mixin. (Keep in mind that if multiple mixins have the same property, only the last property added will remain.)\nW\u0026gt; Any expression can be used after extends, but not all expressions result in a valid class. Specifically, the following expression types cause errors: W\u0026gt; W\u0026gt; _ null W\u0026gt; _ generator functions (covered in Chapter 8) W\u0026gt; W\u0026gt; In these cases, attempting to create a new instance of the class will throw an error because there is no [[Construct]] to call.\nInheriting from Built-ins For almost as long as JavaScript arrays have existed, developers have wanted to create their own special array types through inheritance. In ECMAScript 5 and earlier, this wasn\u0026rsquo;t possible. Attempting to use classical inheritance didn\u0026rsquo;t result in functioning code. For example:\n// built-in array behavior var colors = []; colors[0] = \u0026#34;red\u0026#34;; console.log(colors.length); // 1 colors.length = 0; console.log(colors[0]); // undefined // trying to inherit from array in ES5 function MyArray() { Array.apply(this, arguments); } MyArray.prototype = Object.create(Array.prototype, { constructor: { value: MyArray, writable: true, configurable: true, enumerable: true } }); var colors = new MyArray(); colors[0] = \u0026#34;red\u0026#34;; console.log(colors.length); // 0 colors.length = 0; console.log(colors[0]); // \u0026#34;red\u0026#34; The console.log() output at the end of this code shows how using the classical form of JavaScript inheritance on an array results in unexpected behavior. The length and numeric properties on an instance of MyArray don\u0026rsquo;t behave the same as they do for the built-in array because this functionality isn\u0026rsquo;t covered either by Array.apply() or by assigning the prototype.\nOne goal of ECMAScript 6 classes is to allow inheritance from all built-ins. In order to accomplish this, the inheritance model of classes is slightly different than the classical inheritance model found in ECMAScript 5 and earlier:\nIn ECMAScript 5 classical inheritance, the value of this is first created by the derived type (for example, MyArray), and then the base type constructor (like the Array.apply() method) is called. That means this starts out as an instance of MyArray and then is decorated with additional properties from Array.\nIn ECMAScript 6 class-based inheritance, the value of this is first created by the base (Array) and then modified by the derived class constructor (MyArray). The result is that this starts with all the built-in functionality of the base and correctly receives all functionality related to it.\nThe following example shows a class-based special array in action:\nclass MyArray extends Array { // empty } var colors = new MyArray(); colors[0] = \u0026#34;red\u0026#34;; console.log(colors.length); // 1 colors.length = 0; console.log(colors[0]); // undefined MyArray inherits directly from Array and therefore works like Array. Interacting with numeric properties updates the length property, and manipulating the length property updates the numeric properties. That means you can both properly inherit from Array to create your own derived array classes and inherit from other built-ins as well. With all this added functionality, ECMAScript 6 and derived classes have effectively removed the last special case of inheriting from built-ins, but that case is still worth exploring.\nThe Symbol.species Property An interesting aspect of inheriting from built-ins is that any method that returns an instance of the built-in will automatically return a derived class instance instead. So, if you have a derived class called MyArray that inherits from Array, methods such as slice() return an instance of MyArray. For example:\nclass MyArray extends Array { // empty } let items = new MyArray(1, 2, 3, 4), subitems = items.slice(1, 3); console.log(items instanceof MyArray); // true console.log(subitems instanceof MyArray); // true In this code, the slice() method returns a MyArray instance. The slice() method is inherited from Array and returns an instance of Array normally. Behind the scenes, it\u0026rsquo;s the Symbol.species property that is making this change.\nThe Symbol.species well-known symbol is used to define a static accessor property that returns a function. That function is a constructor to use whenever an instance of the class must be created inside of an instance method (instead of using the constructor). The following builtin types have Symbol.species defined:\nArray ArrayBuffer (discussed in Chapter 10) Map Promise RegExp Set Typed Arrays (discussed in Chapter 10) Each of these types has a default Symbol.species property that returns this, meaning the property will always return the constructor function. If you were to implement that functionality on a custom class, the code would look like this:\n// several builtin types use species similar to this class MyClass { static get [Symbol.species]() { return this; } constructor(value) { this.value = value; } clone() { return new this.constructor[Symbol.species](this.value); } }\rIn this example, the Symbol.species well-known symbol is used to assign a static accessor property to MyClass. Note that there\u0026rsquo;s only a getter without a setter, because changing the species of a class isn\u0026rsquo;t possible. Any call to this.constructor[Symbol.species] returns MyClass. The clone() method uses that definition to return a new instance rather than directly using MyClass, which allows derived classes to override that value. For example:\nclass MyClass { static get [Symbol.species]() { return this; } constructor(value) { this.value = value; } clone() { return new this.constructor[Symbol.species](this.value); } } class MyDerivedClass1 extends MyClass { // empty } class MyDerivedClass2 extends MyClass { static get [Symbol.species]() { return MyClass; } } let instance1 = new MyDerivedClass1(\u0026#34;foo\u0026#34;), clone1 = instance1.clone(), instance2 = new MyDerivedClass2(\u0026#34;bar\u0026#34;), clone2 = instance2.clone(); console.log(clone1 instanceof MyClass); // true console.log(clone1 instanceof MyDerivedClass1); // true console.log(clone2 instanceof MyClass); // true console.log(clone2 instanceof MyDerivedClass2); // false Here, MyDerivedClass1 inherits from MyClass and doesn\u0026rsquo;t change the Symbol.species property. When clone() is called, it returns an instance of MyDerivedClass1 because this.constructor[Symbol.species] returns MyDerivedClass1. The MyDerivedClass2 class inherits from MyClass and overrides Symbol.species to return MyClass. When clone() is called on an instance of MyDerivedClass2, the return value is an instance of MyClass. Using Symbol.species, any derived class can determine what type of value should be returned when a method returns an instance.\nFor instance, Array uses Symbol.species to specify the class to use for methods that return an array. In a class derived from Array, you can determine the type of object returned from the inherited methods, such as:\nclass MyArray extends Array { static get [Symbol.species]() { return Array; } } let items = new MyArray(1, 2, 3, 4), subitems = items.slice(1, 3); console.log(items instanceof MyArray); // true console.log(subitems instanceof Array); // true console.log(subitems instanceof MyArray); // false This code overrides Symbol.species on MyArray, which inherits from Array. All of the inherited methods that return arrays will now use an instance of Array instead of MyArray.\nIn general, you should use the Symbol.species property whenever you might want to use this.constructor in a class method. Doing so allows derived classes to override the return type easily. Additionally, if you are creating derived classes from a class that has Symbol.species defined, be sure to use that value instead of the constructor.\nUsing new.target in Class Constructors In Chapter 3, you learned about new.target and how its value changes depending on how a function is called. You can also use new.target in class constructors to determine how the class is being invoked. In the simple case, new.target is equal to the constructor function for the class, as in this example:\nclass Rectangle { constructor(length, width) { console.log(new.target === Rectangle); this.length = length; this.width = width; } } // new.target is Rectangle var obj = new Rectangle(3, 4); // outputs true This code shows that new.target is equivalent to Rectangle when new Rectangle(3, 4) is called. Class constructors can\u0026rsquo;t be called without new, so the new.target property is always defined inside of class constructors. But the value may not always be the same. Consider this code:\nclass Rectangle { constructor(length, width) { console.log(new.target === Rectangle); this.length = length; this.width = width; } } class Square extends Rectangle { constructor(length) { super(length, length); } } // new.target is Square var obj = new Square(3); // outputs false Square is calling the Rectangle constructor, so new.target is equal to Square when the Rectangle constructor is called. This is important because it gives each constructor the ability to alter its behavior based on how it\u0026rsquo;s being called. For instance, you can create an abstract base class (one that can\u0026rsquo;t be instantiated directly) by using new.target as follows:\n// abstract base class class Shape { constructor() { if (new.target === Shape) { throw new Error(\u0026#34;This class cannot be instantiated directly.\u0026#34;); } } } class Rectangle extends Shape { constructor(length, width) { super(); this.length = length; this.width = width; } } var x = new Shape(); // throws error var y = new Rectangle(3, 4); // no error console.log(y instanceof Shape); // true In this example, the Shape class constructor throws an error whenever new.target is Shape, meaning that new Shape() always throws an error. However, you can still use Shape as a base class, which is what Rectangle does. The super() call executes the Shape constructor and new.target is equal to Rectangle so the constructor continues without error.\nI\u0026gt; Since classes can\u0026rsquo;t be called without new, the new.target property is never undefined inside of a class constructor.\nSummary ECMAScript 6 classes make inheritance in JavaScript easier to use, so you don\u0026rsquo;t need to throw away any existing understanding of inheritance you might have from other languages. ECMAScript 6 classes start out as syntactic sugar for the classical inheritance model of ECMAScript 5, but add a lot of features to reduce mistakes.\nECMAScript 6 classes work with prototypal inheritance by defining non-static methods on the class prototype, while static methods end up on the constructor itself. All methods are non-enumerable, a feature that better matches the behavior of built-in objects for which methods are typically non-enumerable by default. Additionally, class constructors can\u0026rsquo;t be called without new, ensuring that you can\u0026rsquo;t accidentally call a class as a function.\nClass-based inheritance allows you to derive a class from another class, function, or expression. This ability means you can call a function to determine the correct base to inherit from, allowing you to use mixins and other different composition patterns to create a new class. Inheritance works in such a way that inheriting from built-in objects like Array is now possible and works as expected.\nYou can use new.target in class constructors to behave differently depending on how the class is called. The most common use is to create an abstract base class that throws an error when instantiated directly but still allows inheritance via other classes.\nOverall, classes are an important addition to JavaScript. They provide a more concise syntax and better functionality for defining custom object types in a safe, consistent manner.\n","date":"0001-01-01","id":36,"permalink":"/es6/09-classes/","summary":"\u003cp\u003eUnlike most formal object-oriented programming languages, JavaScript didn\u0026rsquo;t support classes and classical inheritance as the primary way of defining similar and related objects when it was created. This left many developers confused, and from pre-ECMAScript 1 all the way through ECMAScript 5, many libraries created utilities to make JavaScript look like it supports classes. While some JavaScript developers do feel strongly that the language doesn\u0026rsquo;t need classes, the number of libraries created specifically for this purpose led to the inclusion of classes in ECMAScript 6.\u003c/p\u003e","tags":[],"title":"09 Introducing JavaScript Classes"},{"content":"1. Determining Even/Odd Numbers const checkEvenOdd = (number) =\u0026gt; (number % 2 === 0 ? \u0026#34;Even\u0026#34; : \u0026#34;Odd\u0026#34;); console.log(checkEvenOdd(4)); // Output: Even 2. Checking for Prime Numbers const isPrime = (number) =\u0026gt; { if (number \u0026lt;= 1) return \u0026#34;Not Prime\u0026#34;; for (let i = 2; i \u0026lt;= Math.sqrt(number); i++) { if (number % i === 0) return \u0026#34;Not Prime\u0026#34;; } return \u0026#34;Prime\u0026#34;; }; console.log(isPrime(7)); // Output: Prime 3. Validating Leap Years const isLeapYear = (year) =\u0026gt; ((year % 4 === 0 \u0026amp;\u0026amp; year % 100 !== 0) || year % 400 === 0 ? \u0026#34;Leap Year\u0026#34; : \u0026#34;Not a Leap Year\u0026#34;); console.log(isLeapYear(2020)); // Output: Leap Year 4. Calculating Armstrong Numbers const isArmstrongNumber = (number) =\u0026gt; { const digits = number.toString().split(\u0026#34;\u0026#34;); const sum = digits.reduce((acc, digit) =\u0026gt; acc + Math.pow(Number(digit), digits.length), 0); return sum === number ? \u0026#34;Armstrong Number\u0026#34; : \u0026#34;Not an Armstrong Number\u0026#34;; }; console.log(isArmstrongNumber(153)); // Output: Armstrong Number 5. Generating the Fibonacci Series const generateFibonacci = (limit) =\u0026gt; { const fib = [0, 1]; let next = fib[0] + fib[1]; while (next \u0026lt;= limit) { fib.push(next); next = fib[fib.length - 1] + fib[fib.length - 2]; } return fib; }; console.log(generateFibonacci(10)); // Output: [0, 1, 1, 2, 3, 5, 8] 6. Identifying Palindromes const isPalindrome = (input) =\u0026gt; { const str = input.toString(); return str === str.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;) ? \u0026#34;Palindrome\u0026#34; : \u0026#34;Not a Palindrome\u0026#34;; }; console.log(isPalindrome(\u0026#34;radar\u0026#34;)); // Output: Palindrome 7. Crafting Star Patterns (Pyramid)\n// pyramid star pattern function generateStarPattern(patternType, height) { if (patternType === \u0026#34;pyramid\u0026#34;) { for (let i = 1; i \u0026lt;= height; i++) { const spaces = \u0026#34; \u0026#34;.repeat(height - i); // Leading spaces const stars = \u0026#34;*\u0026#34;.repeat(2 * i - 1); // Stars in the row console.log(spaces + stars); } } else { console.log(\u0026#34;Pattern type not supported.\u0026#34;); } } const patternType = \u0026#34;pyramid\u0026#34;; const height = 5; generateStarPattern(patternType, height);\rExplanation:\nSpaces: For each row, we calculate the number of leading spaces using \u0026quot; \u0026quot;.repeat(height - i), which decreases as we go down. Stars: For each row, the number of stars follows the formula 2 * i - 1. Combination: Combine the spaces and stars to form the row and print it. When run with patternType = \u0026quot;pyramid\u0026quot; and height = 5, the output will be:\n*\r***\r*****\r*******\r*********\r8. Finding the Factorial of a Number const factorial = (number) =\u0026gt; { let result = 1; for (let i = 2; i \u0026lt;= number; i++) { result *= i; } return result; }; console.log(factorial(5)); // Output: 120 9. Summing Digits of a Number const sumDigits = (number) =\u0026gt; number .toString() .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Number(digit), 0); console.log(sumDigits(1234)); // Output: 10 10. Finding the Greatest Common Divisor (GCD) const gcd = (a, b) =\u0026gt; { while (b !== 0) { [a, b] = [b, a % b]; } return a; }; console.log(gcd(48, 18)); // Output: 6 11. Finding the Least Common Multiple (LCM) const lcm = (a, b) =\u0026gt; (a * b) / gcd(a, b); console.log(lcm(12, 15)); // Output: 60 12. Counting Vowels and Consonants in a String const countVowelsConsonants = (str) =\u0026gt; { const vowels = \u0026#34;aeiouAEIOU\u0026#34;; let vowelCount = 0, consonantCount = 0; for (let char of str) { if (/[a-zA-Z]/.test(char)) { vowels.includes(char) ? vowelCount++ : consonantCount++; } } return `Vowels: ${vowelCount}, Consonants: ${consonantCount}`; }; console.log(countVowelsConsonants(\u0026#34;hello world\u0026#34;)); // Output: Vowels: 3, Consonants: 7 13. Reversing a String const reverseString = (str) =\u0026gt; str.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;); console.log(reverseString(\u0026#34;programming\u0026#34;)); // Output: \u0026#34;gnimmargorp\u0026#34; 14. Finding the Largest and Smallest Numbers in an Array const findLargestSmallest = (array) =\u0026gt; ({ Largest: Math.max(...array), Smallest: Math.min(...array) }); console.log(findLargestSmallest([4, 7, 1, 8, 5])); // Output: { Largest: 8, Smallest: 1 } 15. Sorting an Array const sortArray = (array) =\u0026gt; array.slice().sort((a, b) =\u0026gt; a - b); console.log(sortArray([3, 1, 4, 1, 5, 9])); // Output: [1, 1, 3, 4, 5, 9] 16. Finding the Sum of Elements in an Array const sumArray = (array) =\u0026gt; array.reduce((sum, num) =\u0026gt; sum + num, 0); console.log(sumArray([1, 2, 3, 4, 5])); // Output: 15 Each function includes the necessary logic for solving the problem, and you can test them by changing the input values in the console.log calls. Let me know if you need more assistance! 😊\n","date":"0001-01-01","id":37,"permalink":"/prep-1/prep-1/1-to-10/1.-determining-even/odd-numbers/","summary":"\u003ch3 id=\"1-determining-evenodd-numbers\"\u003e1. \u003cstrong\u003eDetermining Even/Odd Numbers\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003echeckEvenOdd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Even\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Odd\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003echeckEvenOdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Even\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"2-checking-for-prime-numbers\"\u003e2. \u003cstrong\u003eChecking for Prime Numbers\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Prime\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Prime\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Prime\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Prime\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"3-validating-leap-years\"\u003e3. \u003cstrong\u003eValidating Leap Years\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisLeapYear\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eyear\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e100\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"nx\"\u003eyear\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e400\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Leap Year\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not a Leap Year\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisLeapYear\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2020\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Leap Year\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"4-calculating-armstrong-numbers\"\u003e4. \u003cstrong\u003eCalculating Armstrong Numbers\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisArmstrongNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Armstrong Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not an Armstrong Number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisArmstrongNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e153\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Armstrong Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"5-generating-the-fibonacci-series\"\u003e5. \u003cstrong\u003eGenerating the Fibonacci Series\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egenerateFibonacci\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elimit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003elimit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egenerateFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: [0, 1, 1, 2, 3, 5, 8]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"6-identifying-palindromes\"\u003e6. \u003cstrong\u003eIdentifying Palindromes\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPalindrome\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Palindrome\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not a Palindrome\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;radar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Palindrome\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003e7. Crafting Star Patterns (Pyramid)\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"1. Determining Even/Odd Numbers"},{"content":"The array is a foundational JavaScript object. But while other aspects of JavaScript have evolved over time, arrays remained the same until ECMAScript 5 introduced several methods to make them easier to use. ECMAScript 6 continues to improve arrays by adding a lot more functionality, like new creation methods, several useful convenience methods, and the ability to make typed arrays.\nCreating Arrays Prior to ECMAScript 6, there were two primary ways to create arrays: the Array constructor and array literal syntax. Both approaches require listing array items individually and are otherwise fairly limited. Options for converting an array-like object (that is, an object with numeric indices and a length property) into an array were also limited and often required extra code. To make JavaScript arrays easier to create, ECMAScript 6 adds the Array.of() and Array.from() methods.\nThe Array.of() Method One reason ECMAScript 6 adds new creation methods to JavaScript is to help developers avoid a quirk of creating arrays with the Array constructor. The new Array() constructor actually behaves differently based on the type and number of arguments passed to it. For example:\nlet items = new Array(2); console.log(items.length); // 2 console.log(items[0]); // undefined console.log(items[1]); // undefined items = new Array(\u0026#34;2\u0026#34;); console.log(items.length); // 1 console.log(items[0]); // \u0026#34;2\u0026#34; items = new Array(1, 2); console.log(items.length); // 2 console.log(items[0]); // 1 console.log(items[1]); // 2 items = new Array(3, \u0026#34;2\u0026#34;); console.log(items.length); // 2 console.log(items[0]); // 3 console.log(items[1]); // \u0026#34;2\u0026#34; When the Array constructor is passed a single numeric value, the length property of the array is set to that value. If a single non-numeric value is passed, then that value becomes the one and only item in the array. If multiple values are passed (numeric or not), then those values become items in the array. This behavior is both confusing and risky, as you may not always be aware of the type of data being passed.\nECMAScript 6 introduces Array.of() to solve this problem. The Array.of() method works similarly to the Array constructor but has no special case regarding a single numeric value. The Array.of() method always creates an array containing its arguments regardless of the number of arguments or the argument types. Here are some examples that use the Array.of() method:\nlet items = Array.of(1, 2); console.log(items.length); // 2 console.log(items[0]); // 1 console.log(items[1]); // 2 items = Array.of(2); console.log(items.length); // 1 console.log(items[0]); // 2 items = Array.of(\u0026#34;2\u0026#34;); console.log(items.length); // 1 console.log(items[0]); // \u0026#34;2\u0026#34; To create an array with the Array.of() method, just pass it the values you want in your array. The first example here creates an array containing two numbers, the second array contains one number, and the last array contains one string. This is similar to using an array literal, and you can use an array literal instead of Array.of() for native arrays most of the time. But if you ever need to pass the Array constructor into a function, then you might want to pass Array.of() instead to ensure consistent behavior. For example:\nfunction createArray(arrayCreator, value) { return arrayCreator(value); } let items = createArray(Array.of, value);\rIn this code, the createArray() function accepts an array creator function and a value to insert into the array. You can pass Array.of() as the first argument to createArray() to create a new array. It would be dangerous to pass Array directly if you cannot guarantee that value won\u0026rsquo;t be a number.\nI\u0026gt; The Array.of() method does not use the Symbol.species property (discussed in Chapter 9) to determine the type of return value. Instead, it uses the current constructor (this inside the of() method) to determine the correct data type to return.\nThe Array.from() Method Converting non-array objects into actual arrays has always been cumbersome in JavaScript. For instance, if you have an arguments object (which is array-like) and want to use it like an array, then you\u0026rsquo;d need to convert it first. To convert an array-like object to an array in ECMAScript 5, you\u0026rsquo;d write a function like the one in this example:\nfunction makeArray(arrayLike) { var result = []; for (var i = 0, len = arrayLike.length; i \u0026lt; len; i++) { result.push(arrayLike[i]); } return result; } function doSomething() { var args = makeArray(arguments); // use args }\rThis approach manually creates a result array and copies each item from arguments into the new array. That works but takes a decent amount of code to perform a relatively simple operation. Eventually, developers discovered they could reduce the amount of code by calling the native slice() method for arrays on array-like objects, like this:\nfunction makeArray(arrayLike) { return Array.prototype.slice.call(arrayLike); } function doSomething() { var args = makeArray(arguments); // use args }\rThis code is functionally equivalent to the previous example, and it works because it sets the this value for slice() to the array-like object. Since slice() needs only numeric indices and a length property to function correctly, any array-like object will work.\nEven though this technique requires less typing, calling Array.prototype.slice.call(arrayLike) doesn\u0026rsquo;t obviously translate to, \u0026ldquo;Convert arrayLike to an array.\u0026rdquo; Fortunately, ECMAScript 6 added the Array.from() method as an obvious, yet clean, way to convert objects into arrays.\nGiven either an iterable or an array-like object as the first argument, the Array.from() method returns an array. Here\u0026rsquo;s a simple example:\nfunction doSomething() { var args = Array.from(arguments); // use args }\rThe Array.from() call creates a new array based on the items in arguments. So args is an instance of Array that contains the same values in the same positions as arguments.\nI\u0026gt; The Array.from() method also uses this to determine the type of array to return.\nMapping Conversion If you want to take array conversion a step further, you can provide Array.from() with a mapping function as a second argument. That function operates on each value from the array-like object and converts it to some final form before storing the result at the appropriate index in the final array. For example:\nfunction translate() { return Array.from(arguments, (value) =\u0026gt; value + 1); } let numbers = translate(1, 2, 3); console.log(numbers); // 2,3,4 Here, Array.from() is passed (value) =\u0026gt; value + 1 as a mapping function, so it adds 1 to each item in the array before storing the item. If the mapping function is on an object, you can also optionally pass a third argument to Array.from() that represents the this value for the mapping function:\nlet helper = { diff: 1, add(value) { return value + this.diff; } }; function translate() { return Array.from(arguments, helper.add, helper); } let numbers = translate(1, 2, 3); console.log(numbers); // 2,3,4 This example passes helper.add() as the mapping function for the conversion. Since helper.add() uses the this.diff property, you need to provide the third argument to Array.from() specifying the value of this. Thanks to the third argument, Array.from() can easily convert data without calling bind() or specifying the this value in some other way.\nUse on Iterables The Array.from() method works on both array-like objects and iterables. That means the method can convert any object with a Symbol.iterator property into an array. For example:\nlet numbers = { *[Symbol.iterator]() { yield 1; yield 2; yield 3; } }; let numbers2 = Array.from(numbers, (value) =\u0026gt; value + 1); console.log(numbers2); // 2,3,4 Since the numbers object is an iterable, you can pass numbers directly to Array.from() to convert its values into an array. The mapping function adds one to each number so the resulting array contains 2, 3, and 4 instead of 1, 2, and 3.\nI\u0026gt; If an object is both array-like and iterable, then the iterator is used by Array.from() to determine the values to convert.\nNew Methods on All Arrays Continuing the trend from ECMAScript 5, ECMAScript 6 adds several new methods to arrays. The find() and findIndex() methods are meant to aid developers using arrays with any values, while fill() and copyWithin() are inspired by use cases for typed arrays, a form of array introduced in ECMAScript 6 that uses only numbers.\nThe find() and findIndex() Methods Prior to ECMAScript 5, searching through arrays was cumbersome because there were no built-in methods for doing so. ECMAScript 5 added the indexOf() and lastIndexOf() methods, finally allowing developers to search for specific values inside an array. These two methods were a big improvement, yet they were still fairly limited because you could only search for one value at a time. For example, if you wanted to find the first even number in a series of numbers, you\u0026rsquo;d need to write your own code to do so. ECMAScript 6 solved that problem by introducing the find() and findIndex() methods.\nBoth find() and findIndex() accept two arguments: a callback function and an optional value to use for this inside the callback function. The callback function is passed an array element, the index of that element in the array, and the array itself\u0026ndash;the same arguments passed to methods like map() and forEach(). The callback should return true if the given value matches some criteria you define. Both find() and findIndex() also stop searching the array the first time the callback function returns true.\nThe only difference between these methods is that find() returns the value whereas findIndex() returns the index at which the value was found. Here\u0026rsquo;s an example to demonstrate:\nlet numbers = [25, 30, 35, 40, 45]; console.log(numbers.find((n) =\u0026gt; n \u0026gt; 33)); // 35 console.log(numbers.findIndex((n) =\u0026gt; n \u0026gt; 33)); // 2 This code calls find() and findIndex() to locate the first value in the numbers array that is greater than 33. The call to find() returns 35 and findIndex() returns 2, the location of 35 in the numbers array.\nBoth find() and findIndex() are useful to find an array element that matches a condition rather than a value. If you only want to find a value, then indexOf() and lastIndexOf() are better choices.\nThe fill() Method The fill() method fills one or more array elements with a specific value. When passed a value, fill() overwrites all of the values in an array with that value. For example:\nlet numbers = [1, 2, 3, 4]; numbers.fill(1); console.log(numbers.toString()); // 1,1,1,1 Here, the call to numbers.fill(1) changes all values in numbers to 1. If you only want to change some of the elements, rather than all of them, you can optionally include a start index and an exclusive end index, like this:\nlet numbers = [1, 2, 3, 4]; numbers.fill(1, 2); console.log(numbers.toString()); // 1,2,1,1 numbers.fill(0, 1, 3); console.log(numbers.toString()); // 1,0,0,1 In the numbers.fill(1,2) call, the 2 indicates to start filling elements at index 2. The exclusive end index isn\u0026rsquo;t specified with a third argument, so numbers.length is used as the end index, meaning the last two elements in numbers are filled with 1. The numbers.fill(0, 1, 3) operation fills array elements at indices 1 and 2 with 0. Calling fill() with the second and third arguments allows you to fill multiple array elements at once without overwriting the entire array.\nI\u0026gt; If either the start or end index are negative, then those values are added to the array\u0026rsquo;s length to determine the final location. For instance, a start location of -1 gives array.length - 1 as the index, where array is the array on which fill() is called.\nThe copyWithin() Method The copyWithin() method is similar to fill() in that it changes multiple array elements at the same time. However, instead of specifying a single value to assign to array elements, copyWithin() lets you copy array element values from the array itself. To accomplish that, you need to pass two arguments to the copyWithin() method: the index where the method should start filling values and the index where the values to be copied begin.\nFor instance, to copy the values from the first two elements in an array to the last two items in the array, you can do the following:\nlet numbers = [1, 2, 3, 4]; // paste values into array starting at index 2 // copy values from array starting at index 0 numbers.copyWithin(2, 0); console.log(numbers.toString()); // 1,2,1,2 This code pastes values into numbers beginning from index 2, so both indices 2 and 3 will be overwritten. Passing 0 as the second argument to copyWithin() indicates to start copying values from index 0 and continue until there are no more elements to copy into.\nBy default, copyWithin() always copies values up to the end of the array, but you can provide an optional third argument to limit how many elements will be overwritten. That third argument is an exclusive end index at which copying of values stops. Here\u0026rsquo;s an example:\nlet numbers = [1, 2, 3, 4]; // paste values into array starting at index 2 // copy values from array starting at index 0 // stop copying values when you hit index 1 numbers.copyWithin(2, 0, 1); console.log(numbers.toString()); // 1,2,1,4 In this example, only the value in index 0 is copied because the optional end index is set to 1. The last element in the array remains unchanged.\nI\u0026gt; As with the fill() method, if you pass a negative number for any argument to the copyWithin() method, the array\u0026rsquo;s length is automatically added to that value to determine the index to use.\nThe use cases for fill() and copyWithin() may not be obvious to you at this point. That\u0026rsquo;s because these methods originated on typed arrays and were added to regular arrays for consistency. As you\u0026rsquo;ll learn in the next section, however, if you use typed arrays for manipulating the bits of a number, these methods become a lot more useful.\nTyped Arrays Typed arrays are special-purpose arrays designed to work with numeric types (not all types, as the name might imply). The origin of typed arrays can be traced to WebGL, a port of Open GL ES 2.0 designed for use in web pages with the \u0026lt;canvas\u0026gt; element. Typed arrays were created as part of the port to provide fast bitwise arithmetic in JavaScript.\nArithmetic on native JavaScript numbers was too slow for WebGL because the numbers were stored in a 64-bit floating-point format and converted to 32-bit integers as needed. Typed arrays were introduced to circumvent this limitation and provide better performance for arithmetic operations. The concept is that any single number can be treated like an array of bits and thus can use the familiar methods available on JavaScript arrays.\nECMAScript 6 adopted typed arrays as a formal part of the language to ensure better compatibility across JavaScript engines and interoperability with JavaScript arrays. While the ECMAScript 6 version of typed arrays is not exactly the same as the WebGL version, there are enough similarities to make the ECMAScript 6 version an evolution of the WebGL version rather than a different approach.\nNumeric Data Types JavaScript numbers are stored in IEEE 754 format, which uses 64 bits to store a floating-point representation of the number. This format represents both integers and floats in JavaScript, with conversion between the two formats happening frequently as numbers change. Typed arrays allow the storage and manipulation of eight different numeric types:\nSigned 8-bit integer (int8) Unsigned 8-bit integer (uint8) Signed 16-bit integer (int16) Unsigned 16-bit integer (uint16) Signed 32-bit integer (int32) Unsigned 32-bit integer (uint32) 32-bit float (float32) 64-bit float (float64) If you represent a number that fits in an int8 as a normal JavaScript number, you\u0026rsquo;ll waste 56 bits. Those bits might better be used to store additional int8 values or any other number that requires less than 56 bits. Using bits more efficiently is one of the use cases typed arrays address.\nAll of the operations and objects related to typed arrays are centered around these eight data types. In order to use them, though, you\u0026rsquo;ll need to create an array buffer to store the data.\nI\u0026gt; In this book, I will refer to these types by the abbreviations I showed in parentheses. Those abbreviations don\u0026rsquo;t appear in actual JavaScript code; they\u0026rsquo;re just a shorthand for the much longer descriptions.\nArray Buffers The foundation for all typed arrays is an array buffer, which is a memory location that can contain a specified number of bytes. Creating an array buffer is akin to calling malloc() in C to allocate memory without specifying what the memory block contains. You can create an array buffer by using the ArrayBuffer constructor as follows:\nlet buffer = new ArrayBuffer(10); // allocate 10 bytes Just pass the number of bytes the array buffer should contain when you call the constructor. This let statement creates an array buffer 10 bytes long. Once an array buffer is created, you can retrieve the number of bytes in it by checking the byteLength property:\nlet buffer = new ArrayBuffer(10); // allocate 10 bytes console.log(buffer.byteLength); // 10 You can also use the slice() method to create a new array buffer that contains part of an existing array buffer. The slice() method works like the slice() method on arrays: you pass it the start index and end index as arguments, and it returns a new ArrayBuffer instance comprised of those elements from the original. For example:\nlet buffer = new ArrayBuffer(10); // allocate 10 bytes let buffer2 = buffer.slice(4, 6); console.log(buffer2.byteLength); // 2 In this code, buffer2 is created by extracting the bytes at indices 4 and 5. Just like when you call the array version of this method, the second argument to slice() is exclusive.\nOf course, creating a storage location isn\u0026rsquo;t very helpful without being able to write data into that location. To do so, you\u0026rsquo;ll need to create a view.\nI\u0026gt; An array buffer always represents the exact number of bytes specified when it was created. You can change the data contained within an array buffer, but never the size of the array buffer itself.\nManipulating Array Buffers with Views Array buffers represent memory locations, and views are the interfaces you\u0026rsquo;ll use to manipulate that memory. A view operates on an array buffer or a subset of an array buffer\u0026rsquo;s bytes, reading and writing data in one of the numeric data types. The DataView type is a generic view on an array buffer that allows you to operate on all eight numeric data types.\nTo use a DataView, first create an instance of ArrayBuffer and use it to create a new DataView. Here\u0026rsquo;s an example:\nlet buffer = new ArrayBuffer(10), view = new DataView(buffer);\rThe view object in this example has access to all 10 bytes in buffer. You can also create a view over just a portion of a buffer. Just provide a byte offset and, optionally, the number of bytes to include from that offset. When a number of bytes isn\u0026rsquo;t included, theDataView will go from the offset to the end of the buffer by default. For example:\nlet buffer = new ArrayBuffer(10), view = new DataView(buffer, 5, 2); // cover bytes 5 and 6 Here, view operates only on the bytes at indices 5 and 6. This approach allows you to create several views over the same array buffer, which can be useful if you want to use a single memory location for an entire application rather than dynamically allocating space as needed.\nRetrieving View Information You can retrieve information about a view by fetching the following read-only properties:\nbuffer - The array buffer that the view is tied to byteOffset - The second argument to the DataView constructor, if provided (0 by default) byteLength - The third argument to the DataView constructor, if provided (the buffer\u0026rsquo;s byteLength by default) Using these properties, you can inspect exactly where a view is operating, like this:\nlet buffer = new ArrayBuffer(10), view1 = new DataView(buffer), // cover all bytes view2 = new DataView(buffer, 5, 2); // cover bytes 5 and 6 console.log(view1.buffer === buffer); // true console.log(view2.buffer === buffer); // true console.log(view1.byteOffset); // 0 console.log(view2.byteOffset); // 5 console.log(view1.byteLength); // 10 console.log(view2.byteLength); // 2 This code creates view1, a view over the entire array buffer, and view2, which operates on a small section of the array buffer. These views have equivalent buffer properties because both work on the same array buffer. The byteOffset and byteLength are different for each view, however. They reflect the portion of the array buffer where each view operates.\nOf course, reading information about memory isn\u0026rsquo;t very useful on its own. You need to write data into and read data out of that memory to get any benefit.\nReading and Writing Data For each of JavaScript\u0026rsquo;s eight numeric data types, the DataView prototype has a method to write data and a method to read data from an array buffer. The method names all begin with either \u0026ldquo;set\u0026rdquo; or \u0026ldquo;get\u0026rdquo; and are followed by the data type abbreviation. For instance, here\u0026rsquo;s a list of the read and write methods that can operate on int8 and uint8 values:\ngetInt8(byteOffset) - Read an int8 starting at byteOffset setInt8(byteOffset, value) - Write an int8 starting at byteOffset getUint8(byteOffset) - Read an uint8 starting at byteOffset setUint8(byteOffset, value) - Write an uint8 starting at byteOffset The \u0026ldquo;get\u0026rdquo; methods accept a single argument: the byte offset to read from. The \u0026ldquo;set\u0026rdquo; methods accept two arguments: the byte offset to write at and the value to write.\nThough I\u0026rsquo;ve only shown the methods you can use with 8-bit values, the same methods exist for operating on 16- and 32-bit values. Just replace the 8 in each name with 16 or 32. Alongside all those integer methods, DataView also has the following read and write methods for floating point numbers:\ngetFloat32(byteOffset, littleEndian) - Read a float32 starting at byteOffset setFloat32(byteOffset, value, littleEndian) - Write a float32 starting at byteOffset getFloat64(byteOffset, littleEndian) - Read a float64 starting at byteOffset setFloat64(byteOffset, value, littleEndian) - Write a float64 starting at byteOffset The float-related methods are only different in that they accept an additional optional boolean indicating whether the value should be read or written as little-endian. (Little-endian means the least significant byte is at byte 0, instead of in the last byte.)\nTo see a \u0026ldquo;set\u0026rdquo; and a \u0026ldquo;get\u0026rdquo; method in action, consider the following example:\nlet buffer = new ArrayBuffer(2), view = new DataView(buffer); view.setInt8(0, 5); view.setInt8(1, -1); console.log(view.getInt8(0)); // 5 console.log(view.getInt8(1)); // -1 This code uses a two-byte array buffer to store two int8 values. The first value is set at offset 0 and the second is at offset 1, reflecting that each value spans a full byte (8 bits). Those values are later retrieved from their positions with the getInt8() method. While this example uses int8 values, you can use any of the eight numeric types with their corresponding methods.\nViews are interesting because they allow you to read and write in any format at any point in time, regardless of how data was previously stored. For instance, writing two int8 values and reading the buffer with an int16 method works just fine, as in this example:\nlet buffer = new ArrayBuffer(2), view = new DataView(buffer); view.setInt8(0, 5); view.setInt8(1, -1); console.log(view.getInt16(0)); // 1535 console.log(view.getInt8(0)); // 5 console.log(view.getInt8(1)); // -1 The call to view.getInt16(0) reads all bytes in the view and interprets those bytes as the number 1535. To understand why this happens, take a look at Figure 10-1, which shows what each setInt8() line does to the array buffer.\nnew ArrayBuffer(2) 0000000000000000 view.setInt8(0, 5); 0000010100000000 view.setInt8(1, -1); 0000010111111111\rThe array buffer starts with 16 bits that are all zero. Writing 5 to the first byte with setInt8() introduces a couple of 1s (in 8-bit representation, 5 is 00000101). Writing -1 to the second byte sets all bits in that byte to 1, which is the two\u0026rsquo;s complement representation of -1. After the second setInt8() call, the array buffer contains 16 bits, and getInt16() reads those bits as a single 16-bit integer, which is 1535 in decimal.\nThe DataView object is perfect for use cases that mix different data types in this way. However, if you\u0026rsquo;re only using one specific data type, then the type-specific views are a better choice.\nTyped Arrays Are Views ECMAScript 6 typed arrays are actually type-specific views for array buffers. Instead of using a generic DataView object to operate on an array buffer, you can use objects that enforce specific data types. There are eight type-specific views corresponding to the eight numeric data types, plus an additional option for uint8 values.\nTable 10-1 shows an abbreviated version of the complete list of type-specific views from section 22.2 of the ECMAScript 6 specification.\nConstructor Name Element Size (in bytes) Description Equivalent C Type Int8Array 1 8-bit two\u0026rsquo;s complement signed integer signed char Uint8Array 1 8-bit unsigned integer unsigned char Uint8ClampedArray 1 8-bit unsigned integer (clamped conversion) unsigned char Int16Array 2 16-bit two\u0026rsquo;s complement signed integer short Uint16Array 2 16-bit unsigned integer unsigned short Int32Array 4 32-bit two\u0026rsquo;s complement signed integer int Uint32Array 4 32-bit unsigned integer int Float32Array 4 32-bit IEEE floating point float Float64Array 8 64-bit IEEE floating point double The left column lists the typed array constructors, and the other columns describe the data each typed array can contain. A Uint8ClampedArray is the same as a Uint8Array unless values in the array buffer are less than 0 or greater than 255. A Uint8ClampedArray converts values lower than 0 to 0 (-1 becomes 0, for instance) and converts values higher than 255 to 255 (so 300 becomes 255).\nTyped array operations only work on a particular type of data. For example, all operations on Int8Array use int8 values. The size of an element in a typed array also depends on the type of array. While an element in an Int8Array is a single byte long, Float64Array uses eight bytes per element. Fortunately, the elements are accessed using numeric indices just like regular arrays, allowing you to avoid the somewhat awkward calls to the \u0026ldquo;set\u0026rdquo; and \u0026ldquo;get\u0026rdquo; methods of DataView.\nA\u0026gt; ### Element Size A\u0026gt; A\u0026gt; Each typed array is made up of a number of elements, and the element size is the number of bytes each element represents. This value is stored on a BYTES_PER_ELEMENT property on each constructor and each instance, so you can easily query the element size: A\u0026gt; A\u0026gt; js A\u0026gt; console.log(UInt8Array.BYTES_PER_ELEMENT); // 1 A\u0026gt; console.log(UInt16Array.BYTES_PER_ELEMENT); // 2 A\u0026gt; A\u0026gt; let ints = new Int8Array(5); A\u0026gt; console.log(ints.BYTES_PER_ELEMENT); // 1 A\u0026gt; Creating Type-Specific Views Typed array constructors accept multiple types of arguments, so there are a few ways to create typed arrays. First, you can create a new typed array by passing the same arguments DataView takes (an array buffer, an optional byte offset, and an optional byte length). For example:\nlet buffer = new ArrayBuffer(10), view1 = new Int8Array(buffer), view2 = new Int8Array(buffer, 5, 2); console.log(view1.buffer === buffer); // true console.log(view2.buffer === buffer); // true console.log(view1.byteOffset); // 0 console.log(view2.byteOffset); // 5 console.log(view1.byteLength); // 10 console.log(view2.byteLength); // 2 In this code, the two views are both Int8Array instances that use buffer. Both view1 and view2 have the same buffer, byteOffset, and byteLength properties that exist on DataView instances. It\u0026rsquo;s easy to switch to using a typed array wherever you use a DataView so long as you only work with one numeric type.\nThe second way to create a typed array is to pass a single number to the constructor. That number represents the number of elements (not bytes) to allocate to the array. The constructor will create a new buffer with the correct number of bytes to represent that number of array elements, and you can access the number of elements in the array by using the length property. For example:\nlet ints = new Int16Array(2), floats = new Float32Array(5); console.log(ints.byteLength); // 4 console.log(ints.length); // 2 console.log(floats.byteLength); // 20 console.log(floats.length); // 5 The ints array is created with space for two elements. Each 16-bit integer requires two bytes per value, so the array is allocated four bytes. The floats array is created to hold five elements, so the number of bytes required is 20 (four bytes per element). In both cases, a new buffer is created and can be accessed using the buffer property if necessary.\nW\u0026gt; If no argument is passed to a typed array constructor, the constructor acts as if 0 was passed. This creates a typed array that cannot hold data because zero bytes are allocated to the buffer.\nThe third way to create a typed array is to pass an object as the only argument to the constructor. The object can be any of the following:\nA Typed Array - Each element is copied into a new element on the new typed array. For example, if you pass an int8 to the Int16Array constructor, the int8 values would be copied into an int16 array. The new typed array has a different array buffer than the one that was passed in. An Iterable - The object\u0026rsquo;s iterator is called to retrieve the items to insert into the typed array. The constructor will throw an error if any elements are invalid for the view type. An Array - The elements of the array are copied into a new typed array. The constructor will throw an error if any elements are invalid for the type. An Array-Like Object - Behaves the same as an array. In each of these cases, a new typed array is created with the data from the source object. This can be especially useful when you want to initialize a typed array with some values, like this:\nlet ints1 = new Int16Array([25, 50]), ints2 = new Int32Array(ints1); console.log(ints1.buffer === ints2.buffer); // false console.log(ints1.byteLength); // 4 console.log(ints1.length); // 2 console.log(ints1[0]); // 25 console.log(ints1[1]); // 50 console.log(ints2.byteLength); // 8 console.log(ints2.length); // 2 console.log(ints2[0]); // 25 console.log(ints2[1]); // 50 This example creates an Int16Array and initializes it with an array of two values. Then, an Int32Array is created and passed the Int16Array. The values 25 and 50 are copied from ints1 into ints2 as the two typed arrays have completely separate buffers. The same numbers are represented in both typed arrays, but ints2 has eight bytes to represent the data while ints1 has only four.\nSimilarities Between Typed and Regular Arrays Typed arrays and regular arrays are similar in several ways, and as you\u0026rsquo;ve already seen in this chapter, typed arrays can be used like regular arrays in many situations. For instance, you can check how many elements are in a typed array using the length property, and you can access a typed array\u0026rsquo;s elements directly using numeric indices. For example:\nlet ints = new Int16Array([25, 50]); console.log(ints.length); // 2 console.log(ints[0]); // 25 console.log(ints[1]); // 50 ints[0] = 1; ints[1] = 2; console.log(ints[0]); // 1 console.log(ints[1]); // 2 In this code, a new Int16Array with two items is created. The items are read from and written to using their numeric indices, and those values are automatically stored and converted into int16 values as part of the operation. The similarities don\u0026rsquo;t end there, though.\nI\u0026gt; Unlike regular arrays, you cannot change the size of a typed array using the length property. The length property is not writable, so any attempt to change it is ignored in non-strict mode and throws an error in strict mode.\nCommon Methods Typed arrays also include a large number of methods that are functionally equivalent to regular array methods. You can use the following array methods on typed arrays:\ncopyWithin() entries() fill() filter() find() findIndex() forEach() indexOf() join() keys() lastIndexOf() map() reduce() reduceRight() reverse() slice() some() sort() values() Keep in mind that while these methods act like their counterparts on Array.prototype, they are not exactly the same. The typed array methods have additional checks for numeric type safety and, when an array is returned, will return a typed array instead of a regular array (due to Symbol.species). Here\u0026rsquo;s a simple example to demonstrate the difference:\nlet ints = new Int16Array([25, 50]), mapped = ints.map((v) =\u0026gt; v * 2); console.log(mapped.length); // 2 console.log(mapped[0]); // 50 console.log(mapped[1]); // 100 console.log(mapped instanceof Int16Array); // true This code uses the map() method to create a new array based on the values in ints. The mapping function doubles each value in the array and returns a new Int16Array.\nThe Same Iterators Typed arrays have the same three iterators as regular arrays, too. Those are the entries() method, the keys() method, and the values() method. That means you can use the spread operator and for-of loops with typed arrays just like you would with regular arrays. For example:\nlet ints = new Int16Array([25, 50]), intsArray = [...ints]; console.log(intsArray instanceof Array); // true console.log(intsArray[0]); // 25 console.log(intsArray[1]); // 50 This code creates a new array called intsArray containing the same data as the typed array ints. As with other iterables, the spread operator makes converting typed arrays into regular arrays easy.\nof() and from() Methods Lastly, all typed arrays have static of() and from() methods that work like the Array.of() and Array.from() methods. The difference is that the methods on typed arrays return a typed array instead of a regular array. Here are some examples that use these methods to create typed arrays:\nlet ints = Int16Array.of(25, 50), floats = Float32Array.from([1.5, 2.5]); console.log(ints instanceof Int16Array); // true console.log(floats instanceof Float32Array); // true console.log(ints.length); // 2 console.log(ints[0]); // 25 console.log(ints[1]); // 50 console.log(floats.length); // 2 console.log(floats[0]); // 1.5 console.log(floats[1]); // 2.5 The of() and from() methods in this example are used to create an Int16Array and a Float32Array, respectively. These methods ensure that typed arrays can be created just as easily as regular arrays.\nDifferences Between Typed and Regular Arrays The most important difference between typed arrays and regular arrays is that typed arrays are not regular arrays. Typed arrays don\u0026rsquo;t inherit from Array and Array.isArray() returns false when passed a typed array. For example:\nlet ints = new Int16Array([25, 50]); console.log(ints instanceof Array); // false console.log(Array.isArray(ints)); // false Since the ints variable is a typed array, it isn\u0026rsquo;t an instance of Array and cannot otherwise be identified as an array. This distinction is important because while typed arrays and regular arrays are similar, there are many ways in which typed arrays behave differently.\nBehavioral Differences While regular arrays can grow and shrink as you interact with them, typed arrays always remain the same size. You cannot assign a value to a nonexistent numeric index in a typed array like you can with regular arrays, as typed arrays ignore the operation. Here\u0026rsquo;s an example:\nlet ints = new Int16Array([25, 50]); console.log(ints.length); // 2 console.log(ints[0]); // 25 console.log(ints[1]); // 50 ints[2] = 5; console.log(ints.length); // 2 console.log(ints[2]); // undefined Despite assigning 5 to the numeric index 2 in this example, the ints array does not grow at all. The length remains the same and the value is thrown away.\nTyped arrays also have checks to ensure that only valid data types are used. Zero is used in place of any invalid values. For example:\nlet ints = new Int16Array([\u0026#34;hi\u0026#34;]); console.log(ints.length); // 1 console.log(ints[0]); // 0 This code attempts to use the string value \u0026quot;hi\u0026quot; in an Int16Array. Of course, strings are invalid data types in typed arrays, so the value is inserted as 0 instead. The length of the array is still one, and even though the ints[0] slot exists, it just contains 0.\nAll methods that modify values in a typed array enforce the same restriction. For example, if the function passed to map() returns an invalid value for the typed array, then 0 is used instead:\nlet ints = new Int16Array([25, 50]), mapped = ints.map((v) =\u0026gt; \u0026#34;hi\u0026#34;); console.log(mapped.length); // 2 console.log(mapped[0]); // 0 console.log(mapped[1]); // 0 console.log(mapped instanceof Int16Array); // true console.log(mapped instanceof Array); // false Since the string value \u0026quot;hi\u0026quot; isn\u0026rsquo;t a 16-bit integer, it\u0026rsquo;s replaced with 0 in the resulting array. Thanks to this error correction behavior, typed array methods don\u0026rsquo;t have to worry about throwing errors when invalid data is present, because there will never be invalid data in the array.\nMissing Methods While typed arrays do have many of the same methods as regular arrays, they also lack several array methods. The following methods are not available on typed arrays:\nconcat() pop() push() shift() splice() unshift() Except for the concat() method, the methods in this list can change the size of an array. Typed arrays can\u0026rsquo;t change size, which is why these aren\u0026rsquo;t available for typed arrays. The concat() method isn\u0026rsquo;t available because the result of concatenating two typed arrays (especially if they deal with different data types) would be uncertain, and that would go against the reason for using typed arrays in the first place.\nAdditional Methods Finally, typed arrays methods have two methods not present on regular arrays: the set() and subarray() methods. These two methods are opposites in that set() copies another array into an existing typed array, whereas subarray() extracts part of an existing typed array into a new typed array.\nThe set() method accepts an array (either typed or regular) and an optional offset at which to insert the data; if you pass nothing, the offset defaults to zero. The data from the array argument is copied into the destination typed array while ensuring only valid data types are used. Here\u0026rsquo;s an example:\nlet ints = new Int16Array(4); ints.set([25, 50]); ints.set([75, 100], 2); console.log(ints.toString()); // 25,50,75,100 This code creates an Int16Array with four elements. The first call to set() copies two values to the first and second elements in the array. The second call to set() uses an offset of 2 to indicate that the values should be placed in the array starting at the third element.\nThe subarray() method accepts an optional start and end index (the end index is exclusive, as in the slice() method) and returns a new typed array. You can also omit both arguments to create a clone of the typed array. For example:\nlet ints = new Int16Array([25, 50, 75, 100]), subints1 = ints.subarray(), subints2 = ints.subarray(2), subints3 = ints.subarray(1, 3); console.log(subints1.toString()); // 25,50,75,100 console.log(subints2.toString()); // 75,100 console.log(subints3.toString()); // 50,75 Three typed arrays are created from the original ints array in this example. The subints1 array is a clone of ints that contains the same information. Since the subints2 array copies data starting from index 2, it only contains the last two elements of the ints array (75 and 100). The subints3 array contains only the middle two elements of the ints array, as subarray() was called with both a start and an end index.\nSummary ECMAScript 6 continues the work of ECMAScript 5 by making arrays more useful. There are two more ways to create arrays: the Array.of() and Array.from() methods. The Array.from() method can also convert iterables and array-like objects into arrays. Both methods are inherited by derived array classes and do not use the Symbol.species property to determine what type of value should be returned (other inherited methods do use Symbol.species when returning an array).\nThere are also several new methods on arrays. The fill() and copyWithin() methods allow you to alter array elements in-place. The find() and findIndex() methods are useful for finding the first element in an array that matches some criteria. The former returns the first element that fits the criteria, and the latter returns the element\u0026rsquo;s index.\nTyped arrays are not technically arrays, as they do not inherit from Array, but they do look and behave a lot like arrays. Typed arrays contain one of eight different numeric data types and are built upon ArrayBuffer objects that represent the underlying bits of a number or series of numbers. Typed arrays are a more efficient way of doing bitwise arithmetic because the values are not converted back and forth between formats, as is the case with the JavaScript number type.\n","date":"0001-01-01","id":38,"permalink":"/es6/10-arrays/","summary":"\u003cp\u003eThe array is a foundational JavaScript object. But while other aspects of JavaScript have evolved over time, arrays remained the same until ECMAScript 5 introduced several methods to make them easier to use. ECMAScript 6 continues to improve arrays by adding a lot more functionality, like new creation methods, several useful convenience methods, and the ability to make typed arrays.\u003c/p\u003e","tags":[],"title":"10 Improved Array Capabilities"},{"content":"Solution const gcd = (a, b) =\u0026gt; { while (b !== 0) { [a, b] = [b, a % b]; } return a; }; console.log(gcd(48, 18)); // Output: 6 ","date":"0001-01-01","id":39,"permalink":"/prep-1/prep-1/1-to-10/10.-finding-the-greatest-common-divisor-gcd/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egcd\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e48\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e18\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: 6\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"10. Finding the Greatest Common Divisor (GCD)"},{"content":"One of the most powerful aspects of JavaScript is how easily it handles asynchronous programming. As a language created for the Web, JavaScript needed to be able to respond to asynchronous user interactions such as clicks and key presses from the beginning. Node.js further popularized asynchronous programming in JavaScript by using callbacks as an alternative to events. As more and more programs started using asynchronous programming, events and callbacks were no longer powerful enough to support everything developers wanted to do. Promises are the solution to this problem.\nPromises are another option for asynchronous programming, and they work like futures and deferreds do in other languages. A promise specifies some code to be executed later (as with events and callbacks) and also explicitly indicates whether the code succeeded or failed at its job. You can chain promises together based on success or failure in ways that make your code easier to understand and debug.\nTo have a good understanding of how promises work, however, it\u0026rsquo;s important to understand some of the basic concepts upon which they are built.\nAsynchronous Programming Background JavaScript engines are built on the concept of a single-threaded event loop. Single-threaded means that only one piece of code is ever executed at a time. Contrast this with languages like Java or C++, where threads can allow multiple different pieces of code to execute at the same time. Maintaining and protecting state when multiple pieces of code can access and change that state is a difficult problem and a frequent source of bugs in thread-based software.\nJavaScript engines can only execute one piece of code at a time, so they need to keep track of code that is meant to run. That code is kept in a job queue. Whenever a piece of code is ready to be executed, it is added to the job queue. When the JavaScript engine is finished executing code, the event loop executes the next job in the queue. The event loop is a process inside the JavaScript engine that monitors code execution and manages the job queue. Keep in mind that as a queue, job execution runs from the first job in the queue to the last.\nThe Event Model When a user clicks a button or presses a key on the keyboard, an event like onclick is triggered. That event might respond to the interaction by adding a new job to the back of the job queue. This is JavaScript\u0026rsquo;s most basic form of asynchronous programming. The event handler code doesn\u0026rsquo;t execute until the event fires, and when it does execute, it has the appropriate context. For example:\nlet button = document.getElementById(\u0026#34;my-btn\u0026#34;); button.onclick = function (event) { console.log(\u0026#34;Clicked\u0026#34;); };\rIn this code, console.log(\u0026quot;Clicked\u0026quot;) will not be executed until button is clicked. When button is clicked, the function assigned to onclick is added to the back of the job queue and will be executed when all other jobs ahead of it are complete.\nEvents work well for simple interactions, but chaining multiple separate asynchronous calls together is more complicated because you must keep track of the event target (button in the previous example) for each event. Additionally, you need to ensure all appropriate event handlers are added before the first time an event occurs. For instance, if button were clicked before onclick is assigned, nothing would happen. So while events are useful for responding to user interactions and similar infrequent functionality, they aren\u0026rsquo;t very flexible for more complex needs.\nThe Callback Pattern When Node.js was created, it advanced the asynchronous programming model by popularizing the callback pattern of programming. The callback pattern is similar to the event model because the asynchronous code doesn\u0026rsquo;t execute until a later point in time. It\u0026rsquo;s different because the function to call is passed in as an argument, as shown here:\nreadFile(\u0026#34;example.txt\u0026#34;, function (err, contents) { if (err) { throw err; } console.log(contents); }); console.log(\u0026#34;Hi!\u0026#34;);\rThis example uses the traditional Node.js error-first callback style. The readFile() function is intended to read from a file on disk (specified as the first argument) and then execute the callback (the second argument) when complete. If there\u0026rsquo;s an error, the err argument of the callback is an error object; otherwise, the contents argument contains the file contents as a string.\nUsing the callback pattern, readFile() begins executing immediately and pauses when it starts reading from the disk. That means console.log(\u0026quot;Hi!\u0026quot;) is output immediately after readFile() is called, before console.log(contents) prints anything. When readFile() finishes, it adds a new job to the end of the job queue with the callback function and its arguments. That job is then executed upon completion of all other jobs ahead of it.\nThe callback pattern is more flexible than events because chaining multiple calls together is easier with callbacks. For example:\nreadFile(\u0026#34;example.txt\u0026#34;, function (err, contents) { if (err) { throw err; } writeFile(\u0026#34;example.txt\u0026#34;, function (err) { if (err) { throw err; } console.log(\u0026#34;File was written!\u0026#34;); }); });\rIn this code, a successful call to readFile() results in another asynchronous call, this time to the writeFile() function. Note that the same basic pattern of checking err is present in both functions. When readFile() is complete, it adds a job to the job queue that results in writeFile() being called (assuming no errors). Then, writeFile() adds a job to the job queue when it finishes.\nThis pattern works fairly well, but you can quickly find yourself in callback hell. Callback hell occurs when you nest too many callbacks, like this:\nmethod1(function (err, result) { if (err) { throw err; } method2(function (err, result) { if (err) { throw err; } method3(function (err, result) { if (err) { throw err; } method4(function (err, result) { if (err) { throw err; } method5(result); }); }); }); });\rNesting multiple method calls as this example does creates a tangled web of code that is hard to understand and debug. Callbacks also present problems when you want to implement more complex functionality. What if you want two asynchronous operations to run in parallel and notify you when they\u0026rsquo;re both complete? What if you\u0026rsquo;d like to start two asynchronous operations at a time but only take the result of the first one to complete?\nIn these cases, you\u0026rsquo;d need to track multiple callbacks and cleanup operations, and promises greatly improve such situations.\nPromise Basics A promise is a placeholder for the result of an asynchronous operation. Instead of subscribing to an event or passing a callback to a function, the function can return a promise, like this:\n// readFile promises to complete at some point in the future let promise = readFile(\u0026#34;example.txt\u0026#34;);\rIn this code, readFile() doesn\u0026rsquo;t actually start reading the file immediately; that will happen later. Instead, the function returns a promise object representing the asynchronous read operation so you can work with it in the future. Exactly when you\u0026rsquo;ll be able to work with that result depends entirely on how the promise\u0026rsquo;s lifecycle plays out.\nThe Promise Lifecycle Each promise goes through a short lifecycle starting in the pending state, which indicates that the asynchronous operation hasn\u0026rsquo;t completed yet. A pending promise is considered unsettled. The promise in the last example is in the pending state as soon as the readFile() function returns it. Once the asynchronous operation completes, the promise is considered settled and enters one of two possible states:\nFulfilled: The promise\u0026rsquo;s asynchronous operation has completed successfully. Rejected: The promise\u0026rsquo;s asynchronous operation didn\u0026rsquo;t complete successfully due to either an error or some other cause. An internal [[PromiseState]] property is set to \u0026quot;pending\u0026quot;, \u0026quot;fulfilled\u0026quot;, or \u0026quot;rejected\u0026quot; to reflect the promise\u0026rsquo;s state. This property isn\u0026rsquo;t exposed on promise objects, so you can\u0026rsquo;t determine which state the promise is in programmatically. But you can take a specific action when a promise changes state by using the then() method.\nThe then() method is present on all promises and takes two arguments. The first argument is a function to call when the promise is fulfilled. Any additional data related to the asynchronous operation is passed to this fulfillment function. The second argument is a function to call when the promise is rejected. Similar to the fulfillment function, the rejection function is passed any additional data related to the rejection.\nI\u0026gt; Any object that implements the then() method in this way is called a thenable. All promises are thenables, but not all thenables are promises.\nBoth arguments to then() are optional, so you can listen for any combination of fulfillment and rejection. For example, consider this set of then() calls:\nlet promise = readFile(\u0026#34;example.txt\u0026#34;); promise.then( function (contents) { // fulfillment console.log(contents); }, function (err) { // rejection console.error(err.message); } ); promise.then(function (contents) { // fulfillment console.log(contents); }); promise.then(null, function (err) { // rejection console.error(err.message); });\rAll three then() calls operate on the same promise. The first call listens for both fulfillment and rejection. The second only listens for fulfillment; errors won\u0026rsquo;t be reported. The third just listens for rejection and doesn\u0026rsquo;t report success.\nPromises also have a catch() method that behaves the same as then() when only a rejection handler is passed. For example, the following catch() and then() calls are functionally equivalent:\npromise.catch(function (err) { // rejection console.error(err.message); }); // is the same as: promise.then(null, function (err) { // rejection console.error(err.message); });\rThe intent behind then() and catch() is for you to use them in combination to properly handle the result of asynchronous operations. This system is better than events and callbacks because it makes whether the operation succeeded or failed completely clear. (Events tend not to fire when there\u0026rsquo;s an error, and in callbacks you must always remember to check the error argument.) Just know that if you don\u0026rsquo;t attach a rejection handler to a promise, all failures will happen silently. Always attach a rejection handler, even if the handler just logs the failure.\nA fulfillment or rejection handler will still be executed even if it is added to the job queue after the promise is already settled. This allows you to add new fulfillment and rejection handlers at any time and guarantee that they will be called. For example:\nlet promise = readFile(\u0026#34;example.txt\u0026#34;); // original fulfillment handler promise.then(function (contents) { console.log(contents); // now add another promise.then(function (contents) { console.log(contents); }); });\rIn this code, the fulfillment handler adds another fulfillment handler to the same promise. The promise is already fulfilled at this point, so the new fulfillment handler is added to the job queue and called when ready. Rejection handlers work the same way.\nI\u0026gt; Each call to then() or catch() creates a new job to be executed when the promise is resolved. But these jobs end up in a separate job queue that is reserved strictly for promises. The precise details of this second job queue aren\u0026rsquo;t important for understanding how to use promises so long as you understand how job queues work in general.\nCreating Unsettled Promises New promises are created using the Promise constructor. This constructor accepts a single argument: a function called the executor, which contains the code to initialize the promise. The executor is passed two functions named resolve() and reject() as arguments. The resolve() function is called when the executor has finished successfully to signal that the promise is ready to be resolved, while the reject() function indicates that the executor has failed.\nHere\u0026rsquo;s an example that uses a promise in Node.js to implement the readFile() function from earlier in this chapter:\n// Node.js example let fs = require(\u0026#34;fs\u0026#34;); function readFile(filename) { return new Promise(function (resolve, reject) { // trigger the asynchronous operation fs.readFile(filename, { encoding: \u0026#34;utf8\u0026#34; }, function (err, contents) { // check for errors if (err) { reject(err); return; } // the read succeeded resolve(contents); }); }); } let promise = readFile(\u0026#34;example.txt\u0026#34;); // listen for both fulfillment and rejection promise.then( function (contents) { // fulfillment console.log(contents); }, function (err) { // rejection console.error(err.message); } );\rIn this example, the native Node.js fs.readFile() asynchronous call is wrapped in a promise. The executor either passes the error object to the reject() function or passes the file contents to the resolve() function.\nKeep in mind that the executor runs immediately when readFile() is called. When either resolve() or reject() is called inside the executor, a job is added to the job queue to resolve the promise. This is called job scheduling, and if you\u0026rsquo;ve ever used the setTimeout() or setInterval() functions, then you\u0026rsquo;re already familiar with it. In job scheduling, you add a new job to the job queue to say, \u0026ldquo;Don\u0026rsquo;t execute this right now, but execute it later.\u0026rdquo; For instance, the setTimeout() function lets you specify a delay before a job is added to the queue:\n// add this function to the job queue after 500ms have passed setTimeout(function () { console.log(\u0026#34;Timeout\u0026#34;); }, 500); console.log(\u0026#34;Hi!\u0026#34;);\rThis code schedules a job to be added to the job queue after 500ms. The two console.log() calls produce the following output:\nHi! Timeout\rThanks to the 500ms delay, the output that the function passed to setTimeout() was shown after the output from the console.log(\u0026quot;Hi!\u0026quot;) call.\nPromises work similarly. The promise executor executes immediately, before anything that appears after it in the source code. For instance:\nlet promise = new Promise(function (resolve, reject) { console.log(\u0026#34;Promise\u0026#34;); resolve(); }); console.log(\u0026#34;Hi!\u0026#34;);\rThe output for this code is:\nPromise Hi!\rCalling resolve() triggers an asynchronous operation. Functions passed to then() and catch() are executed asynchronously, as these are also added to the job queue. Here\u0026rsquo;s an example:\nlet promise = new Promise(function (resolve, reject) { console.log(\u0026#34;Promise\u0026#34;); resolve(); }); promise.then(function () { console.log(\u0026#34;Resolved.\u0026#34;); }); console.log(\u0026#34;Hi!\u0026#34;);\rThe output for this example is:\nPromise Hi! Resolved\rNote that even though the call to then() appears before the console.log(\u0026quot;Hi!\u0026quot;) line, it doesn\u0026rsquo;t actually execute until later (unlike the executor). That\u0026rsquo;s because fulfillment and rejection handlers are always added to the end of the job queue after the executor has completed.\nCreating Settled Promises The Promise constructor is the best way to create unsettled promises due to the dynamic nature of what the promise executor does. But if you want a promise to represent just a single known value, then it doesn\u0026rsquo;t make sense to schedule a job that simply passes a value to the resolve() function. Instead, there are two methods that create settled promises given a specific value.\nUsing Promise.resolve() The Promise.resolve() method accepts a single argument and returns a promise in the fulfilled state. That means no job scheduling occurs, and you need to add one or more fulfillment handlers to the promise to retrieve the value. For example:\nlet promise = Promise.resolve(42); promise.then(function (value) { console.log(value); // 42 });\rThis code creates a fulfilled promise so the fulfillment handler receives 42 as value. If a rejection handler were added to this promise, the rejection handler would never be called because the promise will never be in the rejected state.\nUsing Promise.reject() You can also create rejected promises by using the Promise.reject() method. This works like Promise.resolve() except the created promise is in the rejected state, as follows:\nlet promise = Promise.reject(42); promise.catch(function (value) { console.log(value); // 42 });\rAny additional rejection handlers added to this promise would be called, but not fulfillment handlers.\nI\u0026gt; If you pass a promise to either the Promise.resolve() or Promise.reject() methods, the promise is returned without modification.\nNon-Promise Thenables Both Promise.resolve() and Promise.reject() also accept non-promise thenables as arguments. When passed a non-promise thenable, these methods create a new promise that is called after the then() function.\nA non-promise thenable is created when an object has a then() method that accepts a resolve and a reject argument, like this:\nlet thenable = { then: function (resolve, reject) { resolve(42); } };\rThe thenable object in this example has no characteristics associated with a promise other than the then() method. You can call Promise.resolve() to convert thenable into a fulfilled promise:\nlet thenable = { then: function (resolve, reject) { resolve(42); } }; let p1 = Promise.resolve(thenable); p1.then(function (value) { console.log(value); // 42 });\rIn this example, Promise.resolve() calls thenable.then() so that a promise state can be determined. The promise state for thenable is fulfilled because resolve(42) is called inside the then() method. A new promise called p1 is created in the fulfilled state with the value passed from thenable (that is, 42), and the fulfillment handler for p1 receives 42 as the value.\nThe same process can be used with Promise.resolve() to create a rejected promise from a thenable:\nlet thenable = { then: function (resolve, reject) { reject(42); } }; let p1 = Promise.resolve(thenable); p1.catch(function (value) { console.log(value); // 42 });\rThis example is similar to the last except that thenable is rejected. When thenable.then() executes, a new promise is created in the rejected state with a value of 42. That value is then passed to the rejection handler for p1.\nPromise.resolve() and Promise.reject() work like this to allow you to easily work with non-promise thenables. A lot of libraries used thenables prior to promises being introduced in ECMAScript 6, so the ability to convert thenables into formal promises is important for backwards-compatibility with previously existing libraries. When you\u0026rsquo;re unsure if an object is a promise, passing the object through Promise.resolve() or Promise.reject() (depending on your anticipated result) is the best way to find out because promises just pass through unchanged.\nExecutor Errors If an error is thrown inside an executor, then the promise\u0026rsquo;s rejection handler is called. For example:\nlet promise = new Promise(function (resolve, reject) { throw new Error(\u0026#34;Explosion!\u0026#34;); }); promise.catch(function (error) { console.log(error.message); // \u0026#34;Explosion!\u0026#34; });\rIn this code, the executor intentionally throws an error. There is an implicit try-catch inside every executor such that the error is caught and then passed to the rejection handler. The previous example is equivalent to:\nlet promise = new Promise(function (resolve, reject) { try { throw new Error(\u0026#34;Explosion!\u0026#34;); } catch (ex) { reject(ex); } }); promise.catch(function (error) { console.log(error.message); // \u0026#34;Explosion!\u0026#34; });\rThe executor handles catching any thrown errors to simplify this common use case, but an error thrown in the executor is only reported when a rejection handler is present. Otherwise, the error is suppressed. This became a problem for developers early on in the use of promises, and JavaScript environments address it by providing hooks for catching rejected promises.\nGlobal Promise Rejection Handling One of the most controversial aspects of promises is the silent failure that occurs when a promise is rejected without a rejection handler. Some consider this the biggest flaw in the specification as it\u0026rsquo;s the only part of the JavaScript language that doesn\u0026rsquo;t make errors apparent.\nDetermining whether a promise rejection was handled isn\u0026rsquo;t straightforward due to the nature of promises. For instance, consider this example:\nlet rejected = Promise.reject(42); // at this point, rejected is unhandled // some time later... rejected.catch(function (value) { // now rejected has been handled console.log(value); });\rYou can call then() or catch() at any point and have them work correctly regardless of whether the promise is settled or not, making it hard to know precisely when a promise is going to be handled. In this case, the promise is rejected immediately but isn\u0026rsquo;t handled until later.\nWhile it\u0026rsquo;s possible that the next version of ECMAScript will address this problem, both browsers and Node.js have implemented changes to address this developer pain point. They aren\u0026rsquo;t part of the ECMAScript 6 specification but are valuable tools when using promises.\nNode.js Rejection Handling In Node.js, there are two events on the process object related to promise rejection handling:\nunhandledRejection: Emitted when a promise is rejected and no rejection handler is called within one turn of the event loop rejectionHandled: Emitted when a promise is rejected and a rejection handler is called after one turn of the event loop These events are designed to work together to help identify promises that are rejected and not handled.\nThe unhandledRejection event handler is passed the rejection reason (frequently an error object) and the promise that was rejected as arguments. The following code shows unhandledRejection in action:\nlet rejected; process.on(\u0026#34;unhandledRejection\u0026#34;, function (reason, promise) { console.log(reason.message); // \u0026#34;Explosion!\u0026#34; console.log(rejected === promise); // true }); rejected = Promise.reject(new Error(\u0026#34;Explosion!\u0026#34;));\rThis example creates a rejected promise with an error object and listens for the unhandledRejection event. The event handler receives the error object as the first argument and the promise as the second.\nThe rejectionHandled event handler has only one argument, which is the promise that was rejected. For example:\nlet rejected; process.on(\u0026#34;rejectionHandled\u0026#34;, function (promise) { console.log(rejected === promise); // true }); rejected = Promise.reject(new Error(\u0026#34;Explosion!\u0026#34;)); // wait to add the rejection handler setTimeout(function () { rejected.catch(function (value) { console.log(value.message); // \u0026#34;Explosion!\u0026#34; }); }, 1000);\rHere, the rejectionHandled event is emitted when the rejection handler is finally called. If the rejection handler were attached directly to rejected after rejected is created, then the event wouldn\u0026rsquo;t be emitted. The rejection handler would instead be called during the same turn of the event loop where rejected was created, which isn\u0026rsquo;t useful.\nTo properly track potentially unhandled rejections, use the rejectionHandled and unhandledRejection events to keep a list of potentially unhandled rejections. Then wait some period of time to inspect the list. For example:\nlet possiblyUnhandledRejections = new Map(); // when a rejection is unhandled, add it to the map process.on(\u0026#34;unhandledRejection\u0026#34;, function (reason, promise) { possiblyUnhandledRejections.set(promise, reason); }); process.on(\u0026#34;rejectionHandled\u0026#34;, function (promise) { possiblyUnhandledRejections.delete(promise); }); setInterval(function () { possiblyUnhandledRejections.forEach(function (reason, promise) { console.log(reason.message ? reason.message : reason); // do something to handle these rejections handleRejection(promise, reason); }); possiblyUnhandledRejections.clear(); }, 60000);\rThis is a simple unhandled rejection tracker. It uses a map to store promises and their rejection reasons. Each promise is a key, and the promise\u0026rsquo;s reason is the associated value. Each time unhandledRejection is emitted, the promise and its rejection reason are added to the map. Each time rejectionHandled is emitted, the handled promise is removed from the map. As a result, possiblyUnhandledRejections grows and shrinks as events are called. The setInterval() call periodically checks the list of possible unhandled rejections and outputs the information to the console (in reality, you\u0026rsquo;ll probably want to do something else to log or otherwise handle the rejection). A map is used in this example instead of a weak map because you need to inspect the map periodically to see which promises are present, and that\u0026rsquo;s not possible with a weak map.\nWhile this example is specific to Node.js, browsers have implemented a similar mechanism for notifying developers about unhandled rejections.\nBrowser Rejection Handling Browsers also emit two events to help identify unhandled rejections. These events are emitted by the window object and are effectively the same as their Node.js equivalents:\nunhandledrejection: Emitted when a promise is rejected and no rejection handler is called within one turn of the event loop. rejectionhandled: Emitted when a promise is rejected and a rejection handler is called after one turn of the event loop. While the Node.js implementation passes individual parameters to the event handler, the event handler for these browser events receives an event object with the following properties:\ntype: The name of the event (\u0026quot;unhandledrejection\u0026quot; or \u0026quot;rejectionhandled\u0026quot;). promise: The promise object that was rejected. reason: The rejection value from the promise. The other difference in the browser implementation is that the rejection value (reason) is available for both events. For example:\nlet rejected; window.onunhandledrejection = function (event) { console.log(event.type); // \u0026#34;unhandledrejection\u0026#34; console.log(event.reason.message); // \u0026#34;Explosion!\u0026#34; console.log(rejected === event.promise); // true }; window.onrejectionhandled = function (event) { console.log(event.type); // \u0026#34;rejectionhandled\u0026#34; console.log(event.reason.message); // \u0026#34;Explosion!\u0026#34; console.log(rejected === event.promise); // true }; rejected = Promise.reject(new Error(\u0026#34;Explosion!\u0026#34;));\rThis code assigns both event handlers using the DOM Level 0 notation of onunhandledrejection and onrejectionhandled. (You can also use addEventListener(\u0026quot;unhandledrejection\u0026quot;) and addEventListener(\u0026quot;rejectionhandled\u0026quot;) if you prefer.) Each event handler receives an event object containing information about the rejected promise. The type, promise, and reason properties are all available in both event handlers.\nThe code to keep track of unhandled rejections in the browser is very similar to the code for Node.js, too:\nlet possiblyUnhandledRejections = new Map(); // when a rejection is unhandled, add it to the map window.onunhandledrejection = function (event) { possiblyUnhandledRejections.set(event.promise, event.reason); }; window.onrejectionhandled = function (event) { possiblyUnhandledRejections.delete(event.promise); }; setInterval(function () { possiblyUnhandledRejections.forEach(function (reason, promise) { console.log(reason.message ? reason.message : reason); // do something to handle these rejections handleRejection(promise, reason); }); possiblyUnhandledRejections.clear(); }, 60000);\rThis implementation is almost exactly the same as the Node.js implementation. It uses the same approach of storing promises and their rejection values in a map and then inspecting them later. The only real difference is where the information is retrieved from in the event handlers.\nHandling promise rejections can be tricky, but you\u0026rsquo;ve just begun to see how powerful promises can really be. It\u0026rsquo;s time to take the next step and chain several promises together.\nChaining Promises To this point, promises may seem like little more than an incremental improvement over using some combination of a callback and the setTimeout() function, but there is much more to promises than meets the eye. More specifically, there are a number of ways to chain promises together to accomplish more complex asynchronous behavior.\nEach call to then() or catch() actually creates and returns another promise. This second promise is resolved only once the first has been fulfilled or rejected. Consider this example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); p1.then(function (value) { console.log(value); }).then(function () { console.log(\u0026#34;Finished\u0026#34;); });\rThe code outputs:\n42 Finished\rThe call to p1.then() returns a second promise on which then() is called. The second then() fulfillment handler is only called after the first promise has been resolved. If you unchain this example, it looks like this:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = p1.then(function (value) { console.log(value); }); p2.then(function () { console.log(\u0026#34;Finished\u0026#34;); });\rIn this unchained version of the code, the result of p1.then() is stored in p2, and then p2.then() is called to add the final fulfillment handler. As you might have guessed, the call to p2.then() also returns a promise. This example just doesn\u0026rsquo;t use that promise.\nCatching Errors Promise chaining allows you to catch errors that may occur in a fulfillment or rejection handler from a previous promise. For example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); p1.then(function (value) { throw new Error(\u0026#34;Boom!\u0026#34;); }).catch(function (error) { console.log(error.message); // \u0026#34;Boom!\u0026#34; });\rIn this code, the fulfillment handler for p1 throws an error. The chained call to the catch() method, which is on a second promise, is able to receive that error through its rejection handler. The same is true if a rejection handler throws an error:\nlet p1 = new Promise(function (resolve, reject) { throw new Error(\u0026#34;Explosion!\u0026#34;); }); p1.catch(function (error) { console.log(error.message); // \u0026#34;Explosion!\u0026#34; throw new Error(\u0026#34;Boom!\u0026#34;); }).catch(function (error) { console.log(error.message); // \u0026#34;Boom!\u0026#34; });\rHere, the executor throws an error then triggers the p1 promise\u0026rsquo;s rejection handler. That handler then throws another error that is caught by the second promise\u0026rsquo;s rejection handler. The chained promise calls are aware of errors in other promises in the chain.\nI\u0026gt; Always have a rejection handler at the end of a promise chain to ensure that you can properly handle any errors that may occur.\nReturning Values in Promise Chains Another important aspect of promise chains is the ability to pass data from one promise to the next. You\u0026rsquo;ve already seen that a value passed to the resolve() handler inside an executor is passed to the fulfillment handler for that promise. You can continue passing data along a chain by specifying a return value from the fulfillment handler. For example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); p1.then(function (value) { console.log(value); // \u0026#34;42\u0026#34; return value + 1; }).then(function (value) { console.log(value); // \u0026#34;43\u0026#34; });\rThe fulfillment handler for p1 returns value + 1 when executed. Since value is 42 (from the executor), the fulfillment handler returns 43. That value is then passed to the fulfillment handler of the second promise, which outputs it to the console.\nYou could do the same thing with the rejection handler. When a rejection handler is called, it may return a value. If it does, that value is used to fulfill the next promise in the chain, like this:\nlet p1 = new Promise(function (resolve, reject) { reject(42); }); p1.catch(function (value) { // first fulfillment handler console.log(value); // \u0026#34;42\u0026#34; return value + 1; }).then(function (value) { // second fulfillment handler console.log(value); // \u0026#34;43\u0026#34; });\rHere, the executor calls reject() with 42. That value is passed into the rejection handler for the promise, where value + 1 is returned. Even though this return value is coming from a rejection handler, it is still used in the fulfillment handler of the next promise in the chain. The failure of one promise can allow recovery of the entire chain if necessary.\nReturning Promises in Promise Chains Returning primitive values from fulfillment and rejection handlers allows passing of data between promises, but what if you return an object? If the object is a promise, then there\u0026rsquo;s an extra step that\u0026rsquo;s taken to determine how to proceed. Consider the following example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = new Promise(function (resolve, reject) { resolve(43); }); p1.then(function (value) { // first fulfillment handler console.log(value); // 42 return p2; }).then(function (value) { // second fulfillment handler console.log(value); // 43 });\rIn this code, p1 schedules a job that resolves to 42. The fulfillment handler for p1 returns p2, a promise already in the resolved state. The second fulfillment handler is called because p2 has been fulfilled. If p2 were rejected, a rejection handler (if present) would be called instead of the second fulfillment handler.\nThe important thing to recognize about this pattern is that the second fulfillment handler is not added to p2, but rather to a third promise. The second fulfillment handler is therefore attached to that third promise, making the previous example equivalent to this:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = new Promise(function (resolve, reject) { resolve(43); }); let p3 = p1.then(function (value) { // first fulfillment handler console.log(value); // 42 return p2; }); p3.then(function (value) { // second fulfillment handler console.log(value); // 43 });\rHere, it\u0026rsquo;s clear that the second fulfillment handler is attached to p3 rather than p2. This is a subtle but important distinction, as the second fulfillment handler will not be called if p2 is rejected. For instance:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = new Promise(function (resolve, reject) { reject(43); }); p1.then(function (value) { // first fulfillment handler console.log(value); // 42 return p2; }).then(function (value) { // second fulfillment handler console.log(value); // never called });\rIn this example, the second fulfillment handler is never called because p2 is rejected. You could, however, attach a rejection handler instead:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = new Promise(function (resolve, reject) { reject(43); }); p1.then(function (value) { // first fulfillment handler console.log(value); // 42 return p2; }).catch(function (value) { // rejection handler console.log(value); // 43 });\rHere, the rejection handler is called as a result of p2 being rejected. The rejected value 43 from p2 is passed into that rejection handler.\nReturning thenables from fulfillment or rejection handlers doesn\u0026rsquo;t change when the promise executors are executed. The first defined promise will run its executor first, then the second promise executor will run, and so on. Returning thenables simply allows you to define additional responses to the promise results. You defer the execution of fulfillment handlers by creating a new promise within a fulfillment handler. For example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); p1.then(function (value) { console.log(value); // 42 // create a new promise let p2 = new Promise(function (resolve, reject) { resolve(43); }); return p2; }).then(function (value) { console.log(value); // 43 });\rIn this example, a new promise is created within the fulfillment handler for p1. That means the second fulfillment handler won\u0026rsquo;t execute until after p2 is fulfilled. This pattern is useful when you want to wait until a previous promise has been settled before triggering another promise.\nResponding to Multiple Promises Up to this point, each example in this chapter has dealt with responding to one promise at a time. Sometimes, however, you\u0026rsquo;ll want to monitor the progress of multiple promises in order to determine the next action. ECMAScript 6 provides two methods that monitor multiple promises: Promise.all() and Promise.race().\nThe Promise.all() Method The Promise.all() method accepts a single argument, which is an iterable (such as an array) of promises to monitor, and returns a promise that is resolved only when every promise in the iterable is resolved. The returned promise is fulfilled when every promise in the iterable is fulfilled, as in this example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = new Promise(function (resolve, reject) { resolve(43); }); let p3 = new Promise(function (resolve, reject) { resolve(44); }); let p4 = Promise.all([p1, p2, p3]); p4.then(function (value) { console.log(Array.isArray(value)); // true console.log(value[0]); // 42 console.log(value[1]); // 43 console.log(value[2]); // 44 });\rEach promise here resolves with a number. The call to Promise.all() creates promise p4, which is ultimately fulfilled when promises p1, p2, and p3 are fulfilled. The result passed to the fulfillment handler for p4 is an array containing each resolved value: 42, 43, and 44. The values are stored in the order the promises were passed to Promise.all, so you can match promise results to the promises that resolved to them.\nIf any promise passed to Promise.all() is rejected, the returned promise is immediately rejected without waiting for the other promises to complete:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = new Promise(function (resolve, reject) { reject(43); }); let p3 = new Promise(function (resolve, reject) { resolve(44); }); let p4 = Promise.all([p1, p2, p3]); p4.catch(function (value) { console.log(Array.isArray(value)); // false console.log(value); // 43 });\rIn this example, p2 is rejected with a value of 43. The rejection handler for p4 is called immediately without waiting for p1 or p3 to finish executing (They do still finish executing; p4 just doesn\u0026rsquo;t wait.)\nThe rejection handler always receives a single value rather than an array, and the value is the rejection value from the promise that was rejected. In this case, the rejection handler is passed 43 to reflect the rejection from p2.\nThe Promise.race() Method The Promise.race() method provides a slightly different take on monitoring multiple promises. This method also accepts an iterable of promises to monitor and returns a promise, but the returned promise is settled as soon as the first promise is settled. Instead of waiting for all promises to be fulfilled like the Promise.all() method, the Promise.race() method returns an appropriate promise as soon as any promise in the array is fulfilled. For example:\nlet p1 = Promise.resolve(42); let p2 = new Promise(function (resolve, reject) { resolve(43); }); let p3 = new Promise(function (resolve, reject) { resolve(44); }); let p4 = Promise.race([p1, p2, p3]); p4.then(function (value) { console.log(value); // 42 });\rIn this code, p1 is created as a fulfilled promise while the others schedule jobs. The fulfillment handler for p4 is then called with the value of 42 and ignores the other promises. The promises passed to Promise.race() are truly in a race to see which is settled first. If the first promise to settle is fulfilled, then the returned promise is fulfilled; if the first promise to settle is rejected, then the returned promise is rejected. Here\u0026rsquo;s an example with a rejection:\nlet p1 = new Promise(function (resolve, reject) { setTimeout(function () { resolve(42); }, 100); }); let p2 = new Promise(function (resolve, reject) { reject(43); }); let p3 = new Promise(function (resolve, reject) { setTimeout(function () { resolve(44); }, 50); }); let p4 = Promise.race([p1, p2, p3]); p4.catch(function (value) { console.log(value); // 43 });\rHere, both p1 and p3 use setTimeout() (available in both Node.js and web browsers) to delay promise fulfillment. The result is that p4 is rejected because p2 is rejected before either p1 or p3 is resolved. Even though p1 and p3 are eventually fulfilled, those results are ignored because they occur after p2 is rejected.\nInheriting from Promises Just like other built-in types, you can use a promise as the base for a derived class. This allows you to define your own variation of promises to extend what built-in promises can do. Suppose, for instance, you\u0026rsquo;d like to create a promise that can use methods named success() and failure() in addition to the usual then() and catch() methods. You could create that promise type as follows:\nclass MyPromise extends Promise { // use default constructor success(resolve, reject) { return this.then(resolve, reject); } failure(reject) { return this.catch(reject); } } let promise = new MyPromise(function (resolve, reject) { resolve(42); }); promise .success(function (value) { console.log(value); // 42 }) .failure(function (value) { console.log(value); });\rIn this example, MyPromise is derived from Promise and has two additional methods. The success() method mimics then() and failure() mimics the catch() method.\nEach added method uses this to call the method it mimics. The derived promise functions the same as a built-in promise, except now you can call success() and failure() if you want.\nSince static methods are inherited, the MyPromise.resolve() method, the MyPromise.reject() method, the MyPromise.race() method, and the MyPromise.all() method are also present on derived promises. The last two methods behave the same as the built-in methods, but the first two are slightly different.\nBoth MyPromise.resolve() and MyPromise.reject() will return an instance of MyPromise regardless of the value passed because those methods use the Symbol.species property (covered under in Chapter 9) to determine the type of promise to return. If a built-in promise is passed to either method, the promise will be resolved or rejected, and the method will return a new MyPromise so you can assign fulfillment and rejection handlers. For example:\nlet p1 = new Promise(function (resolve, reject) { resolve(42); }); let p2 = MyPromise.resolve(p1); p2.success(function (value) { console.log(value); // 42 }); console.log(p2 instanceof MyPromise); // true Here, p1 is a built-in promise that is passed to the MyPromise.resolve() method. The result, p2, is an instance of MyPromise where the resolved value from p1 is passed into the fulfillment handler.\nIf an instance of MyPromise is passed to the MyPromise.resolve() or MyPromise.reject() methods, it will just be returned directly without being resolved. In all other ways these two methods behave the same as Promise.resolve() and Promise.reject().\nAsynchronous Task Running In Chapter 8, I introduced generators and showed you how you can use them for asynchronous task running, like this:\nlet fs = require(\u0026#34;fs\u0026#34;); function run(taskDef) { // create the iterator, make available elsewhere let task = taskDef(); // start the task let result = task.next(); // recursive function to keep calling next() function step() { // if there\u0026#39;s more to do if (!result.done) { if (typeof result.value === \u0026#34;function\u0026#34;) { result.value(function (err, data) { if (err) { result = task.throw(err); return; } result = task.next(data); step(); }); } else { result = task.next(result.value); step(); } } } // start the process step(); } // Define a function to use with the task runner function readFile(filename) { return function (callback) { fs.readFile(filename, callback); }; } // Run a task run(function* () { let contents = yield readFile(\u0026#34;config.json\u0026#34;); doSomethingWith(contents); console.log(\u0026#34;Done\u0026#34;); });\rThere are some pain points to this implementation. First, wrapping every function in a function that returns a function is a bit confusing (even this sentence was confusing). Second, there is no way to distinguish between a function return value intended as a callback for the task runner and a return value that isn\u0026rsquo;t a callback.\nWith promises, you can greatly simplify and generalize this process by ensuring that each asynchronous operation returns a promise. That common interface means you can greatly simplify asynchronous code. Here\u0026rsquo;s one way you could simplify that task runner:\nlet fs = require(\u0026#34;fs\u0026#34;); function run(taskDef) { // create the iterator let task = taskDef(); // start the task let result = task.next(); // recursive function to iterate through (function step() { // if there\u0026#39;s more to do if (!result.done) { // resolve to a promise to make it easy let promise = Promise.resolve(result.value); promise .then(function (value) { result = task.next(value); step(); }) .catch(function (error) { result = task.throw(error); step(); }); } })(); } // Define a function to use with the task runner function readFile(filename) { return new Promise(function (resolve, reject) { fs.readFile(filename, function (err, contents) { if (err) { reject(err); } else { resolve(contents); } }); }); } // Run a task run(function* () { let contents = yield readFile(\u0026#34;config.json\u0026#34;); doSomethingWith(contents); console.log(\u0026#34;Done\u0026#34;); });\rIn this version of the code, a generic run() function executes a generator to create an iterator. It calls task.next() to start the task and recursively calls step() until the iterator is complete.\nInside the step() function, if there\u0026rsquo;s more work to do, then result.done is false. At that point, result.value should be a promise, but Promise.resolve() is called just in case the function in question didn\u0026rsquo;t return a promise. (Remember, Promise.resolve() just passes through any promise passed in and wraps any non-promise in a promise.) Then, a fulfillment handler is added that retrieves the promise value and passes the value back to the iterator. After that, result is assigned to the next yield result before the step() function calls itself.\nA rejection handler stores any rejection results in an error object. The task.throw() method passes that error object back into the iterator, and if an error is caught in the task, result is assigned to the next yield result. Finally, step() is called inside catch() to continue.\nThis run() function can run any generator that uses yield to achieve asynchronous code without exposing promises (or callbacks) to the developer. In fact, since the return value of the function call is always coverted into a promise, the function can even return something other than a promise. That means both synchronous and asynchronous methods work correctly when called using yield, and you never have to check that the return value is a promise.\nThe only concern is ensuring that asynchronous functions like readFile() return a promise that correctly identifies its state. For Node.js built-in methods, that means you\u0026rsquo;ll have to convert those methods to return promises instead of using callbacks.\nA\u0026gt; ### Future Asynchronous Task Running A\u0026gt; A\u0026gt; At the time of my writing, there is ongoing work around bringing a simpler syntax to asynchronous task running in JavaScript. Work is progressing on an await syntax that would closely mirror the promise-based example in the preceding section. The basic idea is to use a function marked with async instead of a generator and use await instead of yield when calling a function, such as: A\u0026gt; A\u0026gt; js A\u0026gt; (async function() { A\u0026gt; let contents = await readFile(\u0026quot;config.json\u0026quot;); A\u0026gt; doSomethingWith(contents); A\u0026gt; console.log(\u0026quot;Done\u0026quot;); A\u0026gt; })(); A\u0026gt; A\u0026gt; A\u0026gt; The async keyword before function indicates that the function is meant to run in an asynchronous manner. The await keyword signals that the function call to readFile(\u0026quot;config.json\u0026quot;) should return a promise, and if it doesn\u0026rsquo;t, the response should be wrapped in a promise. Just as with the implementation of run() in the preceding section, await will throw an error if the promise is rejected and otherwise return the value from the promise. The end result is that you get to write asynchronous code as if it were synchronous without the overhead of managing an iterator-based state machine. A\u0026gt; A\u0026gt; The await syntax is expected to be finalized in ECMAScript 2017 (ECMAScript 8).\nSummary Promises are designed to improve asynchronous programming in JavaScript by giving you more control and composability over asynchronous operations than events and callbacks can. Promises schedule jobs to be added to the JavaScript engine\u0026rsquo;s job queue for execution later, while a second job queue tracks promise fulfillment and rejection handlers to ensure proper execution.\nPromises have three states: pending, fulfilled, and rejected. A promise starts in a pending state and becomes fulfilled on a successful execution or rejected on a failure. In either case, handlers can be added to indicate when a promise is settled. The then() method allows you to assign a fulfillment and rejection handler and the catch() method allows you to assign only a rejection handler.\nYou can chain promises together in a variety of ways and pass information between them. Each call to then() creates and returns a new promise that is resolved when the previous one is resolved. Such chains can be used to trigger responses to a series of asynchronous events. You can also use Promise.race() and Promise.all() to monitor the progress of multiple promises and respond accordingly.\nAsynchronous task running is easier when you combine generators and promises, as promises give a common interface that asynchronous operations can return. You can then use generators and the yield operator to wait for asynchronous responses and respond appropriately.\nMost new web APIs are being built on top of promises, and you can expect many more to follow suit in the future.\n","date":"0001-01-01","id":40,"permalink":"/es6/11-promises/","summary":"\u003cp\u003eOne of the most powerful aspects of JavaScript is how easily it handles asynchronous programming. As a language created for the Web, JavaScript needed to be able to respond to asynchronous user interactions such as clicks and key presses from the beginning. Node.js further popularized asynchronous programming in JavaScript by using callbacks as an alternative to events. As more and more programs started using asynchronous programming, events and callbacks were no longer powerful enough to support everything developers wanted to do. \u003cem\u003ePromises\u003c/em\u003e are the solution to this problem.\u003c/p\u003e","tags":[],"title":"11 Promises and Asynchronous Programming"},{"content":"Solution const lcm = (a, b) =\u0026gt; (a * b) / gcd(a, b); console.log(lcm(12, 15)); // Output: 60 ","date":"0001-01-01","id":41,"permalink":"/prep-1/prep-1/11-to-20/11.-finding-the-least-common-multiple-lcm/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elcm\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"nx\"\u003egcd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elcm\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e15\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: 60\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"11. Finding the Least Common Multiple (LCM)"},{"content":"ECMAScript 5 and ECMAScript 6 were both developed with demystifying JavaScript functionality in mind. For example, JavaScript environments contained nonenumerable and nonwritable object properties before ECMAScript 5, but developers couldn\u0026rsquo;t define their own nonenumerable or nonwritable properties. ECMAScript 5 included the Object.defineProperty() method to allow developers to do what JavaScript engines could do already.\nECMAScript 6 gives developers further access to JavaScript engine capabilities previously available only to built-in objects. The language exposes the inner workings of objects through proxies, which are wrappers that can intercept and alter low-level operations of the JavaScript engine. This chapter starts by describing the problem that proxies are meant to address in detail, and then discusses how you can create and use proxies effectively.\nThe Array Problem The JavaScript array object behaves in ways that developers couldn\u0026rsquo;t mimic in their own objects before ECMASCript 6. An array\u0026rsquo;s length property is affected when you assign values to specific array items, and you can modify array items by modifying the length property. For example:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; console.log(colors.length); // 3 colors[3] = \u0026#34;black\u0026#34;; console.log(colors.length); // 4 console.log(colors[3]); // \u0026#34;black\u0026#34; colors.length = 2; console.log(colors.length); // 2 console.log(colors[3]); // undefined console.log(colors[2]); // undefined console.log(colors[1]); // \u0026#34;green\u0026#34; The colors array starts with three items. Assigning \u0026quot;black\u0026quot; to colors[3] automatically increments the length property to 4. Setting the length property to 2 removes the last two items in the array, leaving only the first two items. Nothing in ECMAScript 5 allows developers to achieve this behavior, but proxies change that.\nI\u0026gt; This nonstandard behavior is why arrays are considered exotic objects in ECMAScript 6.\nWhat are Proxies and Reflection? You can create a proxy to use in place of another object (called the target) by calling new Proxy(). The proxy virtualizes the target so that the proxy and the target appear to be the same object to functionality using the proxy.\nProxies allow you to intercept low-level object operations on the target that are otherwise internal to the JavaScript engine. These low-level operations are intercepted using a trap, which is a function that responds to a specific operation.\nThe reflection API, represented by the Reflect object, is a collection of methods that provide the default behavior for the same low-level operations that proxies can override. There is a Reflect method for every proxy trap. Those methods have the same name and are passed the same arguments as their respective proxy traps. Table 11-1 summarizes this behavior.\nProxy Trap Overrides the Behavior Of Default Behavior get Reading a property value Reflect.get() set Writing to a property Reflect.set() has The in operator Reflect.has() deleteProperty The delete operator Reflect.deleteProperty() getPrototypeOf Object.getPrototypeOf() Reflect.getPrototypeOf() setPrototypeOf Object.setPrototypeOf() Reflect.setPrototypeOf() isExtensible Object.isExtensible() Reflect.isExtensible() preventExtensions Object.preventExtensions() Reflect.preventExtensions() getOwnPropertyDescriptor Object.getOwnPropertyDescriptor() Reflect.getOwnPropertyDescriptor() defineProperty Object.defineProperty() Reflect.defineProperty ownKeys Object.keys, Object.getOwnPropertyNames(), Object.getOwnPropertySymbols() Reflect.ownKeys() apply Calling a function Reflect.apply() construct Calling a function with new Reflect.construct() Each trap overrides some built-in behavior of JavaScript objects, allowing you to intercept and modify the behavior. If you still need to use the built-in behavior, then you can use the corresponding reflection API method. The relationship between proxies and the reflection API becomes clear when you start creating proxies, so it\u0026rsquo;s best to dive in and look at some examples.\nI\u0026gt; The original ECMAScript 6 specification had an additional trap called enumerate that was designed to alter how for-in and Object.keys() enumerated properties on an object. However, the enumerate trap was removed in ECMAScript 7 (also called ECMAScript 2016) as difficulties were discovered during implementation. The enumerate trap no longer exists in any JavaScript environment and is therefore not covered in this chapter.\nCreating a Simple Proxy When you use the Proxy constructor to make a proxy, you\u0026rsquo;ll pass it two arguments: the target and a handler. A handler is an object that defines one or more traps. The proxy uses the default behavior for all operations except when traps are defined for that operation. To create a simple forwarding proxy, you can use a handler without any traps:\nlet target = {}; let proxy = new Proxy(target, {}); proxy.name = \u0026#34;proxy\u0026#34;; console.log(proxy.name); // \u0026#34;proxy\u0026#34; console.log(target.name); // \u0026#34;proxy\u0026#34; target.name = \u0026#34;target\u0026#34;; console.log(proxy.name); // \u0026#34;target\u0026#34; console.log(target.name); // \u0026#34;target\u0026#34; In this example, proxy forwards all operations directly to target. When \u0026quot;proxy\u0026quot; is assigned to the proxy.name property, name is created on target. The proxy itself is not storing this property; it\u0026rsquo;s simply forwarding the operation to target. Similarly, the values of proxy.name and target.name are the same because they are both references to target.name. That also means setting target.name to a new value causes proxy.name to reflect the same change. Of course, proxies without traps aren\u0026rsquo;t very interesting, so what happens when you define a trap?\nValidating Properties Using the set Trap Suppose you want to create an object whose property values must be numbers. That means every new property added to the object must be validated, and an error must be thrown if the value isn\u0026rsquo;t a number. To accomplish this, you could define a set trap that overrides the default behavior of setting a value. The set trap receives four arguments:\ntrapTarget - the object that will receive the property (the proxy\u0026rsquo;s target) key - the property key (string or symbol) to write to value - the value being written to the property receiver - the object on which the operation took place (usually the proxy) Reflect.set() is the set trap\u0026rsquo;s corresponding reflection method, and it\u0026rsquo;s the default behavior for this operation. The Reflect.set() method accepts the same four arguments as the set proxy trap, making the method easy to use inside of the trap. The trap should return true if the property was set or false if not. (The Reflect.set() method returns the correct value based on whether the operation succeeded.)\nTo validate the values of properties, you\u0026rsquo;d use the set trap and inspect the value that is passed in. Here\u0026rsquo;s an example:\nlet target = { name: \u0026#34;target\u0026#34; }; let proxy = new Proxy(target, { set(trapTarget, key, value, receiver) { // ignore existing properties so as not to affect them if (!trapTarget.hasOwnProperty(key)) { if (isNaN(value)) { throw new TypeError(\u0026#34;Property must be a number.\u0026#34;); } } // add the property return Reflect.set(trapTarget, key, value, receiver); } }); // adding a new property proxy.count = 1; console.log(proxy.count); // 1 console.log(target.count); // 1 // you can assign to name because it exists on target already proxy.name = \u0026#34;proxy\u0026#34;; console.log(proxy.name); // \u0026#34;proxy\u0026#34; console.log(target.name); // \u0026#34;proxy\u0026#34; // throws an error proxy.anotherName = \u0026#34;proxy\u0026#34;;\rThis code defines a proxy trap that validates the value of any new property added to target. When proxy.count = 1 is executed, the set trap is called. The trapTarget value is equal to target, key is \u0026quot;count\u0026quot;, value is 1, and receiver (not used in this example) is proxy. There is no existing property named count in target, so the proxy validates value by passing it to isNaN(). If the result is NaN, then the property value is not numeric and an error is thrown. Since this code sets count to 1, the proxy calls Reflect.set() with the same four arguments that were passed to the trap to add the new property.\nWhen proxy.name is assigned a string, the operation completes successfully. Since target already has a name property, that property is omitted from the validation check by calling the trapTarget.hasOwnProperty() method. This ensures that previously-existing non-numeric property values are still supported.\nWhen proxy.anotherName is assigned a string, however, an error is thrown. The anotherName property doesn\u0026rsquo;t exist on the target, so its value needs to be validated. During validation, the error is thrown because \u0026quot;proxy\u0026quot; isn\u0026rsquo;t a numeric value.\nWhere the set proxy trap lets you intercept when properties are being written to, the get proxy trap lets you intercept when properties are being read.\nObject Shape Validation Using the get Trap One of the interesting, and sometimes confusing, aspects of JavaScript is that reading nonexistent properties doesn\u0026rsquo;t throw an error. Instead, the value undefined is used for the property value, as in this example:\nlet target = {}; console.log(target.name); // undefined In most other languages, attempting to read target.name throws an error because the property doesn\u0026rsquo;t exist. But JavaScript just uses undefined for the value of the target.name property. If you\u0026rsquo;ve ever worked on a large code base, you\u0026rsquo;ve probably seen how this behavior can cause significant problems, especially when there\u0026rsquo;s a typo in the property name. Proxies can help you save yourself from this problem by having object shape validation.\nAn object shape is the collection of properties and methods available on the object. JavaScript engines use object shapes to optimize code, often creating classes to represent the objects. If you can safely assume an object will always have the same properties and methods it began with (a behavior you can enforce with the Object.preventExtensions() method, the Object.seal() method, or the Object.freeze() method), then throwing an error on attempts to access nonexistent properties can be helpful. Proxies make object shape validation easy.\nSince property validation only has to happen when a property is read, you\u0026rsquo;d use the get trap. The get trap is called when a property is read, even if that property doesn\u0026rsquo;t exist on the object, and it takes three arguments:\ntrapTarget - the object from which the property is read (the proxy\u0026rsquo;s target) key - the property key (a string or symbol) to read receiver - the object on which the operation took place (usually the proxy) These arguments mirror the set trap\u0026rsquo;s arguments, with one noticeable difference. There\u0026rsquo;s no value argument here because get traps don\u0026rsquo;t write values. The Reflect.get() method accepts the same three arguments as the get trap and returns the property\u0026rsquo;s default value.\nYou can use the get trap and Reflect.get() to throw an error when a property doesn\u0026rsquo;t exist on the target, as follows:\nlet proxy = new Proxy( {}, { get(trapTarget, key, receiver) { if (!(key in receiver)) { throw new TypeError(\u0026#34;Property \u0026#34; + key + \u0026#34; doesn\u0026#39;t exist.\u0026#34;); } return Reflect.get(trapTarget, key, receiver); } } ); // adding a property still works proxy.name = \u0026#34;proxy\u0026#34;; console.log(proxy.name); // \u0026#34;proxy\u0026#34; // nonexistent properties throw an error console.log(proxy.nme); // throws error In this example, the get trap intercepts property read operations. The in operator is used to determine if the property already exists on the receiver. The receiver is used with in instead of trapTarget in case receiver is a proxy with a has trap, a type I\u0026rsquo;ll cover in the next section. Using trapTarget in this case would sidestep the has trap and potentially give you the wrong result. An error is thrown if the property doesn\u0026rsquo;t exist, and otherwise, the default behavior is used.\nThis code allows new properties like proxy.name to be added, written to, and read from with no problems. The last line contains a typo: proxy.nme should probably be proxy.name instead. This throws an error because nme doesn\u0026rsquo;t exist as a property.\nHiding Property Existence Using the has Trap The in operator determines whether a property exists on a given object and returns true if there is either an own property or a prototype property matching the name or symbol. For example:\nlet target = { value: 42; } console.log(\u0026#34;value\u0026#34; in target); // true console.log(\u0026#34;toString\u0026#34; in target); // true Both value and toString exist on object, so in both cases the in operator returns true. The value property is an own property while toString is a prototype property (inherited from Object). Proxies allow you to intercept this operation and return a different value for in with the has trap.\nThe has trap is called whenever the in operator is used. When called, two arguments are passed to the has trap:\ntrapTarget - the object the property is read from (the proxy\u0026rsquo;s target) key - the property key (string or symbol) to check The Reflect.has() method accepts these same arguments and returns the default response for the in operator. Using the has trap and Reflect.has() allows you to alter the behavior of in for some properties while falling back to default behavior for others. For instance, suppose you just want to hide the value property. You can do so like this:\nlet target = { name: \u0026#34;target\u0026#34;, value: 42 }; let proxy = new Proxy(target, { has(trapTarget, key) { if (key === \u0026#34;value\u0026#34;) { return false; } else { return Reflect.has(trapTarget, key); } } }); console.log(\u0026#34;value\u0026#34; in proxy); // false console.log(\u0026#34;name\u0026#34; in proxy); // true console.log(\u0026#34;toString\u0026#34; in proxy); // true The has trap for proxy checks to see if key is \u0026quot;value\u0026quot; returns false if so. Otherwise, the default behavior is used via a call to the Reflect.has() method. As a result, the in operator returns false for the value property even though value actually exists on the target. The other properties, name and toString, correctly return true when used with the in operator.\nPreventing Property Deletion with the deleteProperty Trap The delete operator removes a property from an object and returns true when successful and false when unsuccessful. In strict mode, delete throws an error when you attempt to delete a nonconfigurable property; in nonstrict mode, delete simply returns false. Here\u0026rsquo;s an example:\nlet target = { name: \u0026#34;target\u0026#34;, value: 42 }; Object.defineProperty(target, \u0026#34;name\u0026#34;, { configurable: false }); console.log(\u0026#34;value\u0026#34; in target); // true let result1 = delete target.value; console.log(result1); // true console.log(\u0026#34;value\u0026#34; in target); // false // Note: The following line throws an error in strict mode let result2 = delete target.name; console.log(result2); // false console.log(\u0026#34;name\u0026#34; in target); // true The value property is deleted using the delete operator and, as a result, the in operator returns false in the third console.log() call. The nonconfigurable name property can\u0026rsquo;t be deleted so the delete operator simply returns false (if this code is run in strict mode, an error is thrown instead). You can alter this behavior by using the deleteProperty trap in a proxy.\nThe deleteProperty trap is called whenever the delete operator is used on an object property. The trap is passed two arguments:\ntrapTarget - the object from which the property should be deleted (the proxy\u0026rsquo;s target) key - the property key (string or symbol) to delete The Reflect.deleteProperty() method provides the default implementation of the deleteProperty trap and accepts the same two arguments. You can combine Reflect.deleteProperty() and the deleteProperty trap to change how the delete operator behaves. For instance, you could ensure that the value property can\u0026rsquo;t be deleted:\nlet target = { name: \u0026#34;target\u0026#34;, value: 42 }; let proxy = new Proxy(target, { deleteProperty(trapTarget, key) { if (key === \u0026#34;value\u0026#34;) { return false; } else { return Reflect.deleteProperty(trapTarget, key); } } }); // Attempt to delete proxy.value console.log(\u0026#34;value\u0026#34; in proxy); // true let result1 = delete proxy.value; console.log(result1); // false console.log(\u0026#34;value\u0026#34; in proxy); // true // Attempt to delete proxy.name console.log(\u0026#34;name\u0026#34; in proxy); // true let result2 = delete proxy.name; console.log(result2); // true console.log(\u0026#34;name\u0026#34; in proxy); // false This code is very similar to the has trap example in that the deleteProperty trap checks to see if the key is \u0026quot;value\u0026quot; and returns false if so. Otherwise, the default behavior is used by calling the Reflect.deleteProperty() method. The value property can\u0026rsquo;t be deleted through proxy because the operation is trapped, but the name property is deleted as expected. This approach is especially useful when you want to protect properties from deletion without throwing an error in strict mode.\nPrototype Proxy Traps Chapter 4 introduced the Object.setPrototypeOf() method that ECMAScript 6 added to complement the ECMAScript 5 Object.getPrototypeOf() method. Proxies allow you to intercept execution of both methods through the setPrototypeOf and getPrototypeOf traps. In both cases, the method on Object calls the trap of the corresponding name on the proxy, allowing you to alter the methods\u0026rsquo; behavior.\nSince there are two traps associated with prototype proxies, there\u0026rsquo;s a set of methods associated with each type of trap. The setPrototypeOf trap receives these arguments:\ntrapTarget - the object for which the prototype should be set (the proxy\u0026rsquo;s target) proto - the object to use for as the prototype These are the same arguments passed to the Object.setPrototypeOf() and Reflect.setPrototypeOf() methods. The getPrototypeOf trap, on the other hand, only receives the trapTarget argument, which is the argument passed to the Object.getPrototypeOf() and Reflect.getPrototypeOf() methods.\nHow Prototype Proxy Traps Work There are some restrictions on these traps. First, the getPrototypeOf trap must return an object or null, and any other return value results in a runtime error. The return value check ensures that Object.getPrototypeOf() will always return an expected value. Similarly, the return value of the setPrototypeOf trap must be false if the operation doesn\u0026rsquo;t succeed. When setPrototypeOf returns false, Object.setPrototypeOf() throws an error. If setPrototypeOf returns any value other than false, then Object.setPrototypeOf() assumes the operation succeeded.\nThe following example hides the prototype of the proxy by always returning null and also doesn\u0026rsquo;t allow the prototype to be changed:\nlet target = {}; let proxy = new Proxy(target, { getPrototypeOf(trapTarget) { return null; }, setPrototypeOf(trapTarget, proto) { return false; } }); let targetProto = Object.getPrototypeOf(target); let proxyProto = Object.getPrototypeOf(proxy); console.log(targetProto === Object.prototype); // true console.log(proxyProto === Object.prototype); // false console.log(proxyProto); // null // succeeds Object.setPrototypeOf(target, {}); // throws error Object.setPrototypeOf(proxy, {});\rThis code emphasizes the difference between the behavior of target and proxy. While Object.getPrototypeOf() returns a value for target, it returns null for proxy because the getPrototypeOf trap is called. Similarly, Object.setPrototypeOf() succeeds when used on target but throws an error when used on proxy due to the setPrototypeOf trap.\nIf you want to use the default behavior for these two traps, you can use the corresponding methods on Reflect. For instance, this code implements the default behavior for the getPrototypeOf and setPrototypeOf traps:\nlet target = {}; let proxy = new Proxy(target, { getPrototypeOf(trapTarget) { return Reflect.getPrototypeOf(trapTarget); }, setPrototypeOf(trapTarget, proto) { return Reflect.setPrototypeOf(trapTarget, proto); } }); let targetProto = Object.getPrototypeOf(target); let proxyProto = Object.getPrototypeOf(proxy); console.log(targetProto === Object.prototype); // true console.log(proxyProto === Object.prototype); // true // succeeds Object.setPrototypeOf(target, {}); // also succeeds Object.setPrototypeOf(proxy, {});\rIn this example, you can use target and proxy interchangeably and get the same results because the getPrototypeOf and setPrototypeOf traps are just passing through to use the default implementation. It\u0026rsquo;s important that this example use the Reflect.getPrototypeOf() and Reflect.setPrototypeOf() methods rather than the methods of the same name on Object due to some important differences.\nWhy Two Sets of Methods? The confusing aspect of Reflect.getPrototypeOf() and Reflect.setPrototypeOf() is that they look suspiciously similar to the Object.getPrototypeOf() and Object.setPrototypeOf() methods. While both sets of methods perform similar operations, there are some distinct differences between the two.\nTo begin, Object.getPrototypeOf() and Object.setPrototypeOf() are higher-level operations that were created for developer use from the start. The Reflect.getPrototypeOf() and Reflect.setPrototypeOf() methods are lower-level operations that give developers access to the previously internal-only [[GetPrototypeOf]] and [[SetPrototypeOf]] operations. The Reflect.getPrototypeOf() method is the wrapper for the internal [[GetPrototypeOf]] operation (with some input validation). The Reflect.setPrototypeOf() method and [[SetPrototypeOf]] have the same relationship. The corresponding methods on Object also call [[GetPrototypeOf]] and [[SetPrototypeOf]] but perform a few steps before the call and inspect the return value to determine how to behave.\nThe Reflect.getPrototypeOf() method throws an error if its argument is not an object, while Object.getPrototypeOf() first coerces the value into an object before performing the operation. If you were to pass a number into each method, you\u0026rsquo;d get a different result:\nlet result1 = Object.getPrototypeOf(1); console.log(result1 === Number.prototype); // true // throws an error Reflect.getPrototypeOf(1);\rThe Object.getPrototypeOf() method allows you to retrieve a prototype for the number 1 because it first coerces the value into a Number object and then returns Number.prototype. The Reflect.getPrototypeOf() method doesn\u0026rsquo;t coerce the value, and since 1 isn\u0026rsquo;t an object, it throws an error.\nThe Reflect.setPrototypeOf() method also has a few more differences from the Object.setPrototypeOf() method. First, Reflect.setPrototypeOf() returns a boolean value indicating whether the operation was successful. A true value is returned for success, and false is returned for failure. If Object.setPrototypeOf() fails, it throws an error.\nAs the first example under \u0026ldquo;How Prototype Proxy Traps Work\u0026rdquo; showed, when the setPrototypeOf proxy trap returns false, it causes Object.setPrototypeOf() to throw an error. The Object.setPrototypeOf() method returns the first argument as its value and therefore isn\u0026rsquo;t suitable for implementing the default behavior of the setPrototypeOf proxy trap. The following code demonstrates these differences:\nlet target1 = {}; let result1 = Object.setPrototypeOf(target1, {}); console.log(result1 === target1); // true let target2 = {}; let result2 = Reflect.setPrototypeOf(target2, {}); console.log(result2 === target2); // false console.log(result2); // true In this example, Object.setPrototypeOf() returns target1 as its value, but Reflect.setPrototypeOf() returns true. This subtle difference is very important. You\u0026rsquo;ll see more seemingly duplicate methods on Object and Reflect, but always be sure to use the method on Reflect inside any proxy traps.\nI\u0026gt; Both sets of methods will call the getPrototypeOf and setPrototypeOf proxy traps when used on a proxy.\nObject Extensibility Traps ECMAScript 5 added object extensibility modification through the Object.preventExtensions() and Object.isExtensible() methods, and ECMAScript 6 allows proxies to intercept those method calls to the underlying objects through the preventExtensions and isExtensible traps. Both traps receive a single argument called trapTarget that is the object on which the method was called. The isExtensible trap must return a boolean value indicating whether the object is extensible while the preventExtensions trap must return a boolean value indicating if the operation succeeded.\nThere are also Reflect.preventExtensions() and Reflect.isExtensible() methods to implement the default behavior. Both return boolean values, so they can be used directly in their corresponding traps.\nTwo Basic Examples To see object extensibility traps in action, consider the following code, which implements the default behavior for the isExtensible and preventExtensions traps:\nlet target = {}; let proxy = new Proxy(target, { isExtensible(trapTarget) { return Reflect.isExtensible(trapTarget); }, preventExtensions(trapTarget) { return Reflect.preventExtensions(trapTarget); } }); console.log(Object.isExtensible(target)); // true console.log(Object.isExtensible(proxy)); // true Object.preventExtensions(proxy); console.log(Object.isExtensible(target)); // false console.log(Object.isExtensible(proxy)); // false This example shows that both Object.preventExtensions() and Object.isExtensible() correctly pass through from proxy to target. You can, of course, also change the behavior. For example, if you don\u0026rsquo;t want to allow Object.preventExtensions() to succeed on your proxy, you could return false from the preventExtensions trap:\nlet target = {}; let proxy = new Proxy(target, { isExtensible(trapTarget) { return Reflect.isExtensible(trapTarget); }, preventExtensions(trapTarget) { return false; } }); console.log(Object.isExtensible(target)); // true console.log(Object.isExtensible(proxy)); // true Object.preventExtensions(proxy); console.log(Object.isExtensible(target)); // true console.log(Object.isExtensible(proxy)); // true Here, the call to Object.preventExtensions(proxy) is effectively ignored because the preventExtensions trap returns false. The operation isn\u0026rsquo;t forwarded to the underlying target, so Object.isExtensible() returns true.\nDuplicate Extensibility Methods You may have noticed that, once again, there are seemingly duplicate methods on Object and Reflect. In this case, they\u0026rsquo;re more similar than not. The methods Object.isExtensible() and Reflect.isExtensible() are similar except when passed a non-object value. In that case, Object.isExtensible() always returns false while Reflect.isExtensible() throws an error. Here\u0026rsquo;s an example of that behavior:\nlet result1 = Object.isExtensible(2); console.log(result1); // false // throws error let result2 = Reflect.isExtensible(2);\rThis restriction is similar to the difference between the Object.getPrototypeOf() and Reflect.getPrototypeOf() methods, as the method with lower-level functionality has stricter error checks than its higher-level counterpart.\nThe Object.preventExtensions() and Reflect.preventExtensions() methods are also very similar. The Object.preventExtensions() method always returns the value that was passed to it as an argument even if the value isn\u0026rsquo;t an object. The Reflect.preventExtensions() method, on the other hand, throws an error if the argument isn\u0026rsquo;t an object; if the argument is an object, then Reflect.preventExtensions() returns true when the operation succeeds or false if not. For example:\nlet result1 = Object.preventExtensions(2); console.log(result1); // 2 let target = {}; let result2 = Reflect.preventExtensions(target); console.log(result2); // true // throws error let result3 = Reflect.preventExtensions(2);\rHere, Object.preventExtensions() passes through the value 2 as its return value even though 2 isn\u0026rsquo;t an object. The Reflect.preventExtensions() method returns true when an object is passed to it and throws an error when 2 is passed to it.\nProperty Descriptor Traps One of the most important features of ECMAScript 5 was the ability to define property attributes using the Object.defineProperty() method. In previous versions of JavaScript, there was no way to define an accessor property, make a property read-only, or make a property nonenumerable. All of these are possible with the Object.defineProperty() method, and you can retrieve those attributes with the Object.getOwnPropertyDescriptor() method.\nProxies let you intercept calls to Object.defineProperty() and Object.getOwnPropertyDescriptor() using the defineProperty and getOwnPropertyDescriptor traps, respectively. The defineProperty trap receives the following arguments:\ntrapTarget - the object on which the property should be defined (the proxy\u0026rsquo;s target) key - the string or symbol for the property descriptor - the descriptor object for the property The defineProperty trap requires you to return true if the operation is successful and false if not. The getOwnPropertyDescriptor traps receives only trapTarget and key, and you are expected to return the descriptor. The corresponding Reflect.defineProperty() and Reflect.getOwnPropertyDescriptor() methods accept the same arguments as their proxy trap counterparts. Here\u0026rsquo;s an example that just implements the default behavior for each trap:\nlet proxy = new Proxy( {}, { defineProperty(trapTarget, key, descriptor) { return Reflect.defineProperty(trapTarget, key, descriptor); }, getOwnPropertyDescriptor(trapTarget, key) { return Reflect.getOwnPropertyDescriptor(trapTarget, key); } } ); Object.defineProperty(proxy, \u0026#34;name\u0026#34;, { value: \u0026#34;proxy\u0026#34; }); console.log(proxy.name); // \u0026#34;proxy\u0026#34; let descriptor = Object.getOwnPropertyDescriptor(proxy, \u0026#34;name\u0026#34;); console.log(descriptor.value); // \u0026#34;proxy\u0026#34; This code defines a property called \u0026quot;name\u0026quot; on the proxy with the Object.defineProperty() method. The property descriptor for that property is then retrieved by the Object.getOwnPropertyDescriptor() method.\nBlocking Object.defineProperty() The defineProperty trap requires you to return a boolean value to indicate whether the operation was successful. When true is returned, Object.defineProperty() succeeds as usual; when false is returned, Object.defineProperty() throws an error. You can use this functionality to restrict the kinds of properties that the Object.defineProperty() method can define. For instance, if you want to prevent symbol properties from being defined, you could check that the key is a string and return false if not, like this:\nlet proxy = new Proxy( {}, { defineProperty(trapTarget, key, descriptor) { if (typeof key === \u0026#34;symbol\u0026#34;) { return false; } return Reflect.defineProperty(trapTarget, key, descriptor); } } ); Object.defineProperty(proxy, \u0026#34;name\u0026#34;, { value: \u0026#34;proxy\u0026#34; }); console.log(proxy.name); // \u0026#34;proxy\u0026#34; let nameSymbol = Symbol(\u0026#34;name\u0026#34;); // throws error Object.defineProperty(proxy, nameSymbol, { value: \u0026#34;proxy\u0026#34; });\rThe defineProperty proxy trap returns false when key is a symbol and otherwise proceeds with the default behavior. When Object.defineProperty() is called with \u0026quot;name\u0026quot; as the key, the method succeeds because the key is a string. When Object.defineProperty() is called with nameSymbol, it throws an error because the defineProperty trap returns false.\nI\u0026gt; You can also have Object.defineProperty() silently fail by returning true and not calling the Reflect.defineProperty() method. That will suppress the error while not actually defining the property.\nDescriptor Object Restrictions To ensure consistent behavior when using the Object.defineProperty() and Object.getOwnPropertyDescriptor() methods, descriptor objects passed to the defineProperty trap are normalized. Objects returned from getOwnPropertyDescriptor trap are always validated for the same reason.\nNo matter what object is passed as the third argument to the Object.defineProperty() method, only the properties enumerable, configurable, value, writable, get, and set will be on the descriptor object passed to the defineProperty trap. For example:\nlet proxy = new Proxy( {}, { defineProperty(trapTarget, key, descriptor) { console.log(descriptor.value); // \u0026#34;proxy\u0026#34; console.log(descriptor.name); // undefined return Reflect.defineProperty(trapTarget, key, descriptor); } } ); Object.defineProperty(proxy, \u0026#34;name\u0026#34;, { value: \u0026#34;proxy\u0026#34;, name: \u0026#34;custom\u0026#34; });\rHere, Object.defineProperty() is called with a nonstandard name property on the third argument. When the defineProperty trap is called, the descriptor object doesn\u0026rsquo;t have a name property but does have a value property. That\u0026rsquo;s because descriptor isn\u0026rsquo;t a reference to the actual third argument passed to the Object.defineProperty() method, but rather a new object that contains only the allowable properties. The Reflect.defineProperty() method also ignores any nonstandard properties on the descriptor.\nThe getOwnPropertyDescriptor trap has a slightly different restriction that requires the return value to be null, undefined, or an object. If an object is returned, only enumerable, configurable, value, writable, get, and set are allowed as own properties of the object. An error is thrown if you return an object with an own property that isn\u0026rsquo;t allowed, as this code shows:\nlet proxy = new Proxy( {}, { getOwnPropertyDescriptor(trapTarget, key) { return { name: \u0026#34;proxy\u0026#34; }; } } ); // throws error let descriptor = Object.getOwnPropertyDescriptor(proxy, \u0026#34;name\u0026#34;);\rThe property name isn\u0026rsquo;t allowable on property descriptors, so when Object.getOwnPropertyDescriptor() is called, the getOwnPropertyDescriptor return value triggers an error. This restriction ensures that the value returned by Object.getOwnPropertyDescriptor() always has a reliable structure regardless of use on proxies.\nDuplicate Descriptor Methods Once again, ECMAScript 6 has some confusingly similar methods, as the Object.defineProperty() and Object.getOwnPropertyDescriptor() methods appear to do the same thing as the Reflect.defineProperty() and Reflect.getOwnPropertyDescriptor() methods, respectively. Like other method pairs discussed earlier in this chapter, these have some subtle but important differences.\ndefineProperty() Methods The Object.defineProperty() and Reflect.defineProperty() methods are exactly the same except for their return values. The Object.defineProperty() method returns the first argument, while Reflect.defineProperty() returns true if the operation succeeded and false if not. For example:\nlet target = {}; let result1 = Object.defineProperty(target, \u0026#34;name\u0026#34;, { value: \u0026#34;target \u0026#34; }); console.log(target === result1); // true let result2 = Reflect.defineProperty(target, \u0026#34;name\u0026#34;, { value: \u0026#34;reflect\u0026#34; }); console.log(result2); // true When Object.defineProperty() is called on target, the return value is target. When Reflect.defineProperty() is called on target, the return value is true, indicating that the operation succeeded. Since the defineProperty proxy trap requires a boolean value to be returned, it\u0026rsquo;s better to use Reflect.defineProperty() to implement the default behavior when necessary.\ngetOwnPropertyDescriptor() Methods The Object.getOwnPropertyDescriptor() method coerces its first argument into an object when a primitive value is passed and then continues the operation. On the other hand, the Reflect.getOwnPropertyDescriptor() method throws an error if the first argument is a primitive value. Here\u0026rsquo;s an example showing both:\nlet descriptor1 = Object.getOwnPropertyDescriptor(2, \u0026#34;name\u0026#34;); console.log(descriptor1); // undefined // throws an error let descriptor2 = Reflect.getOwnPropertyDescriptor(2, \u0026#34;name\u0026#34;);\rThe Object.getOwnPropertyDescriptor() method returns undefined because it coerces 2 into an object, and that object has no name property. This is the standard behavior of the method when a property with the given name isn\u0026rsquo;t found on an object. When Reflect.getOwnPropertyDescriptor() is called, however, an error is thrown immediately because that method doesn\u0026rsquo;t accept primitive values for the first argument.\nThe ownKeys Trap The ownKeys proxy trap intercepts the internal method [[OwnPropertyKeys]] and allows you to override that behavior by returning an array of values. This array is used in four methods: the Object.keys() method, the Object.getOwnPropertyNames() method, the Object.getOwnPropertySymbols() method, and the Object.assign() method. (The Object.assign() method uses the array to determine which properties to copy.)\nThe default behavior for the ownKeys trap is implemented by the Reflect.ownKeys() method and returns an array of all own property keys, including both strings and symbols. The Object.getOwnProperyNames() method and the Object.keys() method filter symbols out of the array and returns the result while Object.getOwnPropertySymbols() filters the strings out of the array and returns the result. The Object.assign() method uses the array with both strings and symbols.\nThe ownKeys trap receives a single argument, the target, and must always return an array or array-like object; otherwise, an error is thrown. You can use the ownKeys trap to, for example, filter out certain property keys that you don\u0026rsquo;t want used when the Object.keys(), the Object.getOwnPropertyNames() method, the Object.getOwnPropertySymbols() method, or the Object.assign() method is used. Suppose you don\u0026rsquo;t want to include any property names that begin with an underscore character, a common notation in JavaScript indicating that a field is private. You can use the ownKeys trap to filter out those keys as follows:\nlet proxy = new Proxy( {}, { ownKeys(trapTarget) { return Reflect.ownKeys(trapTarget).filter((key) =\u0026gt; { return typeof key !== \u0026#34;string\u0026#34; || key[0] !== \u0026#34;_\u0026#34;; }); } } ); let nameSymbol = Symbol(\u0026#34;name\u0026#34;); proxy.name = \u0026#34;proxy\u0026#34;; proxy._name = \u0026#34;private\u0026#34;; proxy[nameSymbol] = \u0026#34;symbol\u0026#34;; let names = Object.getOwnPropertyNames(proxy), keys = Object.keys(proxy); symbols = Object.getOwnPropertySymbols(proxy); console.log(names.length); // 1 console.log(names[0]); // \u0026#34;name\u0026#34; console.log(keys.length); // 1 console.log(keys[0]); // \u0026#34;name\u0026#34; console.log(symbols.length); // 1 console.log(symbols[0]); // \u0026#34;Symbol(name)\u0026#34; This example uses an ownKeys trap that first calls Reflect.ownKeys() to get the default list of keys for the target. Then, the filter() method is used to filter out keys that are strings and begin with an underscore character. Then, three properties are added to the proxy object: name, _name, and nameSymbol. When Object.getOwnPropertyNames() and Object.keys() is called on proxy, only the name property is returned. Similarly, only nameSymbol is returned when Object.getOwnPropertySymbols() is called on proxy. The _name property doesn\u0026rsquo;t appear in either result because it is filtered out.\nI\u0026gt; The ownKeys trap also affects the for-in loop, which calls the trap to determine which keys to use inside of the loop.\nFunction Proxies with the apply and construct Traps Of all the proxy traps, only apply and construct require the proxy target to be a function. Recall from Chapter 3 that functions have two internal methods called [[Call]] and [[Construct]] that are executed when a function is called without and with the new operator, respectively. The apply and construct traps correspond to and let you override those internal methods. When a function is called without new, the apply trap receives, and Reflect.apply() expects, the following arguments:\ntrapTarget - the function being executed (the proxy\u0026rsquo;s target) thisArg - the value of this inside of the function during the call argumentsList - an array of arguments passed to the function The construct trap, which is called when the function is executed using new, receives the following arguments:\ntrapTarget - the function being executed (the proxy\u0026rsquo;s target) argumentsList - an array of arguments passed to the function The Reflect.construct() method also accepts these two arguments and has an optional third argument called newTarget. When given, the newTarget argument specifies the value of new.target inside of the function.\nTogether, the apply and construct traps completely control the behavior of any proxy target function. To mimic the default behavior of a function, you can do this:\nlet target = function () { return 42; }, proxy = new Proxy(target, { apply: function (trapTarget, thisArg, argumentList) { return Reflect.apply(trapTarget, thisArg, argumentList); }, construct: function (trapTarget, argumentList) { return Reflect.construct(trapTarget, argumentList); } }); // a proxy with a function as its target looks like a function console.log(typeof proxy); // \u0026#34;function\u0026#34; console.log(proxy()); // 42 var instance = new proxy(); console.log(instance instanceof proxy); // true console.log(instance instanceof target); // true This example has a function that returns the number 42. The proxy for that function uses the apply and construct traps to delegate those behaviors to the Reflect.apply() and Reflect.construct() methods, respectively. The end result is that the proxy function works exactly like the target function, including identifying itself as a function when typeof is used. The proxy is called without new to return 42 and then is called with new to create an object called instance. The instance object is considered an instance of both proxy and target because instanceof uses the prototype chain to determine this information. Prototype chain lookup is not affected by this proxy, which is why proxy and target appear to have the same prototype to the JavaScript engine.\nValidating Function Parameters The apply and construct traps open up a lot of possibilities for altering the way a function is executed. For instance, suppose you want to validate that all arguments are of a specific type. You can check the arguments in the apply trap:\n// adds together all arguments function sum(...values) { return values.reduce((previous, current) =\u0026gt; previous + current, 0); } let sumProxy = new Proxy(sum, { apply: function (trapTarget, thisArg, argumentList) { argumentList.forEach((arg) =\u0026gt; { if (typeof arg !== \u0026#34;number\u0026#34;) { throw new TypeError(\u0026#34;All arguments must be numbers.\u0026#34;); } }); return Reflect.apply(trapTarget, thisArg, argumentList); }, construct: function (trapTarget, argumentList) { throw new TypeError(\u0026#34;This function can\u0026#39;t be called with new.\u0026#34;); } }); console.log(sumProxy(1, 2, 3, 4)); // 10 // throws error console.log(sumProxy(1, \u0026#34;2\u0026#34;, 3, 4)); // also throws error let result = new sumProxy();\rThis example uses the apply trap to ensure that all arguments are numbers. The sum() function adds up all of the arguments that are passed. If a non-number value is passed, the function will still attempt the operation, which can cause unexpected results. By wrapping sum() inside the sumProxy() proxy, this code intercepts function calls and ensures that each argument is a number before allowing the call to proceed. To be safe, the code also uses the construct trap to ensure that the function can\u0026rsquo;t be called with new.\nYou can also do the opposite, ensuring that a function must be called with new and validating its arguments to be numbers:\nfunction Numbers(...values) { this.values = values; } let NumbersProxy = new Proxy(Numbers, { apply: function (trapTarget, thisArg, argumentList) { throw new TypeError(\u0026#34;This function must be called with new.\u0026#34;); }, construct: function (trapTarget, argumentList) { argumentList.forEach((arg) =\u0026gt; { if (typeof arg !== \u0026#34;number\u0026#34;) { throw new TypeError(\u0026#34;All arguments must be numbers.\u0026#34;); } }); return Reflect.construct(trapTarget, argumentList); } }); let instance = new NumbersProxy(1, 2, 3, 4); console.log(instance.values); // [1,2,3,4] // throws error NumbersProxy(1, 2, 3, 4);\rHere, the apply trap throws an error while the construct trap uses the Reflect.construct() method to validate input and return a new instance. Of course, you can accomplish the same thing without proxies using new.target instead.\nCalling Constructors Without new Chapter 3 introduced the new.target metaproperty. To review, new.target is a reference to the function on which new is called, meaning that you can tell if a function was called using new or not by checking the value of new.target like this:\nfunction Numbers(...values) { if (typeof new.target === \u0026#34;undefined\u0026#34;) { throw new TypeError(\u0026#34;This function must be called with new.\u0026#34;); } this.values = values; } let instance = new Numbers(1, 2, 3, 4); console.log(instance.values); // [1,2,3,4] // throws error Numbers(1, 2, 3, 4);\rThis example throws an error when Numbers is called without using new, which is similar to the example in the \u0026ldquo;Validating Function Parameters\u0026rdquo; section but doesn\u0026rsquo;t use a proxy. Writing code like this is much simpler than using a proxy and is preferable if your only goal is to prevent calling the function without new. But sometimes you aren\u0026rsquo;t in control of the function whose behavior needs to be modified. In that case, using a proxy makes sense.\nSuppose the Numbers function is defined in code you can\u0026rsquo;t modify. You know that the code relies on new.target and want to avoid that check while still calling the function. The behavior when using new is already set, so you can just use the apply trap:\nfunction Numbers(...values) { if (typeof new.target === \u0026#34;undefined\u0026#34;) { throw new TypeError(\u0026#34;This function must be called with new.\u0026#34;); } this.values = values; } let NumbersProxy = new Proxy(Numbers, { apply: function (trapTarget, thisArg, argumentsList) { return Reflect.construct(trapTarget, argumentsList); } }); let instance = NumbersProxy(1, 2, 3, 4); console.log(instance.values); // [1,2,3,4] The NumbersProxy function allows you to call Numbers without using new and have it behave as if new were used. To do so, the apply trap calls Reflect.construct() with the arguments passed into apply. The new.target inside of Numbers is equal to Numbers itself, and no error is thrown. While this is a simple example of modifying new.target, you can also do so more directly.\nOverriding Abstract Base Class Constructors You can go one step further and specify the third argument to Reflect.construct() as the specific value to assign to new.target. This is useful when a function is checking new.target against a known value, such as when creating an abstract base class constructor (discussed in Chapter 9). In an abstract base class constructor, new.target is expected to be something other than the class constructor itself, as in this example:\nclass AbstractNumbers { constructor(...values) { if (new.target === AbstractNumbers) { throw new TypeError(\u0026#34;This function must be inherited from.\u0026#34;); } this.values = values; } } class Numbers extends AbstractNumbers {} let instance = new Numbers(1, 2, 3, 4); console.log(instance.values); // [1,2,3,4] // throws error new AbstractNumbers(1, 2, 3, 4);\rWhen new AbstractNumbers() is called, new.target is equal to AbstractNumbers and an error is thrown. Calling new Numbers() still works because new.target is equal to Numbers. You can bypass this restriction by manually assigning new.target with a proxy:\nclass AbstractNumbers { constructor(...values) { if (new.target === AbstractNumbers) { throw new TypeError(\u0026#34;This function must be inherited from.\u0026#34;); } this.values = values; } } let AbstractNumbersProxy = new Proxy(AbstractNumbers, { construct: function (trapTarget, argumentList) { return Reflect.construct(trapTarget, argumentList, function () {}); } }); let instance = new AbstractNumbersProxy(1, 2, 3, 4); console.log(instance.values); // [1,2,3,4] The AbstractNumbersProxy uses the construct trap to intercept the call to the new AbstractNumbersProxy() method. Then, the Reflect.construct() method is called with arguments from the trap and adds an empty function as the third argument. That empty function is used as the value of new.target inside of the constructor. Because new.target is not equal to AbstractNumbers, no error is thrown and the constructor executes completely.\nCallable Class Constructors Chapter 9 explained that class constructors must always be called with new. That happens because the internal [[Call]] method for class constructors is specified to throw an error. But proxies can intercept calls to the [[Call]] method, meaning you can effectively create callable class constructors by using a proxy. For instance, if you want a class constructor to work without using new, you can use the apply trap to create a new instance. Here\u0026rsquo;s some sample code:\nclass Person { constructor(name) { this.name = name; } } let PersonProxy = new Proxy(Person, { apply: function (trapTarget, thisArg, argumentList) { return new trapTarget(...argumentList); } }); let me = PersonProxy(\u0026#34;Nicholas\u0026#34;); console.log(me.name); // \u0026#34;Nicholas\u0026#34; console.log(me instanceof Person); // true console.log(me instanceof PersonProxy); // true The PersonProxy object is a proxy of the Person class constructor. Class constructors are just functions, so they behave like functions when used in proxies. The apply trap overrides the default behavior and instead returns a new instance of trapTarget that\u0026rsquo;s equal to Person. (I used trapTarget in this example to show that you don\u0026rsquo;t need to manually specify the class.) The argumentList is passed to trapTarget using the spread operator to pass each argument separately. Calling PersonProxy() without using new returns an instance of Person; if you attempt to call Person() without new, the constructor will still throw an error. Creating callable class constructors is something that is only possible using proxies.\nRevocable Proxies Normally, a proxy can\u0026rsquo;t be unbound from its target once the proxy has been created. All of the examples to this point in this chapter have used nonrevocable proxies. But there may be situations when you want to revoke a proxy so that it can no longer be used. You\u0026rsquo;ll find it most helpful to revoke proxies when you want to provide an object through an API for security purposes and maintain the ability to cut off access to some functionality at any point in time.\nYou can create revocable proxies with the Proxy.revocable() method, which takes the same arguments as the Proxy constructor\u0026ndash;a target object and the proxy handler. The return value is an object with the following properties:\nproxy - the proxy object that can be revoked revoke - the function to call to revoke the proxy When the revoke() function is called, no further operations can be performed through the proxy. Any attempt to interact with the proxy object in a way that would trigger a proxy trap throws an error. For example:\nlet target = { name: \u0026#34;target\u0026#34; }; let { proxy, revoke } = Proxy.revocable(target, {}); console.log(proxy.name); // \u0026#34;target\u0026#34; revoke(); // throws error console.log(proxy.name);\rThis example creates a revocable proxy. It uses destructuring to assign the proxy and revoke variables to the properties of the same name on the object returned by the Proxy.revocable() method. After that, the proxy object can be used just like a nonrevocable proxy object, so proxy.name returns \u0026quot;target\u0026quot; because it passes through to target.name. Once the revoke() function is called, however, proxy no longer functions. Attempting to access proxy.name throws an error, as will any other operation that would trigger a trap on proxy.\nSolving the Array Problem At the beginning of this chapter, I explained how developers couldn\u0026rsquo;t mimic the behavior of an array accurately in JavaScript prior to ECMAScript 6. Proxies and the reflection API allow you to create an object that behaves in the same manner as the built-in Array type when properties are added and removed. To refresh your memory, here\u0026rsquo;s an example showing the behavior that proxies help to mimick:\nlet colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; console.log(colors.length); // 3 colors[3] = \u0026#34;black\u0026#34;; console.log(colors.length); // 4 console.log(colors[3]); // \u0026#34;black\u0026#34; colors.length = 2; console.log(colors.length); // 2 console.log(colors[3]); // undefined console.log(colors[2]); // undefined console.log(colors[1]); // \u0026#34;green\u0026#34; There are two particularly important behaviors to notice in this example:\nThe length property is increased to 4 when colors[3] is assigned a value. The last two items in the array are deleted when the length property is set to 2. These two behaviors are the only ones that need to be mimicked to accurately recreate how built-in arrays work. The next few sections describe how to make an object that correctly mimics them.\nDetecting Array Indices Keep in mind that assigning to an integer property key is a special case for arrays, as those are treated differently from non-integer keys. The ECMAScript 6 specification gives these instructions on how to determine if a property key is an array index:\nA String property name P is an array index if and only if ToString(ToUint32(P)) is equal to P and ToUint32(P) is not equal to 2^32^-1.\nThis operation can be implemented in JavaScript as follows:\nfunction toUint32(value) { return Math.floor(Math.abs(Number(value))) % Math.pow(2, 32); } function isArrayIndex(key) { let numericKey = toUint32(key); return String(numericKey) == key \u0026amp;\u0026amp; numericKey \u0026lt; Math.pow(2, 32) - 1; }\rThe toUint32() function converts a given value into an unsigned 32-bit integer using an algorithm described in the specification. The isArrayIndex() function first converts the key into a uint32 and then performs the comparisons to determine if the key is an array index or not. With these utility functions available, you can start to implement an object that will mimic a built-in array.\nIncreasing length when Adding New Elements You might have noticed that both array behaviors I described rely on the assignment of a property. That means you really only need to use the set proxy trap to accomplish both behaviors. To get started, here\u0026rsquo;s an example that implements the first of the two behaviors by incrementing the length property when an array index larger than length - 1 is used:\nfunction toUint32(value) { return Math.floor(Math.abs(Number(value))) % Math.pow(2, 32); } function isArrayIndex(key) { let numericKey = toUint32(key); return String(numericKey) == key \u0026amp;\u0026amp; numericKey \u0026lt; Math.pow(2, 32) - 1; } function createMyArray(length = 0) { return new Proxy( { length }, { set(trapTarget, key, value) { let currentLength = Reflect.get(trapTarget, \u0026#34;length\u0026#34;); // the special case if (isArrayIndex(key)) { let numericKey = Number(key); if (numericKey \u0026gt;= currentLength) { Reflect.set(trapTarget, \u0026#34;length\u0026#34;, numericKey + 1); } } // always do this regardless of key type return Reflect.set(trapTarget, key, value); } } ); } let colors = createMyArray(3); console.log(colors.length); // 3 colors[0] = \u0026#34;red\u0026#34;; colors[1] = \u0026#34;green\u0026#34;; colors[2] = \u0026#34;blue\u0026#34;; console.log(colors.length); // 3 colors[3] = \u0026#34;black\u0026#34;; console.log(colors.length); // 4 console.log(colors[3]); // \u0026#34;black\u0026#34; This example uses the set proxy trap to intercept the setting of an array index. If the key is an array index, then it is converted into a number because keys are always passed as strings. Next, if that numeric value is greater than or equal to the current length property, then the length property is updated to be one more than the numeric key (setting an item in position 3 means the length must be 4). After that, the default behavior for setting a property is used via Reflect.set(), since you do want the property to receive the value as specified.\nThe initial custom array is created by calling createMyArray() with a length of 3 and the values for those three items are added immediately afterward. The length property correctly remains 3 until the value \u0026quot;black\u0026quot; is assigned to position 3. At that point, length is set to 4.\nWith the first behavior working, it\u0026rsquo;s time to move on to the second.\nDeleting Elements on Reducing length The first array behavior to mimic is used only when an array index is greater than or equal to the length property. The second behavior does the opposite and removes array items when the length property is set to a smaller value than it previously contained. That involves not only changing the length property, but also deleting all items that might otherwise exist. For instance, if an array with a length of 4 has length set to 2, the items in positions 2 and 3 are deleted. You can accomplish this inside the set proxy trap alongside the first behavior. Here\u0026rsquo;s the previous example again, with an updated createMyArray method:\nfunction toUint32(value) { return Math.floor(Math.abs(Number(value))) % Math.pow(2, 32); } function isArrayIndex(key) { let numericKey = toUint32(key); return String(numericKey) == key \u0026amp;\u0026amp; numericKey \u0026lt; Math.pow(2, 32) - 1; } function createMyArray(length = 0) { return new Proxy( { length }, { set(trapTarget, key, value) { let currentLength = Reflect.get(trapTarget, \u0026#34;length\u0026#34;); // the special case if (isArrayIndex(key)) { let numericKey = Number(key); if (numericKey \u0026gt;= currentLength) { Reflect.set(trapTarget, \u0026#34;length\u0026#34;, numericKey + 1); } } else if (key === \u0026#34;length\u0026#34;) { if (value \u0026lt; currentLength) { for (let index = currentLength - 1; index \u0026gt;= value; index--) { Reflect.deleteProperty(trapTarget, index); } } } // always do this regardless of key type return Reflect.set(trapTarget, key, value); } } ); } let colors = createMyArray(3); console.log(colors.length); // 3 colors[0] = \u0026#34;red\u0026#34;; colors[1] = \u0026#34;green\u0026#34;; colors[2] = \u0026#34;blue\u0026#34;; colors[3] = \u0026#34;black\u0026#34;; console.log(colors.length); // 4 colors.length = 2; console.log(colors.length); // 2 console.log(colors[3]); // undefined console.log(colors[2]); // undefined console.log(colors[1]); // \u0026#34;green\u0026#34; console.log(colors[0]); // \u0026#34;red\u0026#34; The set proxy trap in this code checks to see if key is \u0026quot;length\u0026quot; in order to adjust the rest of the object correctly. When that happens, the current length is first retrieved using Reflect.get() and compared against the new value. If the new value is less than the current length, then a for loop deletes all properties on the target that should no longer be available. The for loop goes backward from the current array length (currentLength) and deletes each property until it reaches the new array length (value).\nThis example adds four colors to colors and then sets the length property to 2. That effectively removes the items in positions 2 and 3, so they now return undefined when you attempt to access them. The length property is correctly set to 2 and the items in positions 0 and 1 are still accessible.\nWith both behaviors implemented, you can easily create an object that mimics the behavior of built-in arrays. But doing so with a function isn\u0026rsquo;t as desirable as creating a class to encapsulate this behavior, so the next step is to implement this functionality as a class.\nImplementing the MyArray Class The simplest way to create a class that uses a proxy is to define the class as usual and then return a proxy from the constructor. That way, the object returned when a class is instantiated will be the proxy instead of the instance. (The instance is the value of this inside the constructor.) The instance becomes the target of the proxy and the proxy is returned as if it were the instance. The instance will be completely private and you won\u0026rsquo;t be able to access it directly, though you\u0026rsquo;ll be able to access it indirectly through the proxy.\nHere\u0026rsquo;s a simple example of returning a proxy from a class constructor:\nclass Thing { constructor() { return new Proxy(this, {}); } } let myThing = new Thing(); console.log(myThing instanceof Thing); // true In this example, the class Thing returns a proxy from its constructor. The proxy target is this and the proxy is returned from the constructor. That means myThing is actually a proxy even though it was created by calling the Thing constructor. Because proxies pass through their behavior to their targets, myThing is still considered an instance of Thing, making the proxy completely transparent to anyone using the Thing class.\nWith that in mind, creating a custom array class using a proxy in relatively straightforward. The code is mostly the same as the code in the \u0026ldquo;Deleting Elements on Reducing Length\u0026rdquo; section. The same proxy code is used, but this time, it\u0026rsquo;s inside a class constructor. Here\u0026rsquo;s the complete example:\nfunction toUint32(value) { return Math.floor(Math.abs(Number(value))) % Math.pow(2, 32); } function isArrayIndex(key) { let numericKey = toUint32(key); return String(numericKey) == key \u0026amp;\u0026amp; numericKey \u0026lt; Math.pow(2, 32) - 1; } class MyArray { constructor(length = 0) { this.length = length; return new Proxy(this, { set(trapTarget, key, value) { let currentLength = Reflect.get(trapTarget, \u0026#34;length\u0026#34;); // the special case if (isArrayIndex(key)) { let numericKey = Number(key); if (numericKey \u0026gt;= currentLength) { Reflect.set(trapTarget, \u0026#34;length\u0026#34;, numericKey + 1); } } else if (key === \u0026#34;length\u0026#34;) { if (value \u0026lt; currentLength) { for (let index = currentLength - 1; index \u0026gt;= value; index--) { Reflect.deleteProperty(trapTarget, index); } } } // always do this regardless of key type return Reflect.set(trapTarget, key, value); } }); } } let colors = new MyArray(3); console.log(colors instanceof MyArray); // true console.log(colors.length); // 3 colors[0] = \u0026#34;red\u0026#34;; colors[1] = \u0026#34;green\u0026#34;; colors[2] = \u0026#34;blue\u0026#34;; colors[3] = \u0026#34;black\u0026#34;; console.log(colors.length); // 4 colors.length = 2; console.log(colors.length); // 2 console.log(colors[3]); // undefined console.log(colors[2]); // undefined console.log(colors[1]); // \u0026#34;green\u0026#34; console.log(colors[0]); // \u0026#34;red\u0026#34; This code creates a MyArray class that returns a proxy from its constructor. The length property is added in the constructor (initialized to either the value that is passed in or to a default value of 0) and then a proxy is created and returned. This gives the colors variable the appearance of being just an instance of MyArray and implements both of the key array behaviors.\nAlthough returning a proxy from a class constructor is easy, it does mean that a new proxy is created for every instance. There is, however, a way to have all instances share one proxy: you can use the proxy as a prototype.\nUsing a Proxy as a Prototype Proxies can be used as prototypes, but doing so is a bit more involved than the previous examples in this chapter. When a proxy is a prototype, the proxy traps are only called when the default operation would normally continue on to the prototype, which does limit a proxy\u0026rsquo;s capabilities as a prototype. Consider this example:\nlet target = {}; let newTarget = Object.create( new Proxy(target, { // never called defineProperty(trapTarget, name, descriptor) { // would cause an error if called return false; } }) ); Object.defineProperty(newTarget, \u0026#34;name\u0026#34;, { value: \u0026#34;newTarget\u0026#34; }); console.log(newTarget.name); // \u0026#34;newTarget\u0026#34; console.log(newTarget.hasOwnProperty(\u0026#34;name\u0026#34;)); // true The newTarget object is created with a proxy as the prototype. Making target the proxy target effectively makes target the prototype of newTarget because the proxy is transparent. Now, proxy traps will only be called if an operation on newTarget would pass the operation through to happen on target.\nThe Object.defineProperty() method is called on newTarget to create an own property called name. Defining a property on an object isn\u0026rsquo;t an operation that normally continues to the object\u0026rsquo;s prototype, so the defineProperty trap on the proxy is never called and the name property is added to newTarget as an own property.\nWhile proxies are severely limited when used as prototypes, there are a few traps that are still useful.\nUsing the get Trap on a Prototype When the internal [[Get]] method is called to read a property, the operation looks for own properties first. If an own property with the given name isn\u0026rsquo;t found, then the operation continues to the prototype and looks for a property there. The process continues until there are no further prototypes to check.\nThanks to that process, if you set up a get proxy trap, the trap will be called on a prototype whenever an own property of the given name doesn\u0026rsquo;t exist. You can use the get trap to prevent unexpected behavior when accessing properties that you can\u0026rsquo;t guarantee will exist. Just create an object that throws an error whenever you try to access a property that doesn\u0026rsquo;t exist:\nlet target = {}; let thing = Object.create( new Proxy(target, { get(trapTarget, key, receiver) { throw new ReferenceError(`${key} doesn\u0026#39;t exist`); } }) ); thing.name = \u0026#34;thing\u0026#34;; console.log(thing.name); // \u0026#34;thing\u0026#34; // throw an error let unknown = thing.unknown;\rIn this code, the thing object is created with a proxy as its prototype. The get trap throws an error when called to indicate that the given key doesn\u0026rsquo;t exist on the thing object. When thing.name is read, the operation never calls the get trap on the prototype because the property exists on thing. The get trap is called only when the thing.unknown property, which doesn\u0026rsquo;t exist, is accessed.\nWhen the last line executes, unknown isn\u0026rsquo;t an own property of thing, so the operation continues to the prototype. The get trap then throws an error. This type of behavior can be very useful in JavaScript, where unknown properties silently return undefined instead of throwing an error (as happens in other languages).\nIt\u0026rsquo;s important to understand that in this example, trapTarget and receiver are different objects. When a proxy is used as a prototype, the trapTarget is the prototype object itself while the receiver is the instance object. In this case, that means trapTarget is equal to target and receiver is equal to thing. That allows you access both to the original target of the proxy and the object on which the operation is meant to take place.\nUsing the set Trap on a Prototype The internal [[Set]] method also checks for own properties and then continues to the prototype if needed. When you assign a value to an object property, the value is assigned to the own property with the same name if it exists. If no own property with the given name exists, then the operation continues to the prototype. The tricky part is that even though the assignment operation continues to the prototype, assigning a value to that property will create a property on the instance (not the prototype) by default, regardless of whether a property of that name exists on the prototype.\nTo get a better idea of when the set trap will be called on a prototype and when it won\u0026rsquo;t, consider the following example showing the default behavior:\nlet target = {}; let thing = Object.create( new Proxy(target, { set(trapTarget, key, value, receiver) { return Reflect.set(trapTarget, key, value, receiver); } }) ); console.log(thing.hasOwnProperty(\u0026#34;name\u0026#34;)); // false // triggers the `set` proxy trap thing.name = \u0026#34;thing\u0026#34;; console.log(thing.name); // \u0026#34;thing\u0026#34; console.log(thing.hasOwnProperty(\u0026#34;name\u0026#34;)); // true // does not trigger the `set` proxy trap thing.name = \u0026#34;boo\u0026#34;; console.log(thing.name); // \u0026#34;boo\u0026#34; In this example, target starts with no own properties. The thing object has a proxy as its prototype that defines a set trap to catch the creation of any new properties. When thing.name is assigned \u0026quot;thing\u0026quot; as its value, the set proxy trap is called because thing doesn\u0026rsquo;t have an own property called name. Inside the set trap, trapTarget is equal to target and receiver is equal to thing. The operation should ultimately create a new property on thing, and fortunately Reflect.set() implements this default behavior for you if you pass in receiver as the fourth argument.\nOnce the name property is created on thing, setting thing.name to a different value will no longer call the set proxy trap. At that point, name is an own property so the [[Set]] operation never continues on to the prototype.\nUsing the has Trap on a Prototype Recall that the has trap intercepts the use of the in operator on objects. The in operator searches first for an object\u0026rsquo;s own property with the given name. If an own property with that name doesn\u0026rsquo;t exist, the operation continues to the prototype. If there\u0026rsquo;s no own property on the prototype, then the search continues through the prototype chain until the own property is found or there are no more prototypes to search.\nThe has trap is therefore only called when the search reaches the proxy object in the prototype chain. When using a proxy as a prototype, that only happens when there\u0026rsquo;s no own property of the given name. For example:\nlet target = {}; let thing = Object.create( new Proxy(target, { has(trapTarget, key) { return Reflect.has(trapTarget, key); } }) ); // triggers the `has` proxy trap console.log(\u0026#34;name\u0026#34; in thing); // false thing.name = \u0026#34;thing\u0026#34;; // does not trigger the `has` proxy trap console.log(\u0026#34;name\u0026#34; in thing); // true This code creates a has proxy trap on the prototype of thing. The has trap isn\u0026rsquo;t passed a receiver object like the get and set traps are because searching the prototype happens automatically when the in operator is used. Instead, the has trap must operate only on trapTarget, which is equal to target. The first time the in operator is used in this example, the has trap is called because the property name doesn\u0026rsquo;t exist as an own property of thing. When thing.name is given a value and then the in operator is used again, the has trap isn\u0026rsquo;t called because the operation stops after finding the own property name on thing.\nThe prototype examples to this point have centered around objects created using the Object.create() method. But if you want to create a class that has a proxy as a prototype, the process is a bit more involved.\nProxies as Prototypes on Classes Classes cannot be directly modified to use a proxy as a prototype because their prototype property is non-writable. You can, however, use a bit of misdirection to create a class that has a proxy as its prototype by using inheritance. To start, you need to create an ECMAScript 5-style type definition using a constructor function. You can then overwrite the prototype to be a proxy. Here\u0026rsquo;s an example:\nfunction NoSuchProperty() { // empty } NoSuchProperty.prototype = new Proxy( {}, { get(trapTarget, key, receiver) { throw new ReferenceError(`${key} doesn\u0026#39;t exist`); } } ); let thing = new NoSuchProperty(); // throws error due to `get` proxy trap let result = thing.name;\rThe NoSuchProperty function represents the base from which the class will inherit. There are no restrictions on the prototype property of functions, so you can overwrite it with a proxy. The get trap is used to throw an error when the property doesn\u0026rsquo;t exist. The thing object is created as an instance of NoSuchProperty and throws an error when the nonexistent name property is accessed.\nThe next step is to create a class that inherits from NoSuchProperty. You can simply use the extends syntax discussed in Chapter 9 to introduce the proxy into the class\u0026rsquo; prototype chain, like this:\nfunction NoSuchProperty() { // empty } NoSuchProperty.prototype = new Proxy( {}, { get(trapTarget, key, receiver) { throw new ReferenceError(`${key} doesn\u0026#39;t exist`); } } ); class Square extends NoSuchProperty { constructor(length, width) { super(); this.length = length; this.width = width; } } let shape = new Square(2, 6); let area1 = shape.length * shape.width; console.log(area1); // 12 // throws an error because \u0026#34;wdth\u0026#34; doesn\u0026#39;t exist let area2 = shape.length * shape.wdth;\rThe Square class inherits from NoSuchProperty so the proxy is in the Square class\u0026rsquo; prototype chain. The shape object is then created as a new instance of Square and has two own properties: length and width. Reading the values of those properties succeeds because the get proxy trap is never called. Only when a property that doesn\u0026rsquo;t exist on shape is accessed (shape.wdth, an obvious typo) does the get proxy trap trigger and throw an error.\nThat proves the proxy is in the prototype chain of shape, but it might not be obvious that the proxy is not the direct prototype of shape. In fact, the proxy is a couple of steps up the prototype chain from shape. You can see this more clearly by slightly altering the preceding example:\nfunction NoSuchProperty() { // empty } // store a reference to the proxy that will be the prototype let proxy = new Proxy( {}, { get(trapTarget, key, receiver) { throw new ReferenceError(`${key} doesn\u0026#39;t exist`); } } ); NoSuchProperty.prototype = proxy; class Square extends NoSuchProperty { constructor(length, width) { super(); this.length = length; this.width = width; } } let shape = new Square(2, 6); let shapeProto = Object.getPrototypeOf(shape); console.log(shapeProto === proxy); // false let secondLevelProto = Object.getPrototypeOf(shapeProto); console.log(secondLevelProto === proxy); // true This version of the code stores the proxy in a variable called proxy so it\u0026rsquo;s easy to identify later. The prototype of shape is Square.prototype, which is not a proxy. But the prototype of Square.prototype is the proxy that was inherited from NoSuchProperty.\nThe inheritance adds another step in the prototype chain, and that matters because operations that might result in calling the get trap on proxy need to go through one extra step before getting there. If there\u0026rsquo;s a property on Square.prototype, then that will prevent the get proxy trap from being called, as in this example:\nfunction NoSuchProperty() { // empty } NoSuchProperty.prototype = new Proxy( {}, { get(trapTarget, key, receiver) { throw new ReferenceError(`${key} doesn\u0026#39;t exist`); } } ); class Square extends NoSuchProperty { constructor(length, width) { super(); this.length = length; this.width = width; } getArea() { return this.length * this.width; } } let shape = new Square(2, 6); let area1 = shape.length * shape.width; console.log(area1); // 12 let area2 = shape.getArea(); console.log(area2); // 12 // throws an error because \u0026#34;wdth\u0026#34; doesn\u0026#39;t exist let area3 = shape.length * shape.wdth;\rHere, the Square class has a getArea() method. The getArea() method is automatically added to Square.prototype so when shape.getArea() is called, the search for the method getArea() starts on the shape instance and then proceeds to its prototype. Because getArea() is found on the prototype, the search stops and the proxy is never called. That is actually the behavior you want in this situation, as you wouldn\u0026rsquo;t want to incorrectly throw an error when getArea() was called.\nEven though it takes a little bit of extra code to create a class with a proxy in its prototype chain, it can be worth the effort if you need such functionality.\nSummary Prior to ECMAScript 6, certain objects (such as arrays) displayed nonstandard behavior that developers couldn\u0026rsquo;t replicate. Proxies change that. They let you define your own nonstandard behavior for several low-level JavaScript operations, so you can replicate all behaviors of built-in JavaScript objects through proxy traps. These traps are called behind the scenes when various operations take place, like a use of the in operator.\nA reflection API was also introduced in ECMAScript 6 to allow developers to implement the default behavior for each proxy trap. Each proxy trap has a corresponding method of the same name on the Reflect object, another ECMAScript 6 addition. Using a combination of proxy traps and reflection API methods, it\u0026rsquo;s possible to filter some operations to behave differently only in certain conditions while defaulting to the built-in behavior.\nRevocable proxies are a special proxies that can be effectively disabled by using a revoke() function. The revoke() function terminates all functionality on the proxy, so any attempt to interact with the proxy\u0026rsquo;s properties throws an error after revoke() is called. Revocable proxies are important for application security where third-party developers may need access to certain objects for a specified amount of time.\nWhile using proxies directly is the most powerful use case, you can also use a proxy as the prototype for another object. In that case, you are severely limited in the number of proxy traps you can effectively use. Only the get, set, and has proxy traps will ever be called on a proxy when it\u0026rsquo;s used as a prototype, making the set of use cases much smaller.\n","date":"0001-01-01","id":42,"permalink":"/es6/12-proxies-and-reflection/","summary":"\u003cp\u003eECMAScript 5 and ECMAScript 6 were both developed with demystifying JavaScript functionality in mind. For example, JavaScript environments contained nonenumerable and nonwritable object properties before ECMAScript 5, but developers couldn\u0026rsquo;t define their own nonenumerable or nonwritable properties. ECMAScript 5 included the \u003ccode\u003eObject.defineProperty()\u003c/code\u003e method to allow developers to do what JavaScript engines could do already.\u003c/p\u003e","tags":[],"title":"12 Proxies and the Reflection API"},{"content":"Solution const countVowelsConsonants = (str) =\u0026gt; { const vowels = \u0026#34;aeiouAEIOU\u0026#34;; let vowelCount = 0, consonantCount = 0; for (let char of str) { if (/[a-zA-Z]/.test(char)) { vowels.includes(char) ? vowelCount++ : consonantCount++; } } return `Vowels: ${vowelCount}, Consonants: ${consonantCount}`; }; console.log(countVowelsConsonants(\u0026#34;hello world\u0026#34;)); // Output: Vowels: 3, Consonants: 7 ","date":"0001-01-01","id":43,"permalink":"/prep-1/prep-1/11-to-20/12.-counting-vowels-and-consonants-in-a-string/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountVowelsConsonants\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003evowels\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;aeiouAEIOU\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003evowelCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsonantCount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"kr\"\u003echar\u003c/span\u003e \u003cspan class=\"k\"\u003eof\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sr\"\u003e/[a-zA-Z]/\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etest\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e))\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003evowels\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eincludes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kr\"\u003echar\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nx\"\u003evowelCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003econsonantCount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"sb\"\u003e`Vowels: \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003evowelCount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e, Consonants: \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003econsonantCount\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountVowelsConsonants\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;hello world\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Vowels: 3, Consonants: 7\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"12. Counting Vowels and Consonants in a String"},{"content":"Want to buy a book in paper form? Want some badass flashcards? This Book will be soon completed and then it will be available to buy in paper form. If you want me to send you an early copy of this book, please add your name and email address in this Google Form.\nIf you don\u0026rsquo;t want to wait, you can buy Yuri\u0026rsquo;s JavaScript Flashcards, a set of frontend interview questions sorted by popularity among interviewers printed on beautiful poker-size flashcards.\nQuestion 1. What\u0026rsquo;s the difference between undefined and not defined in JavaScript Answer\rIn JavaScript if you try to use a variable that doesn\u0026rsquo;t exist and has not been declared, then JavaScript will throw an error var name is not defined and the script will stop executing thereafter. But If you use typeof undeclared_variable then it will return undefined.\nBefore starting further discussion let\u0026rsquo;s understand the difference between declaration and definition.\nvar x is a declaration because we are not defining what value it holds yet, but we are declaring its existence and the need for memory allocation.\nvar x; // declaring x console.log(x); // output: undefined var x = 1 is both declaration and definition, here declaration and assignment of value happen inline for variable x—what we are doing is called \u0026ldquo;initialisation\u0026rdquo;. In JavaScript both variable declarations and function declarations go to the top of the scope in which they are declared, then assignment happens—this series of events is called \u0026ldquo;hoisting\u0026rdquo;.\nA variable can be declared but not defined. When we try to access it, It will result undefined.\nvar x; // Declaration typeof x === \u0026#34;undefined\u0026#34;; // Will return true A variable can be neither declared nor defined. When we try to reference such variable then the result will be not defined.\nconsole.log(y); // Output: ReferenceError: y is not defined Ref Link: http://stackoverflow.com/questions/20822022/javascript-variable-definition-declaration\nQuestion 2. For which value of x the results of the following statements are not the same? if( x \u0026lt;= 100 ) {...} if( !(x \u0026gt; 100) ) {...}\rAnswer\rNaN \u0026lt;= 100 is false and NaN \u0026gt; 100 is also false, so if the value of x is NaN, the statements are not the same.\nThe same holds true for any value of x that being converted to type Number, returns NaN, e.g.: undefined, [1,2,5], {a:22} , etc.\nThis is why you need to pay attention when you deal with numeric variables. NaN can’t be equal, less than or more than any other numeric value, so the only reliable way to check if the value is NaN, is to use the isNaN() function.\nQuestion 3. What is the drawback of declaring methods directly in JavaScript objects? Answer\rOne of the drawbacks of declaring methods directly in JavaScript objects is that they are very memory inefficient. When you do that, a new copy of the method is created for each instance of an object. Here\u0026rsquo;s an example:\nvar Employee = function (name, company, salary) { this.name = name || \u0026#34;\u0026#34;; this.company = company || \u0026#34;\u0026#34;; this.salary = salary || 5000; // We can create a method like this: this.formatSalary = function () { return \u0026#34;$ \u0026#34; + this.salary; }; }; // Alternatively we can add the method to Employee\u0026#39;s prototype: Employee.prototype.formatSalary2 = function () { return \u0026#34;$ \u0026#34; + this.salary; }; //creating objects var emp1 = new Employee(\u0026#34;Yuri Garagin\u0026#34;, \u0026#34;Company 1\u0026#34;, 1000000); var emp2 = new Employee(\u0026#34;Dinesh Gupta\u0026#34;, \u0026#34;Company 2\u0026#34;, 1039999); var emp3 = new Employee(\u0026#34;Erich Fromm\u0026#34;, \u0026#34;Company 3\u0026#34;, 1299483);\rIn this case each instance variable emp1, emp2, emp3 has its own copy of theformatSalary method. However the formatSalary2 will only be added once to Employee.prototype.\nQuestion 4. What is “closure” in javascript? Can you provide an example? Answer\rA closure is a function defined inside another function (called parent function) and as such it has access to the variables declared and defined within its parent function\u0026rsquo;s scope.\nThe closure has access to the variables in three scopes:\nVariable declared in its own scope Variable declared in its parent function\u0026rsquo;s scope Variable declared in the global namespace var globalVar = \u0026#34;abc\u0026#34;; //Global variable // Parent self-invoking function (function outerFunction(outerArg) { // start of outerFunction\u0026#39;s scope var outerFuncVar = \u0026#34;x\u0026#34;; // Variable declared in outerFunction\u0026#39;s function scope // Closure self-invoking function (function innerFunction(innerArg) { // start of innerFunction\u0026#39;s scope var innerFuncVar = \u0026#34;y\u0026#34;; // variable declared in innerFunction\u0026#39;s function scope console.log(\u0026#34;outerArg = \u0026#34; + outerArg + \u0026#34;\\n\u0026#34; + \u0026#34;outerFuncVar = \u0026#34; + outerFuncVar + \u0026#34;\\n\u0026#34; + \u0026#34;innerArg = \u0026#34; + innerArg + \u0026#34;\\n\u0026#34; + \u0026#34;innerFuncVar = \u0026#34; + innerFuncVar + \u0026#34;\\n\u0026#34; + \u0026#34;globalVar = \u0026#34; + globalVar); // end of innerFunction\u0026#39;s scope })(5); // Pass 5 as parameter to our Closure // end of outerFunction\u0026#39;s scope })(7); // Pass 7 as parameter to the Parent function innerFunction is a closure which is defined inside outerFunction and consequently has access to all the variables which have been declared and defined within outerFunction\u0026rsquo;s scope as well as any variables residing in the program\u0026rsquo;s global scope.\nThe output of the code above would be:\nouterArg = 7; outerFuncVar = x; innerArg = 5; innerFuncVar = y; globalVar = abc;\rQuestion 5. Write a mul function which will work properly when invoked with following syntax. console.log(mul(2)(3)(4)); // output : 24 console.log(mul(4)(3)(4)); // output : 48 Answer\rfunction mul(x) { return function (y) { // anonymous function return function (z) { // anonymous function return x * y * z; }; }; }\rHere the mul function accepts the first argument and returns an anonymous function which then takes the second parameter and returns one last anonymous function which finally takes the third and final parameter; the last function then multiplies x, y and z, and returns the result of the operation.\nIn Javascript, a function defined inside another function has access to the outer function\u0026rsquo;s scope and can consequently return, interact with or pass on to other functions, the variables belonging to the scopes that incapsulate it.\nA function is an instance of the Object type A function can have properties and has a link to its constructor method A function can be stored as a variable A function can be passed as a parameter to another function A function can be returned by another function Question 6. How to empty an array in JavaScript? For instance:\nvar arrayList = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;];\rHow can we empty the array above?\nAnswer\rThere are a couple of ways by which we can empty an array, So let\u0026rsquo;s discuss all the possible way by which we can empty an array.\nMethod 1 arrayList = [];\rThe code above will set the variable arrayList to a new empty array. This is recommended if you don\u0026rsquo;t have references to the original array arrayList anywhere else because It will actually create a new empty array. You should be careful with this way of empty the array, because if you have referenced this array from another variable, then the original reference array will remain unchanged, Only use this way if you have only referenced the array by its original variable arrayList.\nFor instance:\nvar arrayList = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;]; // Created array var anotherArrayList = arrayList; // Referenced arrayList by another variable arrayList = []; // Empty the array console.log(anotherArrayList); // Output [\u0026#39;a\u0026#39;, \u0026#39;b\u0026#39;, \u0026#39;c\u0026#39;, \u0026#39;d\u0026#39;, \u0026#39;e\u0026#39;, \u0026#39;f\u0026#39;] Method 2 arrayList.length = 0;\rThe code above will clear the existing array by setting its length to 0. This way of emptying an array will also update all the reference variables that point to the original array.\nFor instance:\nvar arrayList = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;]; // Created array var anotherArrayList = arrayList; // Referenced arrayList by another variable arrayList.length = 0; // Empty the array by setting length to 0 console.log(anotherArrayList); // Output [] Method 3 arrayList.splice(0, arrayList.length);\rAbove implementation will also work perfectly. This way of empty the array will also update all the references of the original array.\nvar arrayList = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;f\u0026#34;]; // Created array var anotherArrayList = arrayList; // Referenced arrayList by another variable arrayList.splice(0, arrayList.length); // Empty the array by setting length to 0 console.log(anotherArrayList); // Output [] Method 4 while (arrayList.length) { arrayList.pop(); }\rAbove implementation can also empty the array. But not recommended to use often.\nQuestion 7. How to check if an object is an array or not? Answer\rThe best way to find whether an object is instance of a particular class or not using toString method from Object.prototype\nvar arrayList = [1, 2, 3];\rOne of the best use cases of type checking of an object is when we do method overloading in JavaScript. To understand this, let\u0026rsquo;s say we have a method called greet which can take a single string and also a list of strings. To make our greet method workable in both situation we need to know what kind of parameter is being passed: is it single value or list of values?\nfunction greet(param) { if() { // here have to check whether param is array or not } else { } }\rHowever, in the above implementation it might not necessary to check the type of the array, we can check for single value string and put array logic code in else block, let see below code for the same.\nfunction greet(param) { if (typeof param === \u0026#34;string\u0026#34;) { } else { // If param is of type array then this block of code would execute } }\rNow it\u0026rsquo;s fine we can go with the previous two implementations, but when we have a situation like a parameter can be single value, array, and object type then we will be in trouble.\nComing back to checking the type of an object, As we mentioned that we can use Object.prototype.toString\nif (Object.prototype.toString.call(arrayList) === \u0026#34;[object Array]\u0026#34;) { console.log(\u0026#34;Array!\u0026#34;); }\rIf you are using jQuery then you can also used jQuery isArray method:\nif ($.isArray(arrayList)) { console.log(\u0026#34;Array\u0026#34;); } else { console.log(\u0026#34;Not an array\u0026#34;); }\rFYI jQuery uses Object.prototype.toString.call internally to check whether an object is an array or not.\nIn modern browser, you can also use:\nArray.isArray(arrayList);\rArray.isArray is supported by Chrome 5, Firefox 4.0, IE 9, Opera 10.5 and Safari 5\nQuestion 8. What will be the output of the following code? var output = (function (x) { delete x; return x; })(0); console.log(output);\rAnswer\rThe code above will output 0 as output. delete operator is used to delete a property from an object. Here x is not an object, it\u0026rsquo;s a local variable. delete operator doesn\u0026rsquo;t affect local variables.\nQuestion 9. What will be the output of the following code? var x = 1; var output = (function () { delete x; return x; })(); console.log(output);\rAnswer\rThe code above will output 1 as output. delete operator is used to delete a property from an object. Here x is not an object it\u0026rsquo;s global variable of type number.\nQuestion 10. What will be the output of the following code? var x = { foo: 1 }; var output = (function () { delete x.foo; return x.foo; })(); console.log(output);\rAnswer\rThe code above will output undefined as output. delete operator is used to delete a property from an object. Here x is an object which has foo as a property and from a self-invoking function, we are deleting the foo property of object x and after deletion, we are trying to reference deleted property foo which result undefined.\nQuestion 11. What will be the output of the following code? var Employee = { company: \u0026#34;xyz\u0026#34; }; var emp1 = Object.create(Employee); delete emp1.company; console.log(emp1.company);\rAnswer\rThe code above will output `xyz` as output. Here `emp1` object got company as **prototype** property. delete operator doesn't delete prototype property.\remp1 object doesn\u0026rsquo;t have company as its own property. you can test it console.log(emp1.hasOwnProperty('company')); //output : false However, we can delete company property directly from Employee object using delete Employee.company or we can also delete from emp1 object using __proto__ property delete emp1.__proto__.company.\nQuestion 12. What is undefined x 1 in JavaScript var trees = [\u0026#34;redwood\u0026#34;, \u0026#34;bay\u0026#34;, \u0026#34;cedar\u0026#34;, \u0026#34;oak\u0026#34;, \u0026#34;maple\u0026#34;]; delete trees[3];\rAnswer\r- When you run the code above and do `console.log(trees);` in chrome developer console then you will get `[\"redwood\", \"bay\", \"cedar\", undefined × 1, \"maple\"]`.\r- In the recent versions of Chrome you will see the word `empty` of `undefined x 1`.\r- When you run the same code in Firefox browser console then you will get `[\"redwood\", \"bay\", \"cedar\", undefined, \"maple\"]`\rClearly we can see that Chrome has its own way of displaying uninitialized index in arrays. However when you check trees[3] === undefined in any browser you will get similar output as true.\nNote: Please remember that you need not check for the uninitialized index of the array in trees[3] === 'undefined × 1' it will give an error because 'undefined × 1' this is just way of displaying an uninitialized index of an array in chrome.\nQuestion 13. What will be the output of the following code? var trees = [\u0026#34;xyz\u0026#34;, \u0026#34;xxxx\u0026#34;, \u0026#34;test\u0026#34;, \u0026#34;ryan\u0026#34;, \u0026#34;apple\u0026#34;]; delete trees[3]; console.log(trees.length);\rAnswer\rThe code above will output `5` as output. When we used `delete` operator for deleting an array element then, the array length is not affected by this. This holds even if you deleted all elements of an array using `delete` operator.\rSo when delete operator removes an array element that deleted element is no longer present in the array. In place of value at deleted index undefined x 1 in chrome and undefined is placed at the index. If you do console.log(trees) output [\u0026quot;xyz\u0026quot;, \u0026quot;xxxx\u0026quot;, \u0026quot;test\u0026quot;, undefined × 1, \u0026quot;apple\u0026quot;] in Chrome and in Firefox [\u0026quot;xyz\u0026quot;, \u0026quot;xxxx\u0026quot;, \u0026quot;test\u0026quot;, undefined, \u0026quot;apple\u0026quot;].\nQuestion 14. What will be the output of the following code? var bar = true; console.log(bar + 0); console.log(bar + \u0026#34;xyz\u0026#34;); console.log(bar + true); console.log(bar + false);\rAnswer\rThe code above will output 1, \u0026quot;truexyz\u0026quot;, 2, 1 as output. Here\u0026rsquo;s a general guideline for the plus operator:\nNumber + Number -\u0026gt; Addition Boolean + Number -\u0026gt; Addition Boolean + Boolean -\u0026gt; Addition Number + String -\u0026gt; Concatenation String + Boolean -\u0026gt; Concatenation String + String -\u0026gt; Concatenation Question 15. What will be the output of the following code? var z = 1, y = (z = typeof y); console.log(y);\rAnswer\rThe code above will print string \u0026quot;undefined\u0026quot; as output. According to associativity rule operator with the same precedence are processed based on their associativity property of operator. Here associativity of the assignment operator is Right to Left so first typeof y will evaluate first which is string \u0026quot;undefined\u0026quot; and assigned to z and then y would be assigned the value of z. The overall sequence will look like that:\nvar z; z = 1; var y; z = typeof y; y = z;\rQuestion 16. What will be the output of the following code? // NFE (Named Function Expression) var foo = function bar() { return 12; }; typeof bar();\rAnswer\rThe output will be Reference Error. To fix the bug we can try to rewrite the code a little bit:\nSample 1\nvar bar = function () { return 12; }; typeof bar();\ror\nSample 2\nfunction bar() { return 12; } typeof bar();\rThe function definition can have only one reference variable as a function name, In sample 1 bar is reference variable which is pointing to anonymous function and in sample 2 we have function statement and bar is the function name.\nvar foo = function bar() { // foo is visible here // bar is visible here console.log(typeof bar()); // Works here :) }; // foo is visible here // bar is undefined here Question 17a. What is the difference between declaring a function in the formats listed below? var foo = function () { // Some code };\rfunction bar() { // Some code }\rAnswer\rThe main difference is that function foo is defined at run-time and is called a function expression, whereas function bar is defined at parse time and is called a function statement. To understand it better, let\u0026rsquo;s take a look at the code below :\n// Run-Time function declaration foo(); // Call foo function here, It will give an error var foo = function () { console.log(\u0026#34;Hi I am inside Foo\u0026#34;); };\r// Parse-Time function declaration bar(); // Call bar function here, It will not give an Error function bar() { console.log(\u0026#34;Hi I am inside Foo\u0026#34;); }\rQuestion 17b. What is the output of the following? bar(); (function abc() { console.log(\u0026#34;something\u0026#34;); })(); function bar() { console.log(\u0026#34;bar got called\u0026#34;); }\rAnswer\rThe output will be :\nbar got called\rsomething\rSince the function is called first and defined during parse time the JS engine will try to find any possible parse time definitions and start the execution loop which will mean function is called first even if the definition is post another function.\nQuestion 18. In which case the function definition is not hoisted in JavaScript? Answer\rLet\u0026rsquo;s take the following function expression\nvar foo = function foo() { return 12; };\rIn JavaScript var-declared variables and functions are hoisted. Let\u0026rsquo;s take function hoisting first. Basically, the JavaScript interpreter looks ahead to find all the variable declaration and hoists them to the top of the function where it\u0026rsquo;s declared. For example:\nfoo(); // Here foo is still undefined var foo = function foo() { return 12; };\rThe code above behind the scene look something like this:\nvar foo = undefined; foo(); // Here foo is undefined foo = function foo() { // Some code stuff };\rvar foo = undefined; foo = function foo() { // Some code stuff }; foo(); // Now foo is defined here Question 19. What will be the output of the following code? var salary = \u0026#34;1000$\u0026#34;; (function () { console.log(\u0026#34;Original salary was \u0026#34; + salary); var salary = \u0026#34;5000$\u0026#34;; console.log(\u0026#34;My New Salary \u0026#34; + salary); })();\rAnswer\rThe code above will output: undefined, 5000$ because of hoisting. In the code presented above, you might be expecting salary to retain it values from outer scope until the point that salary was re-declared in the inner scope. But due to hoisting salary value was undefined instead. To understand it better have a look of the following code, here salary variable is hoisted and declared at the top in function scope. When we print its value using console.log the result is undefined. Afterwards the variable is redeclared and the new value \u0026quot;5000$\u0026quot; is assigned to it.\nvar salary = \u0026#34;1000$\u0026#34;; (function () { var salary = undefined; console.log(\u0026#34;Original salary was \u0026#34; + salary); salary = \u0026#34;5000$\u0026#34;; console.log(\u0026#34;My New Salary \u0026#34; + salary); })();\rQuestion 20. What’s the difference between typeof and instanceof? Answer\rtypeof is an operator that returns a string with the type of whatever you pass.\nThe typeof operator checks if a value belongs to one of the seven basic types: number, string, boolean, object, function, undefined or Symbol.\ntypeof(null) will return object.\ninstanceof is much more intelligent: it works on the level of prototypes. In particular, it tests to see if the right operand appears anywhere in the prototype chain of the left. instanceof doesn’t work with primitive types. The instanceof operator checks the current object and returns true if the object is of the specified type, for example:\nvar dog = new Animal(); dog instanceof Animal; // Output : true Here dog instanceof Animal is true since dog inherits from Animal.prototype\nvar name = new String(\u0026#34;xyz\u0026#34;); name instanceof String; // Output : true Ref Link: http://stackoverflow.com/questions/2449254/what-is-the-instanceof-operator-in-javascript\nQuestion 21. Calculate the length of the associative array var counterArray = { A: 3, B: 4 }; counterArray[\u0026#34;C\u0026#34;] = 1;\rAnswer\rFirst of all, in the case of JavaScript an associative array is the same as an object. Secondly, even though there is no built-in function or property available to calculate the length/size an object, we can write such function ourselves.\nMethod 1 Object has keys method which can be used to calculate the length of object.\nObject.keys(counterArray).length; // Output 3 Method 2 We can also calculate the length of object by iterating through the object and by doing a count of own property of object. This way we will ignoge the properties that came from the object\u0026rsquo;s prototype chain:\nfunction getLength(object) { var count = 0; for (key in object) { // hasOwnProperty method check own property of object if (object.hasOwnProperty(key)) count++; } return count; }\rMethod 3 All modern browsers (including IE9+) support the getOwnPropertyNames method, so we can calculate the length using the following code:\nObject.getOwnPropertyNames(counterArray).length; // Output 3 Method 4 Underscore and lodash libraries have the method size dedicated to calculate the object length. We don\u0026rsquo;t recommend to include one of these libraries just to use the size method, but if it\u0026rsquo;s already used in your project - why not?\n_.size({one: 1, two: 2, three: 3}); =\u0026gt; 3\rQuestion 22. Difference between Function, Method and Constructor calls in JavaScript. Answer\rIf your are familiar with Object-oriented programming, More likely familiar to thinking of functions, methods, and class constructors as three separate things. But In JavaScript, these are just three different usage patterns of one single construct.\nfunctions : The simplest usages of function call:\nfunction helloWorld(name) { return \u0026#34;hello world, \u0026#34; + name; } helloWorld(\u0026#34;JS Geeks\u0026#34;); // \u0026#34;hello world JS Geeks\u0026#34; Methods in JavaScript are nothing more than object properties that are functions.\nvar obj = { helloWorld: function () { return \u0026#34;hello world, \u0026#34; + this.name; }, name: \u0026#34;John Carter\u0026#34; }; obj.helloWorld(); // // \u0026#34;hello world John Carter\u0026#34; Notice how helloWorld refer to this properties of obj. Here it\u0026rsquo;s clear or you might have already understood that this gets bound to obj. But the interesting point that we can copy a reference to the same function helloWorld in another object and get a difference answer. Let see:\nvar obj2 = { helloWorld: obj.helloWorld, name: \u0026#34;John Doe\u0026#34; }; obj2.helloWorld(); // \u0026#34;hello world John Doe\u0026#34; You might be wonder what exactly happens in a method call here. Here we call the expression itself determine the binding of this this, The expression obj2.helloWorld() looks up the helloWorld property of obj and calls it with receiver object obj2.\nThe third use of functions is as constructors. Like function and method, constructors are defined with function.\nfunction Employee(name, age) { this.name = name; this.age = age; } var emp1 = new Employee(\u0026#34;John Doe\u0026#34;, 28); emp1.name; // \u0026#34;John Doe\u0026#34; emp1.age; // 28 Unlike function calls and method calls, a constructor call new Employee('John Doe', 28) creates a brand new object and passes it as the value of this, and implicitly returns the new object as its result.\nThe primary role of the constructor function is to initialize the object.\nQuestion 23. What would be the output of the following code? function User(name) { this.name = name || \u0026#34;JsGeeks\u0026#34;; } var person = (new User(\u0026#34;xyz\u0026#34;)[\u0026#34;location\u0026#34;] = \u0026#34;USA\u0026#34;); console.log(person);\rAnswer\rThe output of above code would be \u0026quot;USA\u0026quot;. Here new User(\u0026quot;xyz\u0026quot;) creates a brand new object and created property location on that and USA has been assigned to object property location and that has been referenced by the person.\nLet say new User(\u0026quot;xyz\u0026quot;) created a object called foo. The value \u0026quot;USA\u0026quot; will be assigned to foo[\u0026quot;location\u0026quot;], but according to ECMAScript Specification , pt 12.14.4 the assignment will itself return the rightmost value: in our case it\u0026rsquo;s \u0026quot;USA\u0026quot;. Then it will be assigned to person.\nTo better understand what\u0026rsquo;s going on here, try to execute this code in console, line by line:\nfunction User(name) { this.name = name || \u0026#34;JsGeeks\u0026#34;; } var person; var foo = new User(\u0026#34;xyz\u0026#34;); foo[\u0026#34;location\u0026#34;] = \u0026#34;USA\u0026#34;; // the console will show you that the result of this is \u0026#34;USA\u0026#34; Question 24. What are Service Workers and when can you use them? Answer\rIt’s a technology that allows your web application to use cached resources first, and provide default experience offline, before getting more data from the network later. This principle is commonly known as Offline First.\nService Workers actively use promises. A Service Worker has to be installed,activated and then it can react on fetch, push and sync events.\nAs of 2017, Service Workers are not supported in IE and Safari.\nQuestion 25. What is the difference between a method and a function in javascript? Answer\rIn JS, that difference is quite subtle. A function is a piece of code that is called by name and function itself not associated with any object and not defined inside any object. It can be passed data to operate on (i.e. parameter) and can optionally return data (the return value).\n// Function statement function myFunc() { // Do some stuff; } // Calling the function myFunc();\rHere myFunc() function call is not associated with object hence not invoked through any object.\nA function can take a form of immediately invoked function expression (IIFE):\n// Anonymous Self-invoking Function (function () { // Do some stuff; })();\rFinally there are also arrow functions:\nconst myFunc = (arg) =\u0026gt; { console.log(\u0026#34;hello\u0026#34;, arg); };\rA method is a piece of code that is called by its name and that is associated with the object. Methods are functions. When you call a method like this obj1.myMethod(), the reference to obj1 gets assigned (bound) to this variable. In other words, the value of this will be obj1 inside myMethod.\nHere are some examples of methods:\n####### Example 1\nvar obj1 = { attribute: \u0026#34;xyz\u0026#34;, myMethod: function () { // Method console.log(this.attribute); } }; // Call the method obj1.myMethod();\rHere obj1 is an object and myMethod is a method which is associated with obj1.\n####### Example 2\nIn ES6 we have classes. There the methods will look like this:\nclass MyAwesomeClass { myMethod() { console.log(\u0026#34;hi there\u0026#34;); } } const obj1 = new MyAwesomeClass(); obj1.myMethod();\rUnderstand: the method is not some kind of special type of a function, and it\u0026rsquo;s not about how you declare a function. It\u0026rsquo;s the way we call a function. Look at that:\nvar obj1 = { prop1: \u0026#34;buddy\u0026#34; }; var myFunc = function () { console.log(\u0026#34;Hi there\u0026#34;, this); }; // let\u0026#39;s call myFunc as a function: myFunc(); // will output \u0026#34;Hi there undefined\u0026#34; or \u0026#34;Hi there Window\u0026#34; obj1.myMethod = myFunc; //now we\u0026#39;re calling myFunc as a method of obj1, so this will point to obj1 obj1.myMethod(); // will print \u0026#34;Hi there\u0026#34; following with obj1. Question 26. What is IIFE (Immediately Invoked Function Expression) and how it can be useful? Answer\rDefinition IIFE a function that runs as soon as it\u0026rsquo;s defined. Usually it\u0026rsquo;s anonymous (doesn\u0026rsquo;t have a function name), but it also can be named. Here\u0026rsquo;s an example of IIFE:\n(function () { console.log(\u0026#34;Hi, I\u0026#39;m IIFE!\u0026#34;); })(); // outputs \u0026#34;Hi, I\u0026#39;m IIFE!\u0026#34; Explanation So, here\u0026rsquo;s how it works. Remember the difference between function statements (function a () {}) and function expressions (var a = function() {})? So, IIFE is a function expression. To make it an expression we surround our function declaration into the parens. We do it to explicitly tell the parser that it\u0026rsquo;s an expression, not a statement (JS doesn\u0026rsquo;t allow statements in parens).\nAfter the function you can see the two () braces, this is how we run the function we just declared.\nThat\u0026rsquo;s it. The rest is details.\nThe function inside IIFE doesn\u0026rsquo;t have to be anonymous. This one will work perfectly fine and will help to detect your function in a stacktrace during debugging:\n(function myIIFEFunc() { console.log(\u0026#34;Hi, I\u0026#39;m IIFE!\u0026#34;); })(); // outputs \u0026#34;Hi, I\u0026#39;m IIFE!\u0026#34; It can take some parameters:\n(function myIIFEFunc(param1) { console.log(\u0026#34;Hi, I\u0026#39;m IIFE, \u0026#34; + param1); })(\u0026#34;Yuri\u0026#34;); // outputs \u0026#34;Hi, I\u0026#39;m IIFE, Yuri!\u0026#34; Here there value \u0026quot;Yuri\u0026quot; is passed to the param1 of the function.\nIt can return a value:\nvar result = (function myIIFEFunc(param1) { console.log(\u0026#34;Hi, I\u0026#39;m IIFE, \u0026#34; + param1); return 1; })(\u0026#34;Yuri\u0026#34;); // outputs \u0026#34;Hi, I\u0026#39;m IIFE, Yuri!\u0026#34; // result variable will contain 1 You don\u0026rsquo;t have to surround the function declaration into parens, although it\u0026rsquo;s the most common way to define IIFE. Instead you can use any of the following forms:\n~function(){console.log(\u0026quot;hi I'm IIFE\u0026quot;)}() !function(){console.log(\u0026quot;hi I'm IIFE\u0026quot;)}() +function(){console.log(\u0026quot;hi I'm IIFE\u0026quot;)}() -function(){console.log(\u0026quot;hi I'm IIFE\u0026quot;)}() (function(){console.log(\u0026quot;hi I'm IIFE\u0026quot;)}()); var i = function(){console.log(\u0026quot;hi I'm IIFE\u0026quot;)}(); true \u0026amp;\u0026amp; function(){ console.log(\u0026quot;hi I'm IIFE\u0026quot;) }(); 0, function(){ console.log(\u0026quot;hi I'm IIFE\u0026quot;) }(); new function(){ console.log(\u0026quot;hi I'm IIFE\u0026quot;) } new function(){ console.log(\u0026quot;hi I'm IIFE\u0026quot;) }() Please don\u0026rsquo;t use all these forms to impress colleagues, but be prepared that you can encounter them in someone\u0026rsquo;s code.\nApplications and usefulness Variables and functions that you declare inside an IIFE are not visible to the outside world, so you can:\nUse the IIFE for isolating parts of the code to hide details of implementation. Specify the input interface of your code by passing commonly used global objects (window, document, jQuery, etc.) IIFE’s parameters, and then reference these global objects within the IIFE via a local scope. Use it in closures, when you use closures in loops. IIFE is the basis of in the module pattern in ES5 code, it helps to prevent polluting the global scope and provide the module interface to the outside. Question 27. Describe Singleton Pattern In JavaScript Answer\rThe singleton pattern is an often used JavaScript design pattern. It provides a way to wrap the code into a logical unit that can be accessed through a single variable. The Singleton design pattern is used when only one instance of an object is needed throughout the lifetime of an application. In JavaScript, Singleton pattern have many uses, they can be used for NameSpacing, which reduce the number of global variables in your page (prevent from polluting global space), organizing the code in a consistent manner, which increase the readability and maintainability of your pages.\nThere are two important points in the traditional definition of Singleton pattern:\nThere should be only one instance allowed for a class and We should allow global point of access to that single instance Let me define singleton pattern in JavaScript context:\nIt is an object that is used to create namespace and group together a related set of methods and attributes (encapsulation) and if we allow to initiate then it can be initiated only once.\nIn JavaScript, we can create singleton though object literal. However, there is some another way but that I will cover in next post.\nA singleton object consists of two parts: The object itself, containing the members (Both methods and attributes) within it, and global variable used to access it. The variable is global so that object can be accessed anywhere in the page, this is a key feature of the singleton pattern.\nJavaScript: A Singleton as a Namespace\nAs I have already stated above that singleton can be used to declare Namespace in JavaScript. NameSpacing is a large part of responsible programming in JavaScript. Because everything can be overwritten, and it is very easy to wipe out variable by mistake or a function, or even a class without even knowing it. A common example which happens frequently when you are working with another team member parallel,\nfunction findUserName(id) {} /* Later in the page another programmer added code */ var findUserName = $(\u0026#34;#user_list\u0026#34;); /* You are trying to call :( */ console.log(findUserName());\rOne of the best ways to prevent accidentally overwriting variable is to namespace your code within a singleton object.\n/* Using Namespace */ var MyNameSpace = { findUserName: function (id) {} // Other methods and attribute go here as well }; /* Later in the page another programmer added code */ var findUserName = $(\u0026#34;#user_list\u0026#34;); /* You are trying to call and you make this time workable */ console.log(MyNameSpace.findUserName());\rSingleton Design Pattern Implementation /* Lazy Instantiation skeleton for a singleton pattern */ var MyNameSpace = {}; MyNameSpace.Singleton = (function () { // Private attribute that holds the single instance var singletonInstance; // All of the normal code goes here function constructor() { // Private members var privateVar1 = \u0026#34;Nishant\u0026#34;; var privateVar2 = [1, 2, 3, 4, 5]; function privateMethod1() { // code stuff } function privateMethod1() { // code stuff } return { attribute1: \u0026#34;Nishant\u0026#34;, publicMethod: function () { alert(\u0026#34;Nishant\u0026#34;); // some code logic } }; } return { // public method (Global access point to Singleton object) getInstance: function () { //instance already exist then return if (!singletonInstance) { singletonInstance = constructor(); } return singletonInstance; } }; })(); // getting access of publicMethod console.log(MyNamespace.Singleton.getInstance().publicMethod());\rThe singleton implemented above is easy to understand. The singleton class maintains a static reference to the lone singleton instance and return that reference from the static getInstance() method.\nQuestion 28. What are the ways of creating objects in JavaScript ? Answer\rMethod 1: Function based This method is useful if we want to create several similar objects. In the code sample below, we wrote the function Employee and used it as a constructor by calling it with the new operator.\nfunction Employee(fName, lName, age, salary) { this.firstName = fName; this.lastName = lName; this.age = age; this.salary = salary; } // Creating multiple object which have similar property but diff value assigned to object property. var employee1 = new Employee(\u0026#34;John\u0026#34;, \u0026#34;Moto\u0026#34;, 24, \u0026#34;5000$\u0026#34;); var employee2 = new Employee(\u0026#34;Ryan\u0026#34;, \u0026#34;Jor\u0026#34;, 26, \u0026#34;3000$\u0026#34;); var employee3 = new Employee(\u0026#34;Andre\u0026#34;, \u0026#34;Salt\u0026#34;, 26, \u0026#34;4000$\u0026#34;);\rMethod 2: Object Literal Object Literal is best way to create an object and this is used frequently. Below is code sample for create employee object which contains property as well as method.\nvar employee = { name: \u0026#34;Nishant\u0026#34;, salary: 245678, getName: function () { return this.name; } };\rThe code sample below is Nested Object Literal, Here address is an object inside employee object.\nvar employee = { name : \u0026#39;Nishant\u0026#39;, salary : 245678, address : { addressLine1 : \u0026#39;BITS Pilani\u0026#39;, addressLine2 : \u0026#39;Vidya Vihar\u0026#39;. phoneNumber: { workPhone: 7098889765, homePhone: 1234567898 } } }\rMethod 3: From Object using new keyword In the code below, a sample object has been created using Object\u0026rsquo;s constructor function.\nvar employee = new Object(); // Created employee object using new keywords and Object() employee.name = \u0026#34;Nishant\u0026#34;; employee.getName = function () { return this.name; };\rMethod 4:** Using Object.create Object.create(obj) will create a new object and set the obj as its prototype. It’s a modern way to create objects that inherit properties from other objects. Object.create function doesn’t run the constructor. You can use Object.create(null) when you don’t want your object to inherit the properties of Object.\nQuestion 29. Write a function called deepClone which takes an object and creates a object copy of it. var newObject = deepClone(obj);\rAnswer\rfunction deepClone(object) { var newObject = {}; for (var key in object) { if (typeof object[key] === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; object[key] !== null) { newObject[key] = deepClone(object[key]); } else { newObject[key] = object[key]; } } return newObject; }\rExplanation: We have been asked to do deep copy of object so What\u0026rsquo;s basically it\u0026rsquo;s mean ??. Let\u0026rsquo;s understand in this way you have been given an object personalDetail this object contains some property which again a type of object here as you can see address is an object and phoneNumber in side an address is also an object. In simple term personalDetail is nested object(object inside object). So Here deep copy means we have to copy all the property of personalDetail object including nested object.\nvar personalDetail = { name: \u0026#34;Nishant\u0026#34;, address: { location: \u0026#34;xyz\u0026#34;, zip: \u0026#34;123456\u0026#34;, phoneNumber: { homePhone: 8797912345, workPhone: 1234509876 } } };\rSo when we do deep clone then we should copy every property (including the nested object).\nQuestion 30. Best way to detect undefined object property in JavaScript. Answer\rSuppose we have given an object person\nvar person = { name: \u0026#34;Nishant\u0026#34;, age: 24 };\rHere the person object has a name and age property. Now we are trying to access the salary property which we haven\u0026rsquo;t declared on the person object so while accessing it will return undefined. So how we will ensure whether property is undefined or not before performing some operation over it?\nExplanation:\nWe can use typeof operator to check undefined\nif (typeof someProperty === \u0026#34;undefined\u0026#34;) { console.log(\u0026#34;something is undefined here\u0026#34;); }\rNow we are trying to access salary property of person object.\nif (typeof person.salary === \u0026#34;undefined\u0026#34;) { console.log(\u0026#34;salary is undefined here because we haven\u0026#39;t declared\u0026#34;); }\rQuestion 31. Write a function called Clone which takes an object and creates a object copy of it but not copy deep property of object. var objectLit = { foo: \u0026#34;Bar\u0026#34; }; var cloneObj = Clone(obj); // Clone is the function which you have to write console.log(cloneObj === Clone(objectLit)); // this should return false console.log(cloneObj == Clone(objectLit)); // this should return true Answer\rfunction Clone(object) { var newObject = {}; for (var key in object) { newObject[key] = object[key]; } return newObject; }\rQuestion 32. What are promises and how they are useful? Answer\rWe use promises for handling asynchronous interactions in a sequential manner. They are especially useful when we need to do an async operation and THEN do another async operation based on the results of the first one. For example, if you want to request the list of all flights and then for each flight you want to request some details about it. The promise represents the future value. It has an internal state (pending, fulfilled and rejected) and works like a state machine.\nA promise object has then method, where you can specify what to do when the promise is fulfilled or rejected.\nYou can chain then() blocks, thus avoiding the callback hell. You can handle errors in the catch() block. After a promise is set to fulfilled or rejected state, it becomes immutable.\nAlso mention that you know about more sophisticated concepts:\nasync/await which makes the code appear even more linear RxJS observables can be viewed as the recyclable promises Be sure that you can implement the promise, read one of the articles on a topic, and learn the source code of the simplest promise implementation.\nQuestion 33. How to check whether a key exist in a JavaScript object or not. Answer\rLet say we have person object with property name and age\nvar person = { name: \u0026#34;Nishant\u0026#34;, age: 24 };\rNow we want to check whether name property exist in person object or not ?\nIn JavaScript object can have own property, in above example name and age is own property of person object. Object also have some of inherited property of base object like toString is inherited property of person object.\nSo how we will check whether property is own property or inherited property.\nMethod 1: We can use in operator on objet to check own property or inherited property.\nconsole.log(\u0026#34;name\u0026#34; in person); // checking own property print true console.log(\u0026#34;salary\u0026#34; in person); // checking undefined property print false in operator also look into inherited property if it doesn\u0026rsquo;t find property defined as own property. For instance If I check existence of toString property as we know that we haven\u0026rsquo;t declared this property on person object so in operator look into there base property.\nHere\nconsole.log(\u0026#34;toString\u0026#34; in person); // Will print true If we want to test property of object instance not inherited properties then we will use hasOwnProperty method of object instance.\nconsole.log(person.hasOwnProperty(\u0026#34;toString\u0026#34;)); // print false console.log(person.hasOwnProperty(\u0026#34;name\u0026#34;)); // print true console.log(person.hasOwnProperty(\u0026#34;salary\u0026#34;)); // print false Question 34. What is NaN, why do we need it, and when can it break the page? Answer\rNaN stands for “not a number.” and it can break your table of numbers when it has an arithmetic operation that is not allowed. Here are some examples of how you can get NaN:\nMath.sqrt(-5); Math.log(-1); parseFloat(\u0026#34;foo\u0026#34;); /* this is common: you get JSON from the server, convert some strings from JSON to a number and end up with NaN in your UI. */\rNaN is not equal to any number, it’s not less or more than any number, also it\u0026rsquo;s not equal to itself:\nNaN !== NaN; NaN \u0026lt; 2; // false NaN \u0026gt; 2; // false NaN === 2; // false To check if the current value of the variable is NaN, you have to use the isNaN function. This is why we can often see NaN in the webpages: it requires special check which a lot of developers forget to do.\nFurther reading: great blogpost on ariya.io\nQuestion 35. Fix the bug using ES5 only var arr = [10, 32, 65, 2]; for (var i = 0; i \u0026lt; arr.length; i++) { setTimeout(function () { console.log(\u0026#34;The index of this number is: \u0026#34; + i); }, 3000); }\rAnswer\rFor ES6, you can just replace var i with let i.\nFor ES5, you need to create a function scope like here:\nvar arr = [10, 32, 65, 2]; for (var i = 0; i \u0026lt; arr.length; i++) { setTimeout( (function (j) { return function () { console.log(\u0026#34;The index of this number is: \u0026#34; + j); }; })(i), 3000 ); }\rThis can also achieve by forEach (allows you to keep that variable within the forEach’s scope)\nvar arr = [10, 32, 65, 2]; arr.forEach(function (ele, i) { setTimeout(function () { console.log(\u0026#34;The index of this number is: \u0026#34; + i); }, 3000); });\rQuestion 36. How to check if the value of a variable in an array? Answer\rWe always encounter in such situation where we need to know whether value is type of array or not.\nFor instance : the code below perform some operation based value type\nfunction(value){ if(\u0026#34;value is an array\u0026#34;){ // Then perform some operation }else{ // otherwise } }\rLet\u0026rsquo;s discuss some way to detect an array in JavaScript.\nMethod 1:\nJuriy Zaytsev (Also known as kangax) proposed an elegant solution to this.\nfunction isArray(value) { return Object.prototype.toString.call(value) === \u0026#34;[object Array]\u0026#34;; }\rThis approach is most popular way to detecting a value of type array in JavaScript and recommended to use. This approach relies on the fact that, native toString() method on a given value produce a standard string in all browser.\nMethod 2:\nDuck typing test for array type detection\n// Duck typing arrays function isArray(value) { return typeof value.sort === \u0026#34;function\u0026#34;; }\rAs we can see above isArray method will return true if value object have sort method of type function. Now assume you have created a object with sort method\nvar bar = { sort: function () { // Some code } };\rNow when you check isArray(bar) then it will return true because bar object has sort method, But the fact is bar is not an array.\nSo this method is not a best way to detect an array as you can see it\u0026rsquo;s not handle the case when some object has sort method.\nMethod 3:\nECMAScript 5 has introduced Array.isArray() method to detect an array type value. The sole purpose of this method is accurately detecting whether a value is an array or not.\nIn many JavaScript libraries you may see the code below for detecting an value of type array.\nfunction(value){ // ECMAScript 5 feature if(typeof Array.isArray === \u0026#39;function\u0026#39;){ return Array.isArray(value); }else{ return Object.prototype.toString.call(value) === \u0026#39;[object Array]\u0026#39;; } }\rMethod 4:\nYou can query the constructor name:\nfunction isArray(value) { return value.constructor.name === \u0026#34;Array\u0026#34;; }\rMethod 5:\nYou check if a given value is an instanceof Array:\nfunction isArray(value) { return value instanceof Array; }\rQuestion 37. Best way to detect reference values of any type in JavaScript ? Answer\rIn Javascript Object are called as reference type, Any value other then primitive is definitely a reference type. There are several built-in reference type such as Object, Array, Function, Date, null and Error.\nDetecting object using typeof operator\nconsole.log(typeof {}); // object console.log(typeof []); // object console.log(typeof new Array()); // object console.log(typeof null); // object console.log(typeof new RegExp()); // object console.log(typeof new Date()); // object But the downside of using typeof operator to detect an object is that typeof returns object for null (However this is fact that null is an object in JavaScript).\nThe best way to detect an object of specific reference type using instanceof operator.\nSyntax : value instanceof constructor\n//Detecting an array if (value instanceof Array) { console.log(\u0026#34;value is type of array\u0026#34;); }\r// Employee constructor function function Employee(name) { this.name = name; // Public property } var emp1 = new Employee(\u0026#34;John\u0026#34;); console.log(emp1 instanceof Employee); // true instanceof not only check the constructor which is used to create an object but also check it\u0026rsquo;s prototype chain see below example.\nconsole.log(emp1 instanceof Object); // true Question 38. How does Object.create method works JavaScript? Answer\rThe ECMAScript 5 Object.create() method is the easiest way for one object to inherit from another, without invoking a constructor function.\nFor instance:\nvar employee = { name: \u0026#34;Nishant\u0026#34;, displayName: function () { console.log(this.name); } }; var emp1 = Object.create(employee); console.log(emp1.displayName()); // output \u0026#34;Nishant\u0026#34; In the example above, we create a new object emp1 that inherits from employee. In other words emp1\u0026rsquo;s prototype is set to employee. After this emp1 is able to access the same properties and method on employee until new properties or method with the same name are defined.\nFor instance: Defining displayName() method on emp1 will not automatically override the employee displayName.\nemp1.displayName = function () { console.log(\u0026#34;xyz-Anonymous\u0026#34;); }; employee.displayName(); //Nishant emp1.displayName(); //xyz-Anonymous In addition to this Object.create() method also allows to specify a second argument which is an object containing additional properties and methods to add to the new object.\nFor example\nvar emp1 = Object.create(employee, { name: { value: \u0026#34;John\u0026#34; } }); emp1.displayName(); // \u0026#34;John\u0026#34; employee.displayName(); // \u0026#34;Nishant\u0026#34; In the example above, emp1 is created with it\u0026rsquo;s own value for name, so calling displayName() method will display \u0026quot;John\u0026quot; instead of \u0026quot;Nishant\u0026quot;.\nObject created in this manner give you full control over newly created object. You are free to add, remove any properties and method you want.\nQuestion 39. How to use constructor functions for inheritance in JavaScript? Answer\rLet say we have Person class which has name, age, salary properties and incrementSalary() method.\nfunction Person(name, age, salary) { this.name = name; this.age = age; this.salary = salary; this.incrementSalary = function (byValue) { this.salary = this.salary + byValue; }; }\rNow we wish to create Employee class which contains all the properties of Person class and wanted to add some additional properties into Employee class.\nfunction Employee(company) { this.company = company; } //Prototypal Inheritance Employee.prototype = new Person(\u0026#34;Nishant\u0026#34;, 24, 5000);\rIn the example above, Employee type inherits from Person. It does so by assigning a new instance of Person to Employee prototype. After that, every instance of Employee inherits its properties and methods from Person.\n//Prototypal Inheritance Employee.prototype = new Person(\u0026#34;Nishant\u0026#34;, 24, 5000); var emp1 = new Employee(\u0026#34;Google\u0026#34;); console.log(emp1 instanceof Person); // true console.log(emp1 instanceof Employee); // true Let\u0026rsquo;s understand Constructor inheritance\n//Defined Person class function Person(name) { this.name = name || \u0026#34;Nishant\u0026#34;; } var obj = {}; // obj inherit Person class properties and method Person.call(obj); // constructor inheritance console.log(obj); // Object {name: \u0026#34;Nishant\u0026#34;} Here we saw calling Person.call(obj) define the name properties from Person to obj.\nconsole.log(name in obj); // true Type-based inheritance is best used with developer defined constructor function rather than natively in JavaScript. In addition to this also allows flexibility in how we create similar type of object.\nQuestion 40. How we can prevent modification of object in JavaScript ?. Answer\rECMAScript 5 introduce several methods to prevent modification of object which lock down object to ensure that no one, accidentally or otherwise, change functionality of Object.\nThere are three levels of preventing modification:\n1: Prevent extensions :\nNo new properties or methods can be added to the object, but one can change the existing properties and method.\nFor example:\nvar employee = { name: \u0026#34;Nishant\u0026#34; }; // lock the object Object.preventExtensions(employee); // Now try to change the employee object property name employee.name = \u0026#34;John\u0026#34;; // work fine //Now try to add some new property to the object employee.age = 24; // fails silently unless it\u0026#39;s inside the strict mode 2: Seal :\nIt is same as prevent extension, in addition to this also prevent existing properties and methods from being deleted.\nTo seal an object, we use Object.seal() method. you can check whether an object is sealed or not using Object.isSealed();\nvar employee = { name: \u0026#34;Nishant\u0026#34; }; // Seal the object Object.seal(employee); console.log(Object.isExtensible(employee)); // false console.log(Object.isSealed(employee)); // true delete employee.name; // fails silently unless it\u0026#39;s in strict mode // Trying to add new property will give an error employee.age = 30; // fails silently unless in strict mode when an object is sealed, its existing properties and methods can\u0026rsquo;t be removed. Sealed object are also non-extensible.\n3: Freeze :\nSame as seal, In addition to this prevent existing properties methods from being modified (All properties and methods are read only).\nTo freeze an object, use Object.freeze() method. We can also determine whether an object is frozen using Object.isFrozen();\nvar employee = { name: \u0026#34;Nishant\u0026#34; }; //Freeze the object Object.freeze(employee); // Seal the object Object.seal(employee); console.log(Object.isExtensible(employee)); // false console.log(Object.isSealed(employee)); // true console.log(Object.isFrozen(employee)); // true employee.name = \u0026#34;xyz\u0026#34;; // fails silently unless in strict mode employee.age = 30; // fails silently unless in strict mode delete employee.name; // fails silently unless it\u0026#39;s in strict mode Frozen objects are considered both non-extensible and sealed.\nRecommended:\nIf you are decided to prevent modification, sealed, freeze the object then use in strict mode so that you can catch the error.\nFor example:\n\u0026#34;use strict\u0026#34;; var employee = { name: \u0026#34;Nishant\u0026#34; }; //Freeze the object Object.freeze(employee); // Seal the object Object.seal(employee); console.log(Object.isExtensible(employee)); // false console.log(Object.isSealed(employee)); // true console.log(Object.isFrozen(employee)); // true employee.name = \u0026#34;xyz\u0026#34;; // fails silently unless in strict mode employee.age = 30; // fails silently unless in strict mode delete employee.name; // fails silently unless it\u0026#39;s in strict mode Question 41. Write a log function which will add prefix (your message) to every message you log using console.log ? For example, If you log console.log(\u0026quot;Some message\u0026quot;) then output should be (your message) Some message\nAnswer\rLogging error message or some informative message is always required when you dealing with client side JavaScript using console.log method. Some time you want to add some prefix to identify message generated log from your application hence you would like to prefix your app name in every console.log.\nA general way to do this keep adding your app name in every console.log message like\nconsole.log(\u0026#34;your app name\u0026#34; + \u0026#34;some error message\u0026#34;);\rBut doing in this way you have to write your app name everytime when you log message using console.\nThere are some best way we can achieve this\nfunction appLog() { var args = Array.prototype.slice.call(arguments); args.unshift(\u0026#34;your app name\u0026#34;); console.log.apply(console, args); } appLog(\u0026#34;Some error message\u0026#34;); //output of above console: \u0026#39;your app name Some error message\u0026#39; Question 42 . Write a function which will test string as a literal and as an object ? For example: We can create string using string literal and using String constructor function.\n// using string literal var ltrlStr = \u0026#34;Hi I am string literal\u0026#34;; // using String constructor function var objStr = new String(\u0026#34;Hi I am string object\u0026#34;);\rAnswer\rWe can use typeof operator to test string literal and instanceof operator to test String object.\nfunction isString(str) { return typeof str == \u0026#34;string\u0026#34; || str instanceof String; } var ltrlStr = \u0026#34;Hi I am string literal\u0026#34;; var objStr = new String(\u0026#34;Hi I am string object\u0026#34;); console.log(isString(ltrlStr)); // true console.log(isString(objStr)); // true Question 43 . What is typical use case for anonymous function in JavaScript ? Answer\rAnonymous functions basically used in following scenario.\nNo name is needed if function is only used in one place, then there is no need to add a name to function.\nLet\u0026rsquo;s take the example of setTimeout function\nsetTimeout(function () { alert(\u0026#34;Hello\u0026#34;); }, 1000);\rHere there is no need of using named function when we are sure that function which will alert hello would use only once in application.\nAnonymous functions are declared inline and inline functions have advantages in the case that they can access variable in the parent scopes.\nLet\u0026rsquo;s take a example of event handler. Notify event of particular type (such as click) for a given object.\nLet say we have HTML element (button) on which we want to add click event and when user do click on button we would like to execute some logic.\n\u0026lt;button id=\u0026#34;myBtn\u0026#34;\u0026gt;\u0026lt;/button\u0026gt;\rAdd Event Listener\nvar btn = document.getElementById(\u0026#34;myBtn\u0026#34;); btn.addEventListener(\u0026#34;click\u0026#34;, function () { alert(\u0026#34;button clicked\u0026#34;); });\rAbove example shows used of anonymous function as a callback function in event handler.\nPassing anonymous function as a parameter to calling function.\nExample:\r```javascript\r// Function which will execute callback function\rfunction processCallback(callback){\rif(typeof callback === 'function'){\rcallback();\r}\r}\r// Call function and pass anonymous function as callback\rprocessCallback(function(){\ralert(\u0026quot;Hi I am anonymous callback function\u0026quot;);\r});\r```\rThe best way to make a decision for using anonymous function is to ask the following question:\nWill the function which I am going to define, be used anywhere else?\nIf your answer is yes then go and create named function rather anonymous function.\nAdvantage of using anonymous function:\nIt can reduce a bit of code, particularly in recursive function and in callback function. Avoid needless global namespace pollutions. Question 44 . How to set a default parameter value ? Answer\rIf you are coming from python/c# you might be using default value for function parameter incase value(formal parameter) has not been passed. For instance :\n// Define sentEmail function // configuration : Configuration object // provider : Email Service provider, Default would be gmail def sentEmail(configuration, provider = \u0026#39;Gmail\u0026#39;): # Your code logic\rIn Pre ES6/ES2015\nThere are a lot of ways by which you can achieve this in pre ES2015.\nLet\u0026rsquo;s understand the code below by which we achieved setting default parameter value.\nMethod 1: Setting default parameter value\nfunction sentEmail(configuration, provider) { // Set default value if user has not passed value for provider provider = typeof provider !== \u0026#34;undefined\u0026#34; ? provider : \u0026#34;Gmail\u0026#34;; // Your code logic } // In this call we are not passing provider parameter value sentEmail({ from: \u0026#34;xyz@gmail.com\u0026#34;, subject: \u0026#34;Test Email\u0026#34; }); // Here we are passing Yahoo Mail as a provider value sentEmail( { from: \u0026#34;xyz@gmail.com\u0026#34;, subject: \u0026#34;Test Email\u0026#34; }, \u0026#34;Yahoo Mail\u0026#34; );\rMethod 2: Setting default parameter value\nfunction sentEmail(configuration, provider) { // Set default value if user has not passed value for provider provider = provider || \u0026#34;Gmail\u0026#34;; // Your code logic } // In this call we are not passing provider parameter value sentEmail({ from: \u0026#34;xyz@gmail.com\u0026#34;, subject: \u0026#34;Test Email\u0026#34; }); // Here we are passing Yahoo Mail as a provider value sentEmail( { from: \u0026#34;xyz@gmail.com\u0026#34;, subject: \u0026#34;Test Email\u0026#34; }, \u0026#34;Yahoo Mail\u0026#34; );\rMethod 3: Setting default parameter value in ES6\nfunction sendEmail(configuration, provider = \u0026#34;Gmail\u0026#34;) { // Set default value if user has not passed value for provider // Value of provider can be accessed directly console.log(`Provider: ${provider}`); } // In this call we are not passing provider parameter value sentEmail({ from: \u0026#34;xyz@gmail.com\u0026#34;, subject: \u0026#34;Test Email\u0026#34; }); // Here we are passing Yahoo Mail as a provider value sentEmail( { from: \u0026#34;xyz@gmail.com\u0026#34;, subject: \u0026#34;Test Email\u0026#34; }, \u0026#34;Yahoo Mail\u0026#34; );\rQuestion 45. Write code for merge two JavaScript Object dynamically. Let say you have two objects\nvar person = { name: \u0026#34;John\u0026#34;, age: 24 }; var address = { addressLine1: \u0026#34;Some Location x\u0026#34;, addressLine2: \u0026#34;Some Location y\u0026#34;, city: \u0026#34;NewYork\u0026#34; };\rWrite merge function which will take two object and add all the own property of second object into first object.\nAnswer\rmerge(person, address); /* Now person should have 5 properties name , age , addressLine1 , addressLine2 , city */\rMethod 1: Using ES6, Object.assign method\nconst merge = (toObj, fromObj) =\u0026gt; Object.assign(toObj, fromObj);\rMethod 2: Without using built-in function\nfunction merge(toObj, fromObj) { // Make sure both of the parameter is an object if (typeof toObj === \u0026#34;object\u0026#34; \u0026amp;\u0026amp; typeof fromObj === \u0026#34;object\u0026#34;) { for (var pro in fromObj) { // Assign only own properties not inherited properties if (fromObj.hasOwnProperty(pro)) { // Assign property and value toObj[pro] = fromObj[pro]; } } } else { throw \u0026#34;Merge function can apply only on object\u0026#34;; } }\rQuestion 46. What is non-enumerable property in JavaScript and how you can create one? Answer\rObject can have properties that don\u0026rsquo;t show up when you iterate through object using for\u0026hellip;in loop or using Object.keys() to get an array of property names. This properties is know as non-enumerable properties.\nLet say we have following object\nvar person = { name: \u0026#34;John\u0026#34; }; person.salary = \u0026#34;10000$\u0026#34;; person[\u0026#34;country\u0026#34;] = \u0026#34;USA\u0026#34;; console.log(Object.keys(person)); // [\u0026#39;name\u0026#39;, \u0026#39;salary\u0026#39;, \u0026#39;country\u0026#39;] As we know that person object properties name, salary ,country are enumerable hence it\u0026rsquo;s shown up when we called Object.keys(person).\nTo create a non-enumerable property we have to use Object.defineProperty(). This is a special method for creating non-enumerable property in JavaScript.\nvar person = { name: \u0026#34;John\u0026#34; }; person.salary = \u0026#34;10000$\u0026#34;; person[\u0026#34;country\u0026#34;] = \u0026#34;USA\u0026#34;; // Create non-enumerable property Object.defineProperty(person, \u0026#34;phoneNo\u0026#34;, { value: \u0026#34;8888888888\u0026#34;, enumerable: false }); Object.keys(person); // [\u0026#39;name\u0026#39;, \u0026#39;salary\u0026#39;, \u0026#39;country\u0026#39;] In the example above phoneNo property didn\u0026rsquo;t show up because we made it non-enumerable by setting enumerable:false\nBonus\nNow let\u0026rsquo;s try to change value of phoneNo\nperson.phoneNo = \u0026#34;7777777777\u0026#34;;\rObject.defineProperty() also lets you create read-only properties as we saw above, we are not able to modify phoneNo value of a person object. This is because descriptor has writable property, which is false by default. Changing non-writable property value will return error in strict mode. In non-strict mode it won\u0026rsquo;t through any error but it won\u0026rsquo;t change the value of phoneNo.\nQuestion 47. What is Function binding ? Answer\rFunction binding falls in advance JavaScript category and this is very popular technique to use in conjunction with event handler and callback function to preserve code execution context while passing function as a parameter.\nLet\u0026rsquo;s consider the following example:\nvar clickHandler = { message: \u0026#34;click event handler\u0026#34;, handleClick: function (event) { console.log(this.message); } }; var btn = document.getElementById(\u0026#34;myBtn\u0026#34;); // Add click event to btn btn.addEventListener(\u0026#34;click\u0026#34;, clickHandler.handleClick);\rHere in this example clickHandler object is created which contain message properties and handleClick method.\nWe have assigned handleClick method to a DOM button, which will be executed in response of click. When the button is clicked, then handleClick method is being called and console message. Here console.log should log the click event handler message but it actually log undefined.\nThe problem of displaying undefined is because of the execution context of clickHandler.handleClick method is not being saved hence this pointing to button btn object. We can fix this issue using bind method.\nvar clickHandler = { message: \u0026#34;click event handler\u0026#34;, handleClick: function (event) { console.log(this.message); } }; var btn = document.getElementById(\u0026#34;myBtn\u0026#34;); // Add click event to btn and bind the clickHandler object btn.addEventListener(\u0026#34;click\u0026#34;, clickHandler.handleClick.bind(clickHandler));\rbind method is available to all the function similar to call and apply method which take argument value of this.\n48. How to replace callbackhell with Promise or Async/Await with examples ? Answer\rPart I Callbackhell. Calling one callback function inside another and so on is callbackhell. First we are defining three functions addTen, subFive and mulTwo. These three functions while called with a number, will return a callback. The callback function will return either result or error. const addTen = (num, callback) =\u0026gt; { return callback(num + 10, false); };\rconst subFive = (num, callback) =\u0026gt; { return callback(num - 5, false); };\rconst mulTwo = (num, callback) =\u0026gt; { return callback(num * 2, false); };\rNow lets call these one by one in nested way. The result of previous will serve as input for next callback. const ans = addTen(5, (addRes, addErr) =\u0026gt; { // addRess = 15 if (!addErr) { return subFive(addRes, (subRes, subErr) =\u0026gt; { //subRes = 10 if (!subErr) { return mulTwo(subRes, (mulRes, mulErr) =\u0026gt; { if (!mulErr) { return mulRes; //20 } }); } }); } }); console.log(ans); // 20 Part II Promise. Promise has two parameters resolve and reject. Rewrting those three function definations as well, without a callback. const addTen = (num) =\u0026gt; { return num + 10; };\rconst subFive = (num) =\u0026gt; { return num - 5; };\rconst mulTwo = (num) =\u0026gt; { return num * 2; };\rCreating a promise. const promise = new Promise((resolve, reject) =\u0026gt; { if (true) resolve(5); else reject(\u0026#34;Something went wrong \u0026#34;); });\rCalling those three functions one by one. \u0026ldquo;then\u0026rdquo; will keep on returning the result and if any error \u0026ldquo;catch\u0026rdquo; will catch it. promise .then(addTen) .then(subFive) .then(mulTwo) .then((ans) =\u0026gt; { console.log(ans); }) .catch((err) =\u0026gt; { console.log(err); });\rPart III Async / Await. It actually uses promise internally. const addTen = (num) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { resolve(num + 10); }); };\rconst subFive = (num) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { resolve(num - 5); }); };\rconst mulTwo = (num) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { resolve(num * 2); }); };\rPut Async keyword before function name and Await before the statments inside the function Await will make the later code wait until the result of that statement is returned. Always put this inside a try/catch block. const ans = async (num) =\u0026gt; { try { var addRes = await addTen(num); var subRes = await subFive(addRes); var mulRes = await mulTwo(subRes); console.log(mulRes); } catch (err) { console.log(err); } }; ans(5);\rCoding Questions Passing values by reference vs by value For a JS developer, it\u0026rsquo;s crucially important to understand which values are passed by reference, and which ones are passed by value. Remember that objects, including arrays are passed by reference while strings, booleans and numbers are passed by value.\n1. What would be the output of following code? var strA = \u0026#34;hi there\u0026#34;; var strB = strA; strB = \u0026#34;bye there!\u0026#34;; console.log(strA);\rAnswer\rThe output will be 'hi there' because we\u0026rsquo;re dealing with strings here. Strings are passed by value, that is, copied.\n2. What would be the output of following code? var objA = { prop1: 42 }; var objB = objA; objB.prop1 = 90; console.log(objA);\rAnswer\rThe output will be {prop1: 90} because we\u0026rsquo;re dealing with objects here. Objects are passed by reference, that is, objA and objB point to the same object in memory.\n3. What would be the output of following code? var objA = { prop1: 42 }; var objB = objA; objB = {}; console.log(objA);\rAnswer\rThe output will be {prop1: 42}.\nWhen we assign objA to objB, the objB variable will point to the same object as the objB variable.\nHowever, when we reassign objB to an empty object, we simply change where objB variable references to. This doesn\u0026rsquo;t affect where objA variable references to.\n4. What would be the output of following code? var arrA = [0, 1, 2, 3, 4, 5]; var arrB = arrA; arrB[0] = 42; console.log(arrA);\rAnswer\rThe output will be [42,1,2,3,4,5].\nArrays are object in JavaScript and they are passed and assigned by reference. This is why both arrA and arrB point to the same array [0,1,2,3,4,5]. That\u0026rsquo;s why changing the first element of the arrB will also modify arrA: it\u0026rsquo;s the same array in the memory.\n5. What would be the output of following code? var arrA = [0, 1, 2, 3, 4, 5]; var arrB = arrA.slice(); arrB[0] = 42; console.log(arrA);\rAnswer\rThe output will be [0,1,2,3,4,5].\nThe slice function copies all the elements of the array returning the new array. That\u0026rsquo;s why arrA and arrB reference two completely different arrays.\n6. What would be the output of following code? var arrA = [{ prop1: \u0026#34;value of array A!!\u0026#34; }, { someProp: \u0026#34;also value of array A!\u0026#34; }, 3, 4, 5]; var arrB = arrA; arrB[0].prop1 = 42; console.log(arrA);\rAnswer\rThe output will be [{prop1: 42}, {someProp: \u0026quot;also value of array A!\u0026quot;}, 3,4,5].\nArrays are object in JS, so both varaibles arrA and arrB point to the same array. Changing arrB[0] is the same as changing arrA[0]\n7. What would be the output of following code? var arrA = [{ prop1: \u0026#34;value of array A!!\u0026#34; }, { someProp: \u0026#34;also value of array A!\u0026#34; }, 3, 4, 5]; var arrB = arrA.slice(); arrB[0].prop1 = 42; arrB[3] = 20; console.log(arrA);\rAnswer\rThe output will be [{prop1: 42}, {someProp: \u0026quot;also value of array A!\u0026quot;}, 3,4,5].\nThe slice function copies all the elements of the array returning the new array. However, it doesn\u0026rsquo;t do deep copying. Instead it does shallow copying. You can imagine slice implemented like this:\nfunction slice(arr) { var result = []; for (i = 0; i \u0026lt; arr.length; i++) { result.push(arr[i]); } return result; }\rLook at the line with result.push(arr[i]). If arr[i] happens to be a number or string, it will be passed by value, in other words, copied. If arr[i] is an object, it will be passed by reference.\nIn case of our array arr[0] is an object {prop1: \u0026quot;value of array A!!\u0026quot;}. Only the reference to this object will be copied. This effectively means that arrays arrA and arrB share first two elements.\nThis is why changing the property of arrB[0] in arrB will also change the arrA[0].\nHoisting 1. console.log(employeeId); Some Value Undefined Type Error ReferenceError: employeeId is not defined Answer\rReferenceError: employeeId is not defined 2. What would be the output of following code? console.log(employeeId); var employeeId = \u0026#34;19000\u0026#34;;\rSome Value undefined Type Error ReferenceError: employeeId is not defined Answer\rundefined 3. What would be the output of following code? var employeeId = \u0026#34;1234abe\u0026#34;; (function () { console.log(employeeId); var employeeId = \u0026#34;122345\u0026#34;; })();\r\u0026lsquo;122345\u0026rsquo; undefined Type Error ReferenceError: employeeId is not defined Answer\rundefined 4. What would be the output of following code? var employeeId = \u0026#34;1234abe\u0026#34;; (function () { console.log(employeeId); var employeeId = \u0026#34;122345\u0026#34;; (function () { var employeeId = \u0026#34;abc1234\u0026#34;; })(); })();\r\u0026lsquo;122345\u0026rsquo; undefined \u0026lsquo;1234abe\u0026rsquo; ReferenceError: employeeId is not defined Answer\rundefined 5. What would be the output of following code? (function () { console.log(typeof displayFunc); var displayFunc = function () { console.log(\u0026#34;Hi I am inside displayFunc\u0026#34;); }; })();\rundefined function \u0026lsquo;Hi I am inside displayFunc\u0026rsquo; ReferenceError: displayFunc is not defined Answer\rundefined 6. What would be the output of following code? var employeeId = \u0026#34;abc123\u0026#34;; function foo() { employeeId = \u0026#34;123bcd\u0026#34;; return; } foo(); console.log(employeeId);\rundefined \u0026lsquo;123bcd\u0026rsquo; \u0026lsquo;abc123\u0026rsquo; ReferenceError: employeeId is not defined Answer\r\u0026lsquo;123bcd\u0026rsquo; 7. What would be the output of following code? var employeeId = \u0026#34;abc123\u0026#34;; function foo() { employeeId = \u0026#34;123bcd\u0026#34;; return; function employeeId() {} } foo(); console.log(employeeId);\rundefined \u0026lsquo;123bcd\u0026rsquo; \u0026lsquo;abc123\u0026rsquo; ReferenceError: employeeId is not defined Answer\r\u0026lsquo;abc123\u0026rsquo; 8. What would be the output of following code? var employeeId = \u0026#34;abc123\u0026#34;; function foo() { employeeId(); return; function employeeId() { console.log(typeof employeeId); } } foo();\rundefined function string ReferenceError: employeeId is not defined Answer\r\u0026lsquo;function\u0026rsquo; 9. What would be the output of following code? function foo() { employeeId(); var product = \u0026#34;Car\u0026#34;; return; function employeeId() { console.log(product); } } foo();\rundefined Type Error \u0026lsquo;Car\u0026rsquo; ReferenceError: product is not defined Answer\rundefined 10. What would be the output of following code? (function foo() { bar(); function bar() { abc(); console.log(typeof abc); } function abc() { console.log(typeof bar); } })();\rundefined undefined Type Error function function ReferenceError: bar is not defined Answer\rfunction function Objects 1. What would be the output of following code ? (function () { \u0026#34;use strict\u0026#34;; var person = { name: \u0026#34;John\u0026#34; }; person.salary = \u0026#34;10000$\u0026#34;; person[\u0026#34;country\u0026#34;] = \u0026#34;USA\u0026#34;; Object.defineProperty(person, \u0026#34;phoneNo\u0026#34;, { value: \u0026#34;8888888888\u0026#34;, enumerable: true }); console.log(Object.keys(person)); })();\rType Error undefined [\u0026ldquo;name\u0026rdquo;, \u0026ldquo;salary\u0026rdquo;, \u0026ldquo;country\u0026rdquo;, \u0026ldquo;phoneNo\u0026rdquo;] [\u0026ldquo;name\u0026rdquo;, \u0026ldquo;salary\u0026rdquo;, \u0026ldquo;country\u0026rdquo;] Answer\r[\u0026ldquo;name\u0026rdquo;, \u0026ldquo;salary\u0026rdquo;, \u0026ldquo;country\u0026rdquo;, \u0026ldquo;phoneNo\u0026rdquo;] 2. What would be the output of following code ? (function () { \u0026#34;use strict\u0026#34;; var person = { name: \u0026#34;John\u0026#34; }; person.salary = \u0026#34;10000$\u0026#34;; person[\u0026#34;country\u0026#34;] = \u0026#34;USA\u0026#34;; Object.defineProperty(person, \u0026#34;phoneNo\u0026#34;, { value: \u0026#34;8888888888\u0026#34;, enumerable: false }); console.log(Object.keys(person)); })();\rType Error undefined [\u0026ldquo;name\u0026rdquo;, \u0026ldquo;salary\u0026rdquo;, \u0026ldquo;country\u0026rdquo;, \u0026ldquo;phoneNo\u0026rdquo;] [\u0026ldquo;name\u0026rdquo;, \u0026ldquo;salary\u0026rdquo;, \u0026ldquo;country\u0026rdquo;] Answer\r[\u0026ldquo;name\u0026rdquo;, \u0026ldquo;salary\u0026rdquo;, \u0026ldquo;country\u0026rdquo;] 3. What would be the output of following code ? (function () { var objA = { foo: \u0026#34;foo\u0026#34;, bar: \u0026#34;bar\u0026#34; }; var objB = { foo: \u0026#34;foo\u0026#34;, bar: \u0026#34;bar\u0026#34; }; console.log(objA == objB); console.log(objA === objB); })();\rfalse true false false true false true true Answer\rfalse false 4. What would be the output of following code ? (function () { var objA = new Object({ foo: \u0026#34;foo\u0026#34; }); var objB = new Object({ foo: \u0026#34;foo\u0026#34; }); console.log(objA == objB); console.log(objA === objB); })();\rfalse true false false true false true true Answer\rfalse false 5. What would be the output of following code ? (function () { var objA = Object.create({ foo: \u0026#34;foo\u0026#34; }); var objB = Object.create({ foo: \u0026#34;foo\u0026#34; }); console.log(objA == objB); console.log(objA === objB); })();\rfalse true false false true false true true Answer\rfalse false 6. What would be the output of following code ? (function () { var objA = Object.create({ foo: \u0026#34;foo\u0026#34; }); var objB = Object.create(objA); console.log(objA == objB); console.log(objA === objB); })();\rfalse true false false true false true true Answer\rfalse false 7. What would be the output of following code ? (function () { var objA = Object.create({ foo: \u0026#34;foo\u0026#34; }); var objB = Object.create(objA); console.log(objA.toString() == objB.toString()); console.log(objA.toString() === objB.toString()); })();\rfalse true false false true false true true Answer\rtrue true 8. What would be the output of following code ? (function () { var objA = Object.create({ foo: \u0026#34;foo\u0026#34; }); var objB = objA; console.log(objA == objB); console.log(objA === objB); console.log(objA.toString() == objB.toString()); console.log(objA.toString() === objB.toString()); })();\rtrue true true false true false true true true true true true true true false false Answer\rtrue true true true 9. What would be the output of following code ? (function () { var objA = Object.create({ foo: \u0026#34;foo\u0026#34; }); var objB = objA; objB.foo = \u0026#34;bar\u0026#34;; console.log(objA.foo); console.log(objB.foo); })();\rfoo bar bar bar foo foo bar foo Answer\rbar bar 10. What would be the output of following code ? (function () { var objA = Object.create({ foo: \u0026#34;foo\u0026#34; }); var objB = objA; objB.foo = \u0026#34;bar\u0026#34;; delete objA.foo; console.log(objA.foo); console.log(objB.foo); })();\rfoo bar bar bar foo foo bar foo Answer\rfoo foo 11. What would be the output of following code ? (function () { var objA = { foo: \u0026#34;foo\u0026#34; }; var objB = objA; objB.foo = \u0026#34;bar\u0026#34;; delete objA.foo; console.log(objA.foo); console.log(objB.foo); })();\rfoo bar undefined undefined foo foo undefined bar Answer\rundefined undefined Arrays 1. What would be the output of following code? (function () { var array = new Array(\u0026#34;100\u0026#34;); console.log(array); console.log(array.length); })();\rundefined undefined [undefined × 100] 100 [\u0026ldquo;100\u0026rdquo;] 1 ReferenceError: array is not defined Answer\r[\u0026ldquo;100\u0026rdquo;] 1 2. What would be the output of following code? (function () { var array1 = []; var array2 = new Array(100); var array3 = new Array([\u0026#34;1\u0026#34;, 2, \u0026#34;3\u0026#34;, 4, 5.6]); console.log(array1); console.log(array2); console.log(array3); console.log(array3.length); })();\r[] [] [Array[5]] 1 [] [undefined × 100] Array[5] 1 [] [] [\u0026lsquo;1\u0026rsquo;,2,\u0026lsquo;3\u0026rsquo;,4,5.6] 5 [] [] [Array[5]] 5 Answer\r[] [] [Array[5]] 1 3. What would be the output of following code? (function () { var array = new Array(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;, \u0026#34;e\u0026#34;); array[10] = \u0026#34;f\u0026#34;; delete array[10]; console.log(array.length); })();\r11 5 6 undefined Answer\r11 4. What would be the output of following code? (function () { var animal = [\u0026#34;cow\u0026#34;, \u0026#34;horse\u0026#34;]; animal.push(\u0026#34;cat\u0026#34;); animal.push(\u0026#34;dog\u0026#34;, \u0026#34;rat\u0026#34;, \u0026#34;goat\u0026#34;); console.log(animal.length); })();\r4 5 6 undefined Answer\r6 5. What would be the output of following code? (function () { var animal = [\u0026#34;cow\u0026#34;, \u0026#34;horse\u0026#34;]; animal.push(\u0026#34;cat\u0026#34;); animal.unshift(\u0026#34;dog\u0026#34;, \u0026#34;rat\u0026#34;, \u0026#34;goat\u0026#34;); console.log(animal); })();\r[ \u0026lsquo;dog\u0026rsquo;, \u0026lsquo;rat\u0026rsquo;, \u0026lsquo;goat\u0026rsquo;, \u0026lsquo;cow\u0026rsquo;, \u0026lsquo;horse\u0026rsquo;, \u0026lsquo;cat\u0026rsquo; ] [ \u0026lsquo;cow\u0026rsquo;, \u0026lsquo;horse\u0026rsquo;, \u0026lsquo;cat\u0026rsquo;, \u0026lsquo;dog\u0026rsquo;, \u0026lsquo;rat\u0026rsquo;, \u0026lsquo;goat\u0026rsquo; ] Type Error undefined Answer\r[ \u0026lsquo;dog\u0026rsquo;, \u0026lsquo;rat\u0026rsquo;, \u0026lsquo;goat\u0026rsquo;, \u0026lsquo;cow\u0026rsquo;, \u0026lsquo;horse\u0026rsquo;, \u0026lsquo;cat\u0026rsquo; ] 6. What would be the output of following code? (function () { var array = [1, 2, 3, 4, 5]; console.log(array.indexOf(2)); console.log([{ name: \u0026#34;John\u0026#34; }, { name: \u0026#34;John\u0026#34; }].indexOf({ name: \u0026#34;John\u0026#34; })); console.log([[1], [2], [3], [4]].indexOf([3])); console.log(\u0026#34;abcdefgh\u0026#34;.indexOf(\u0026#34;e\u0026#34;)); })();\r1 -1 -1 4 1 0 -1 4 1 -1 -1 -1 1 undefined -1 4 Answer\r1 -1 -1 4 7. What would be the output of following code? (function () { var array = [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]; console.log(array.indexOf(2)); console.log(array.indexOf(2, 3)); console.log(array.indexOf(2, 10)); })();\r1 -1 -1 1 6 -1 1 1 -1 1 undefined undefined Answer\r1 6 -1 8. What would be the output of following code? (function () { var numbers = [2, 3, 4, 8, 9, 11, 13, 12, 16]; var even = numbers.filter(function (element, index) { return element % 2 === 0; }); console.log(even); var containsDivisibleby3 = numbers.some(function (element, index) { return element % 3 === 0; }); console.log(containsDivisibleby3); })();\r[ 2, 4, 8, 12, 16 ] [ 0, 3, 0, 0, 9, 0, 12] [ 2, 4, 8, 12, 16 ] [ 3, 9, 12] [ 2, 4, 8, 12, 16 ] true [ 2, 4, 8, 12, 16 ] false Answer\r[ 2, 4, 8, 12, 16 ] true 9. What would be the output of following code? (function () { var containers = [2, 0, false, \u0026#34;\u0026#34;, \u0026#34;12\u0026#34;, true]; var containers = containers.filter(Boolean); console.log(containers); var containers = containers.filter(Number); console.log(containers); var containers = containers.filter(String); console.log(containers); var containers = containers.filter(Object); console.log(containers); })();\r[ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true ] [false, true] [ 2 ] [\u0026lsquo;12\u0026rsquo;] [ ] [2,0,false,\u0026quot;\u0026quot;, \u0026lsquo;12\u0026rsquo;, true] [2,0,false,\u0026quot;\u0026quot;, \u0026lsquo;12\u0026rsquo;, true] [2,0,false,\u0026quot;\u0026quot;, \u0026lsquo;12\u0026rsquo;, true] [2,0,false,\u0026quot;\u0026quot;, \u0026lsquo;12\u0026rsquo;, true] [ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true, false ] [ 2, \u0026lsquo;12\u0026rsquo;, true,false ] [ 2, \u0026lsquo;12\u0026rsquo;, true,false] Answer\r[ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true ] [ 2, \u0026lsquo;12\u0026rsquo;, true ] 10. What would be the output of following code? (function () { var list = [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;john\u0026#34;, \u0026#34;ritz\u0026#34;]; console.log(list.slice(1)); console.log(list.slice(1, 3)); console.log(list.slice()); console.log(list.slice(2, 2)); console.log(list); })();\r[ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;,\u0026lsquo;ritz ] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;foo\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] Answer\r[ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo;, \u0026lsquo;ritz\u0026rsquo; ] 11. What would be the output of following code? (function () { var list = [\u0026#34;foo\u0026#34;, \u0026#34;bar\u0026#34;, \u0026#34;john\u0026#34;]; console.log(list.splice(1)); console.log(list.splice(1, 2)); console.log(list); })();\r[ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [] [] Answer\r[ \u0026lsquo;bar\u0026rsquo;, \u0026lsquo;john\u0026rsquo; ] [] [ \u0026lsquo;foo\u0026rsquo; ] 12. What would be the output of following code? (function () { var arrayNumb = [2, 8, 15, 16, 23, 42]; arrayNumb.sort(); console.log(arrayNumb); })();\r[2, 8, 15, 16, 23, 42] [42, 23, 26, 15, 8, 2] [ 15, 16, 2, 23, 42, 8 ] [ 2, 8, 15, 16, 23, 42 ] Answer\r[ 15, 16, 2, 23, 42, 8 ] Functions 1. What would be the output of following code ? function funcA() { console.log(\u0026#34;funcA \u0026#34;, this); (function innerFuncA1() { console.log(\u0026#34;innerFunc1\u0026#34;, this); (function innerFunA11() { console.log(\u0026#34;innerFunA11\u0026#34;, this); })(); })(); } console.log(funcA());\rfuncA Window {\u0026hellip;} innerFunc1 Window {\u0026hellip;} innerFunA11 Window {\u0026hellip;} undefined Type Error ReferenceError: this is not defined Answer\rfuncA Window {\u0026hellip;} innerFunc1 Window {\u0026hellip;} innerFunA11 Window {\u0026hellip;} 2. What would be the output of following code ? var obj = { message: \u0026#34;Hello\u0026#34;, innerMessage: !(function () { console.log(this.message); })() }; console.log(obj.innerMessage);\rReferenceError: this.message is not defined undefined Type Error undefined true Answer\rundefined true 3. What would be the output of following code ? var obj = { message: \u0026#34;Hello\u0026#34;, innerMessage: function () { return this.message; } }; console.log(obj.innerMessage());\rHello undefined Type Error ReferenceError: this.message is not defined Answer\rHello 4. What would be the output of following code ? var obj = { message: \u0026#34;Hello\u0026#34;, innerMessage: function () { (function () { console.log(this.message); })(); } }; console.log(obj.innerMessage());\rType Error Hello undefined ReferenceError: this.message is not defined Answer\rundefined 5. What would be the output of following code ? var obj = { message: \u0026#34;Hello\u0026#34;, innerMessage: function () { var self = this; (function () { console.log(self.message); })(); } }; console.log(obj.innerMessage());\rType Error \u0026lsquo;Hello\u0026rsquo; undefined ReferenceError: self.message is not defined Answer\r\u0026lsquo;Hello\u0026rsquo; 6. What would be the output of following code ? function myFunc() { console.log(this.message); } myFunc.message = \u0026#34;Hi John\u0026#34;; console.log(myFunc());\rType Error \u0026lsquo;Hi John\u0026rsquo; undefined ReferenceError: this.message is not defined Answer\rundefined 7. What would be the output of following code ? function myFunc() { console.log(myFunc.message); } myFunc.message = \u0026#34;Hi John\u0026#34;; console.log(myFunc());\rType Error \u0026lsquo;Hi John\u0026rsquo; undefined ReferenceError: this.message is not defined Answer\r\u0026lsquo;Hi John\u0026rsquo; 8. What would be the output of following code ? function myFunc() { myFunc.message = \u0026#34;Hi John\u0026#34;; console.log(myFunc.message); } console.log(myFunc());\rType Error \u0026lsquo;Hi John\u0026rsquo; undefined ReferenceError: this.message is not defined Answer\r\u0026lsquo;Hi John\u0026rsquo; 9. What would be the output of following code ? function myFunc(param1, param2) { console.log(myFunc.length); } console.log(myFunc()); console.log(myFunc(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;)); console.log(myFunc(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;));\r2 2 2 0 2 4 undefined ReferenceError Answer\ra) 2 2 2\n10. What would be the output of following code ? function myFunc() { console.log(arguments.length); } console.log(myFunc()); console.log(myFunc(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;)); console.log(myFunc(\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;));\r2 2 2 0 2 4 undefined ReferenceError Answer\r0 2 4 Object Oriented 1. What would be the output of following code ? function Person(name, age) { this.name = name || \u0026#34;John\u0026#34;; this.age = age || 24; this.displayName = function () { console.log(this.name); }; } Person.name = \u0026#34;John\u0026#34;; Person.displayName = function () { console.log(this.name); }; var person1 = new Person(\u0026#34;John\u0026#34;); person1.displayName(); Person.displayName();\rJohn Person John John John undefined John John Answer\rJohn Person Scopes 1. What would be the output of following code ? function passWordMngr() { var password = \u0026#34;12345678\u0026#34;; this.userName = \u0026#34;John\u0026#34;; return { pwd: password }; } // Block End var userInfo = passWordMngr(); console.log(userInfo.pwd); console.log(userInfo.userName);\r12345678 Window 12345678 John 12345678 undefined undefined undefined Answer\r12345678 undefined 2. What would be the output of following code ? var employeeId = \u0026#34;aq123\u0026#34;; function Employee() { this.employeeId = \u0026#34;bq1uy\u0026#34;; } console.log(Employee.employeeId);\rReference Error aq123 bq1uy undefined Answer\rundefined 3. What would be the output of following code ? var employeeId = \u0026#34;aq123\u0026#34;; function Employee() { this.employeeId = \u0026#34;bq1uy\u0026#34;; } console.log(new Employee().employeeId); Employee.prototype.employeeId = \u0026#34;kj182\u0026#34;; Employee.prototype.JobId = \u0026#34;1BJKSJ\u0026#34;; console.log(new Employee().JobId); console.log(new Employee().employeeId);\rbq1uy 1BJKSJ bq1uy undefined bq1uy 1BJKSJ bq1uy bq1uy 1BJKSJ kj182 undefined 1BJKSJ kj182 Answer\rbq1uy 1BJKSJ bq1uy 4. What would be the output of following code ? var employeeId = \u0026#34;aq123\u0026#34;; (function Employee() { try { throw \u0026#34;foo123\u0026#34;; } catch (employeeId) { console.log(employeeId); } console.log(employeeId); })();\rfoo123 aq123 foo123 foo123 aq123 aq123 foo123 undefined Answer\rfoo123 aq123 Call, Apply, Bind 1. What would be the output of following code ? (function () { var greet = \u0026#34;Hello World\u0026#34;; var toGreet = [].filter.call(greet, function (element, index) { return index \u0026gt; 5; }); console.log(toGreet); })();\rHello World undefined World [ \u0026lsquo;W\u0026rsquo;, \u0026lsquo;o\u0026rsquo;, \u0026lsquo;r\u0026rsquo;, \u0026rsquo;l\u0026rsquo;, \u0026rsquo;d\u0026rsquo; ] Answer\r[ \u0026lsquo;W\u0026rsquo;, \u0026lsquo;o\u0026rsquo;, \u0026lsquo;r\u0026rsquo;, \u0026rsquo;l\u0026rsquo;, \u0026rsquo;d\u0026rsquo; ] 2. What would be the output of following code ? (function () { var fooAccount = { name: \u0026#34;John\u0026#34;, amount: 4000, deductAmount: function (amount) { this.amount -= amount; return \u0026#34;Total amount left in account: \u0026#34; + this.amount; } }; var barAccount = { name: \u0026#34;John\u0026#34;, amount: 6000 }; var withdrawAmountBy = function (totalAmount) { return fooAccount.deductAmount.bind(barAccount, totalAmount); }; console.log(withdrawAmountBy(400)()); console.log(withdrawAmountBy(300)()); })();\rTotal amount left in account: 5600 Total amount left in account: 5300 undefined undefined Total amount left in account: 3600 Total amount left in account: 3300 Total amount left in account: 5600 Total amount left in account: 5600 Answer\rTotal amount left in account: 5600 Total amount left in account: 5300 3. What would be the output of following code ? (function () { var fooAccount = { name: \u0026#34;John\u0026#34;, amount: 4000, deductAmount: function (amount) { this.amount -= amount; return this.amount; } }; var barAccount = { name: \u0026#34;John\u0026#34;, amount: 6000 }; var withdrawAmountBy = function (totalAmount) { return fooAccount.deductAmount.apply(barAccount, [totalAmount]); }; console.log(withdrawAmountBy(400)); console.log(withdrawAmountBy(300)); console.log(withdrawAmountBy(200)); })();\r5600 5300 5100 3600 3300 3100 5600 3300 5100 undefined undefined undefined Answer\r5600 5300 5100 4. What would be the output of following code ? (function () { var fooAccount = { name: \u0026#34;John\u0026#34;, amount: 6000, deductAmount: function (amount) { this.amount -= amount; return this.amount; } }; var barAccount = { name: \u0026#34;John\u0026#34;, amount: 4000 }; var withdrawAmountBy = function (totalAmount) { return fooAccount.deductAmount.call(barAccount, totalAmount); }; console.log(withdrawAmountBy(400)); console.log(withdrawAmountBy(300)); console.log(withdrawAmountBy(200)); })();\r5600 5300 5100 3600 3300 3100 5600 3300 5100 undefined undefined undefined Answer\r3600 3300 3100 5. What would be the output of following code ? (function greetNewCustomer() { console.log(\u0026#34;Hello \u0026#34; + this.name); }).bind({ name: \u0026#34;John\u0026#34; })();\rHello John Reference Error Window undefined Answer\rHello John 6. Suggest your question! Callback Functions 1. What would be the output of following code ? function getDataFromServer(apiUrl) { var name = \u0026#34;John\u0026#34;; return { then: function (fn) { fn(name); } }; } getDataFromServer(\u0026#34;www.google.com\u0026#34;).then(function (name) { console.log(name); });\rJohn undefined Reference Error fn is not defined Answer\rJohn 2. What would be the output of following code ? (function () { var arrayNumb = [2, 8, 15, 16, 23, 42]; Array.prototype.sort = function (a, b) { return a - b; }; arrayNumb.sort(); console.log(arrayNumb); })(); (function () { var numberArray = [2, 8, 15, 16, 23, 42]; numberArray.sort(function (a, b) { if (a == b) { return 0; } else { return a \u0026lt; b ? -1 : 1; } }); console.log(numberArray); })(); (function () { var numberArray = [2, 8, 15, 16, 23, 42]; numberArray.sort(function (a, b) { return a - b; }); console.log(numberArray); })();\r[ 2, 8, 15, 16, 23, 42 ] [ 2, 8, 15, 16, 23, 42 ] [ 2, 8, 15, 16, 23, 42 ] undefined undefined undefined [42, 23, 16, 15, 8, 2] [42, 23, 16, 15, 8, 2] [42, 23, 16, 15, 8, 2] Reference Error Answer\r[ 2, 8, 15, 16, 23, 42 ] [ 2, 8, 15, 16, 23, 42 ] [ 2, 8, 15, 16, 23, 42 ] Return Statement 1. What would be the output of following code ? (function () { function sayHello() { var name = \u0026#34;Hi John\u0026#34;; return; { fullName: name; } } console.log(sayHello().fullName); })();\rHi John undefined Reference Error Uncaught TypeError: Cannot read property \u0026lsquo;fullName\u0026rsquo; of undefined Answer\rUncaught TypeError: Cannot read property \u0026lsquo;fullName\u0026rsquo; of undefined 2. What would be the output of following code ? function getNumber() { return 2, 4, 5; } var numb = getNumber(); console.log(numb);\r5 undefined 2 (2,4,5) Answer\r5 3. What would be the output of following code ? function getNumber() { return; } var numb = getNumber(); console.log(numb);\rnull undefined \u0026quot;\u0026quot; 0 Answer\rundefined 4. What would be the output of following code ? function mul(x) { return function (y) { return [ x * y, function (z) { return x * y + z; } ]; }; } console.log(mul(2)(3)[0]); console.log(mul(2)(3)[1](4));\r6, 10 undefined undefined Reference Error 10, 6 Answer\r6, 10 5. What would be the output of following code ? function mul(x) { return function (y) { return { result: x * y, sum: function (z) { return x * y + z; } }; }; } console.log(mul(2)(3).result); console.log(mul(2)(3).sum(4));\r6, 10 undefined undefined Reference Error 10, 6 Answer\r6, 10 6. What would be the output of following code ? function mul(x) { return function (y) { return function (z) { return function (w) { return function (p) { return x * y * z * w * p; }; }; }; }; } console.log(mul(2)(3)(4)(5)(6));\r720 undefined Reference Error Type Error Answer\r720 7. What would be the output of following code ? function getName1() { console.log(this.name); } Object.prototype.getName2 = () =\u0026gt; { console.log(this.name); }; let personObj = { name: \u0026#34;Tony\u0026#34;, print: getName1 }; personObj.print(); personObj.getName2();\rundefined undefined Tony undefined undefined Tony Tony Tony Answer\rTony undefined Explaination: getName1() function works fine because it\u0026rsquo;s being called from personObj, so it has access to this.name property. But when while calling getnName2 which is defined under Object.prototype doesn\u0026rsquo;t have any proprty named this.name. There should be name property under prototype. Following is the code:\nfunction getName1() { console.log(this.name); } Object.prototype.getName2 = () =\u0026gt; { console.log(Object.getPrototypeOf(this).name); }; let personObj = { name: \u0026#34;Tony\u0026#34;, print: getName1 }; personObj.print(); Object.prototype.name = \u0026#34;Steve\u0026#34;; personObj.getName2();\r8 . What would be the output of the following code ? let a = true; let c = 0; setTimeout(() =\u0026gt; { a = false; }, 2000); while (a) { console.log(\u0026#34;Hello\u0026#34;); }\rAnswer\rThe above program will print Hello infinitely. Since, Javascript is a single threaded language the actual execution happens only on the main thread. So, setTimeout will wailt for 2000 milliseconds on a seperate thread as while loop has occupied the main thread. The exit condition for the loop is to set the variable a as fasle. But as the loop continously running on the main thread , it a cannot be set false.\r9 . What would be the output of the following code ? let c = 0; let id = setInterval(() =\u0026gt; { console.log(c++); }, 200); setTimeout(() =\u0026gt; { clearInterval(id); }, 2000);\rAnswer\rThe above program will print 0 to 9 sequentially.\r","date":"0001-01-01","id":44,"permalink":"/others/others/123-javascript-interview-questions/","summary":"\u003ch2 id=\"want-to-buy-a-book-in-paper-form-want-some-badass-flashcards\"\u003eWant to buy a book in paper form? Want some badass flashcards?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThis Book will be soon completed and then it will be available to buy in paper form. If you want me to send you an early copy of this book, please add your name and email address in this \u003ca href=\"https://goo.gl/forms/c8ubV1tWBBdz6fJP2\"\u003eGoogle Form\u003c/a\u003e.\u003c/p\u003e","tags":[],"title":"123 Javascript Interview Questions"},{"content":"JavaScript\u0026rsquo;s \u0026ldquo;shared everything\u0026rdquo; approach to loading code is one of the most error-prone and confusing aspects of the language. Other languages use concepts such as packages to define code scope, but before ECMAScript 6, everything defined in every JavaScript file of an application shared one global scope. As web applications became more complex and started using even more JavaScript code, that approach caused problems like naming collisions and security concerns. One goal of ECMAScript 6 was to solve the scope problem and bring some order to JavaScript applications. That\u0026rsquo;s where modules come in.\nWhat are Modules? Modules are JavaScript files that are loaded in a different mode (as opposed to scripts, which are loaded in the original way JavaScript worked). This different mode is necessary because modules have very different semantics than scripts:\nModule code automatically runs in strict mode, and there\u0026rsquo;s no way to opt-out of strict mode. Variables created in the top level of a module aren\u0026rsquo;t automatically added to the shared global scope. They exist only within the top-level scope of the module. The value of this in the top level of a module is undefined. Modules don\u0026rsquo;t allow HTML-style comments within code (a leftover feature from JavaScript\u0026rsquo;s early browser days). Modules must export anything that should be available to code outside of the module. Modules may import bindings from other modules. These differences may seem small at first glance, but they represent a significant change in how JavaScript code is loaded and evaluated, which I will discuss over the course of this chapter. The real power of modules is the ability to export and import only bindings you need, rather than everything in a file. A good understanding of exporting and importing is fundamental to understanding how modules differ from scripts.\nBasic Exporting You can use the export keyword to expose parts of published code to other modules. In the simplest case, you can place export in front of any variable, function, or class declaration to export it from the module, like this:\n// export data export var color = \u0026#34;red\u0026#34;; export let name = \u0026#34;Nicholas\u0026#34;; export const magicNumber = 7; // export function export function sum(num1, num2) { return num1 + num1; } // export class export class Rectangle { constructor(length, width) { this.length = length; this.width = width; } } // this function is private to the module function subtract(num1, num2) { return num1 - num2; } // define a function... function multiply(num1, num2) { return num1 * num2; } // ...and then export it later export { multiply };\rThere are a few things to notice in this example. First, apart from the export keyword, every declaration is exactly the same as it would be otherwise. Each exported function or class also has a name; that\u0026rsquo;s because exported function and class declarations require a name. You can\u0026rsquo;t export anonymous functions or classes using this syntax unless you use the default keyword (discussed in detail in the \u0026ldquo;Default Values in Modules\u0026rdquo; section).\nNext, consider the multiply() function, which isn\u0026rsquo;t exported when it\u0026rsquo;s defined. That works because you need not always export a declaration: you can also export references. Finally, notice that this example doesn\u0026rsquo;t export the subtract() function. That function won\u0026rsquo;t be accessible from outside this module because any variables, functions, or classes that are not explicitly exported remain private to the module.\nBasic Importing Once you have a module with exports, you can access the functionality in another module by using the import keyword. The two parts of an import statement are the identifiers you\u0026rsquo;re importing and the module from which those identifiers should be imported. This is the statement\u0026rsquo;s basic form:\nimport { identifier1, identifier2 } from \u0026#34;./example.js\u0026#34;;\rThe curly braces after import indicate the bindings to import from a given module. The keyword from indicates the module from which to import the given binding. The module is specified by a string representing the path to the module (called the module specifier). Browsers use the same path format you might pass to the \u0026lt;script\u0026gt; element, which means you must include a file extension. Node.js, on the other hand, follows its traditional convention of differentiating between local files and packages based on a filesystem prefix. For example, example would be a package and ./example.js would be a local file.\nI\u0026gt; The list of bindings to import looks similar to a destructured object, but it isn\u0026rsquo;t one.\nWhen importing a binding from a module, the binding acts as if it were defined using const. That means you can\u0026rsquo;t define another variable with the same name (including importing another binding of the same name), use the identifier before the import statement, or change its value.\nImporting a Single Binding Suppose that the first example in the \u0026ldquo;Basic Exporting\u0026rdquo; section is in a module with the filename example.js. You can import and use bindings from that module in a number of ways. For instance, you can just import one identifier:\n// import just one import { sum } from \u0026#34;./example.js\u0026#34;; console.log(sum(1, 2)); // 3 sum = 1; // error Even though example.js exports more than just that one function this example imports only the sum() function. If you try to assign a new value to sum, the result is an error, as you can\u0026rsquo;t reassign imported bindings.\nW\u0026gt; Make sure to include /, ./, or ../ at the beginning of the file you\u0026rsquo;re importing for best compatibility across browsers and Node.js.\nImporting Multiple Bindings If you want to import multiple bindings from the example module, you can explicitly list them out as follows:\n// import multiple import { sum, multiply, magicNumber } from \u0026#34;./example.js\u0026#34;; console.log(sum(1, magicNumber)); // 8 console.log(multiply(1, 2)); // 2 Here, three bindings are imported from the example module: sum, multiply, and magicNumber. They are then used as if they were locally defined.\nImporting All of a Module There\u0026rsquo;s also a special case that allows you to import the entire module as a single object. All of the exports are then available on that object as properties. For example:\n// import everything import * as example from \u0026#34;./example.js\u0026#34;; console.log(example.sum(1, example.magicNumber)); // 8 console.log(example.multiply(1, 2)); // 2 In this code, all exported bindings in example.js are loaded into an object called example. The named exports (the sum() function, the multiple() function, and magicNumber) are then accessible as properties on example. This import format is called a namespace import because the example object doesn\u0026rsquo;t exist inside of the example.js file and is instead created to be used as a namespace object for all of the exported members of example.js.\nKeep in mind, however, that no matter how many times you use a module in import statements, the module will only be executed once. After the code to import the module executes, the instantiated module is kept in memory and reused whenever another import statement references it. Consider the following:\nimport { sum } from \u0026#34;./example.js\u0026#34;; import { multiply } from \u0026#34;./example.js\u0026#34;; import { magicNumber } from \u0026#34;./example.js\u0026#34;;\rEven though there are three import statements in this module, example.js will only be executed once. If other modules in the same application were to import bindings from example.js, those modules would use the same module instance this code uses.\nA\u0026gt; ### Module Syntax Limitations A\u0026gt; A\u0026gt; An important limitation of both export and import is that they must be used outside other statements and functions. For instance, this code will give a syntax error: A\u0026gt; A\u0026gt; js A\u0026gt; if (flag) { A\u0026gt; export flag; // syntax error A\u0026gt; } A\u0026gt; A\u0026gt;The export statement is inside an if statement, which isn\u0026rsquo;t allowed. Exports cannot be conditional or done dynamically in any way. One reason module syntax exists is to let the JavaScript engine staticly determine what will be exported. As such, you can only use export at the top-level of a module. A\u0026gt; A\u0026gt; Similarly, you can\u0026rsquo;t use import inside of a statement; you can only use it at the top-level. That means this code also gives a syntax error: A\u0026gt; A\u0026gt; js A\u0026gt; function tryImport() { A\u0026gt; import flag from \u0026quot;./example.js\u0026quot;; // syntax error A\u0026gt; } A\u0026gt; A\u0026gt; A\u0026gt; You can\u0026rsquo;t dynamically import bindings for the same reason you can\u0026rsquo;t dynamically export bindings. The export and import keywords are designed to be static so that tools like text editors can easily tell what information is available from a module.\nA Subtle Quirk of Imported Bindings ECMAScript 6\u0026rsquo;s import statements create read-only bindings to variables, functions, and classes rather than simply referencing the original bindings like normal variables. Even though the module that imports the binding can\u0026rsquo;t change its value, the module that exports that identifier can. For example, suppose you want to use this module:\nexport var name = \u0026#34;Nicholas\u0026#34;; export function setName(newName) { name = newName; }\rWhen you import those two bindings, the setName() function can change the value of name:\nimport { name, setName } from \u0026#34;./example.js\u0026#34;; console.log(name); // \u0026#34;Nicholas\u0026#34; setName(\u0026#34;Greg\u0026#34;); console.log(name); // \u0026#34;Greg\u0026#34; name = \u0026#34;Nicholas\u0026#34;; // error The call to setName(\u0026quot;Greg\u0026quot;) goes back into the module from which setName() was exported and executes there, setting name to \u0026quot;Greg\u0026quot; instead. Note this change is automatically reflected on the imported name binding. That\u0026rsquo;s because name is the local name for the exported name identifier. The name used in the code above and the name used in the module being imported from aren\u0026rsquo;t the same.\nRenaming Exports and Imports Sometimes, you may not want to use the original name of a variable, function, or class you\u0026rsquo;ve imported from a module. Fortunately, you can change the name of an export both during the export and during the import.\nIn the first case, suppose you have a function that you\u0026rsquo;d like to export with a different name. You can use the as keyword to specify the name that the function should be known as outside of the module:\nfunction sum(num1, num2) { return num1 + num2; } export { sum as add };\rHere, the sum() function (sum is the local name) is exported as add() (add is the exported name). That means when another module wants to import this function, it will have to use the name add instead:\nimport { add } from \u0026#34;./example.js\u0026#34;;\rIf the module importing the function wants to use a different name, it can also use as:\nimport { add as sum } from \u0026#34;./example.js\u0026#34;; console.log(typeof add); // \u0026#34;undefined\u0026#34; console.log(sum(1, 2)); // 3 This code imports the add() function using the import name and renames it to sum() (the local name). That means there is no identifier named add in this module.\nDefault Values in Modules The module syntax is really optimized for exporting and importing default values from modules, as this pattern was quite common in other module systems, like CommonJS (another JavaScript module format popularized by Node.js). The default value for a module is a single variable, function, or class as specified by the default keyword, and you can only set one default export per module. Using the default keyword with multiple exports is a syntax error.\nExporting Default Values Here\u0026rsquo;s a simple example that uses the default keyword:\nexport default function (num1, num2) { return num1 + num2; }\rThis module exports a function as its default value. The default keyword indicates that this is a default export. The function doesn\u0026rsquo;t require a name because the module itself represents the function.\nYou can also specify an identifier as the default export by placing it after export default, such as:\nfunction sum(num1, num2) { return num1 + num2; } export default sum;\rHere, the sum() function is defined first and later exported as the default value of the module. You may want to choose this approach if the default value needs to be calculated.\nA third way to specify an identifier as the default export is by using the renaming syntax as follows:\nfunction sum(num1, num2) { return num1 + num2; } export { sum as default };\rThe identifier default has special meaning in a renaming export and indicates a value should be the default for the module. Because default is a keyword in JavaScript, it can\u0026rsquo;t be used for a variable, function, or class name (it can be used as a property name). So the use of default to rename an export is a special case to create a consistency with how non-default exports are defined. This syntax is useful if you want to use a single export statement to specify multiple exports, including the default, at once.\nImporting Default Values You can import a default value from a module using the following syntax:\n// import the default import sum from \u0026#34;./example.js\u0026#34;; console.log(sum(1, 2)); // 3 This import statement imports the default from the module example.js. Note that no curly braces are used, unlike you\u0026rsquo;d see in a non-default import. The local name sum is used to represent whatever default function the module exports. This syntax is the cleanest, and the creators of ECMAScript 6 expect it to be the dominant form of import on the Web, allowing you to use an already-existing object.\nFor modules that export both a default and one or more non-default bindings, you can import all exported bindings with one statement. For instance, suppose you have this module:\nexport let color = \u0026#34;red\u0026#34;; export default function (num1, num2) { return num1 + num2; }\rYou can import both color and the default function using the following import statement:\nimport sum, { color } from \u0026#34;./example.js\u0026#34;; console.log(sum(1, 2)); // 3 console.log(color); // \u0026#34;red\u0026#34; The comma separates the default local name from the non-defaults, which are also surrounded by curly braces. Keep in mind that the default must come before the non-defaults in the import statement.\nAs with exporting defaults, you can import defaults with the renaming syntax, too:\n// equivalent to previous example import { default as sum, color } from \u0026#34;example\u0026#34;; console.log(sum(1, 2)); // 3 console.log(color); // \u0026#34;red\u0026#34; In this code, the default export (default) is renamed to sum and the additional color export is also imported. This example is equivalent to the preceding example.\nRe-exporting a Binding There may be a time when you\u0026rsquo;d like to re-export something that your module has imported (for instance, if you\u0026rsquo;re creating a library out of several small modules). You can re-export an imported value with the patterns already discussed in this chapter as follows:\nimport { sum } from \u0026#34;./example.js\u0026#34;; export { sum };\rThat works, but a single statement can also do the same thing:\nexport { sum } from \u0026#34;./example.js\u0026#34;;\rThis form of export looks into the specified module for the declaration of sum and then exports it. Of course, you can also choose to export a different name for the same value:\nexport { sum as add } from \u0026#34;./example.js\u0026#34;;\rHere, sum is imported from \u0026quot;./example.js\u0026quot; and then exported as add.\nIf you\u0026rsquo;d like to export everything from another module, you can use the * pattern:\nexport * from \u0026#34;./example.js\u0026#34;;\rWhen you export everything, you are including all named exports and excluding any default export. For instance, if example.js has a default export, you would need to import it explicitly and then export it explicitly.\nImporting Without Bindings Some modules may not export anything, and instead, only make modifications to objects in the global scope. Even though top-level variables, functions, and classes inside modules don\u0026rsquo;t automatically end up in the global scope, that doesn\u0026rsquo;t mean modules cannot access the global scope. The shared definitions of built-in objects such as Array and Object are accessible inside a module and changes to those objects will be reflected in other modules.\nFor instance, if you want to add a pushAll() method to all arrays, you might define a module like this:\n// module code without exports or imports Array.prototype.pushAll = function (items) { // items must be an array if (!Array.isArray(items)) { throw new TypeError(\u0026#34;Argument must be an array.\u0026#34;); } // use built-in push() and spread operator return this.push(...items); };\rThis is a valid module even though there are no exports or imports. This code can be used both as a module and a script. Since it doesn\u0026rsquo;t export anything, you can use a simplified import to execute the module code without importing any bindings:\nimport \u0026#34;./example.js\u0026#34;; let colors = [\u0026#34;red\u0026#34;, \u0026#34;green\u0026#34;, \u0026#34;blue\u0026#34;]; let items = []; items.pushAll(colors);\rThis code imports and executes the module containing the pushAll() method, so pushAll() is added to the array prototype. That means pushAll() is now available for use on all arrays inside of this module.\nI\u0026gt; Imports without bindings are most likely to be used to create polyfills and shims.\nLoading Modules While ECMAScript 6 defines the syntax for modules, it doesn\u0026rsquo;t define how to load them. This is part of the complexity of a specification that\u0026rsquo;s supposed to be agnostic to implementation environments. Rather than trying to create a single specification that would work for all JavaScript environments, ECMAScript 6 specifies only the syntax and abstracts out the loading mechanism to an undefined internal operation called HostResolveImportedModule. Web browsers and Node.js are left to decide how to implement HostResolveImportedModule in a way that makes sense for their respective environments.\nUsing Modules in Web Browsers Even before ECMAScript 6, web browsers had multiple ways of including JavaScript in an web application. Those script loading options are:\nLoading JavaScript code files using the \u0026lt;script\u0026gt; element with the src attribute specifying a location from which to load the code. Embedding JavaScript code inline using the \u0026lt;script\u0026gt; element without the src attribute. Loading JavaScript code files to execute as workers (such as a web worker or service worker). In order to fully support modules, web browsers had to update each of these mechanisms. These details are defined in the HTML specification, and I\u0026rsquo;ll summarize them in this section.\nUsing Modules With \u0026lt;script\u0026gt; The default behavior of the \u0026lt;script\u0026gt; element is to load JavaScript files as scripts (not modules). This happens when the type attribute is missing or when the type attribute contains a JavaScript content type (such as \u0026quot;text/javascript\u0026quot;). The \u0026lt;script\u0026gt; element can then execute inline code or load the file specified in src. To support modules, the \u0026quot;module\u0026quot; value was added as a type option. Setting type to \u0026quot;module\u0026quot; tells the browser to load any inline code or code contained in the file specified by src as a module instead of a script. Here\u0026rsquo;s a simple example:\n\u0026lt;!-- load a module JavaScript file --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;module.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- include a module inline --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { sum } from \u0026#34;./example.js\u0026#34;; let result = sum(1, 2); \u0026lt;/script\u0026gt;\rThe first \u0026lt;script\u0026gt; element in this example loads an external module file using the src attribute. The only difference from loading a script is that \u0026quot;module\u0026quot; is given as the type. The second \u0026lt;script\u0026gt; element contains a module that is embedded directly in the web page. The variable result is not exposed globally because it exists only within the module (as defined by the \u0026lt;script\u0026gt; element) and is therefore not added to window as a property.\nAs you can see, including modules in web pages is fairly simple and similar to including scripts. However, there are some differences in how modules are loaded.\nI\u0026gt; You may have noticed that \u0026quot;module\u0026quot; is not a content type like the \u0026quot;text/javascript\u0026quot; type. Module JavaScript files are served with the same content type as script JavaScript files, so it\u0026rsquo;s not possible to differentiate solely based on content type. Also, browsers ignore \u0026lt;script\u0026gt; elements when the type is unrecognized, so browsers that don\u0026rsquo;t support modules will automatically ignore the \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; line, providing good backwards-compatibility.\nModule Loading Sequence in Web Browsers Modules are unique in that, unlike scripts, they may use import to specify that other files must be loaded to execute correctly. To support that functionality, \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; always acts as if the defer attribute is applied.\nThe defer attribute is optional for loading script files but is always applied for loading module files. The module file begins downloading as soon as the HTML parser encounters \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; with a src attribute but doesn\u0026rsquo;t execute until after the document has been completely parsed. Modules are also executed in the order in which they appear in the HTML file. That means the first \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; is always guaranteed to execute before the second, even if one module contains inline code instead of specifying src. For example:\n\u0026lt;!-- this will execute first --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;module1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;!-- this will execute second --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34;\u0026gt; import { sum } from \u0026#34;./example.js\u0026#34;; let result = sum(1, 2); \u0026lt;/script\u0026gt; \u0026lt;!-- this will execute third --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; src=\u0026#34;module2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\rThese three \u0026lt;script\u0026gt; elements execute in the order they are specified, so module1.js is guaranteed to execute before the inline module, and the inline module is guaranteed to execute before module2.js.\nEach module may import from one or more other modules, which complicates matters. That\u0026rsquo;s why modules are parsed completely first to identify all import statements. Each import statement then triggers a fetch (either from the network or from the cache), and no module is executed until all import resources have first been loaded and executed.\nAll modules, both those explicitly included using \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; and those implicitly included using import, are loaded and executed in order. In the preceding example, the complete loading sequence is:\nDownload and parse module1.js. Recursively download and parse import resources in module1.js. Parse the inline module. Recursively download and parse import resources in the inline module. Download and parse module2.js. Recursively download and parse import resources in module2.js Once loading is complete, nothing is executed until after the document has been completely parsed. After document parsing completes, the following actions happen:\nRecursively execute import resources for module1.js. Execute module1.js. Recursively execute import resources for the inline module. Execute the inline module. Recursively execute import resources for module2.js. Execute module2.js. Notice that the inline module acts like the other two modules except that the code doesn\u0026rsquo;t have to be downloaded first. Otherwise, the sequence of loading import resources and executing modules is exactly the same.\nI\u0026gt; The defer attribute is ignored on \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; because it already behaves as if defer is applied.\nAsynchronous Module Loading in Web Browsers You may already be familiar with the async attribute on the \u0026lt;script\u0026gt; element. When used with scripts, async causes the script file to be executed as soon as the file is completely downloaded and parsed. The order of async scripts in the document doesn\u0026rsquo;t affect the order in which the scripts are executed, though. The scripts are always executed as soon as they finish downloading without waiting for the containing document to finish parsing.\nThe async attribute can be applied to modules as well. Using async on \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; causes the module to execute in a manner similar to a script. The only difference is that all import resources for the module are downloaded before the module itself is executed. That guarantees all resources the module needs to function will be downloaded before the module executes; you just can\u0026rsquo;t guarantee when the module will execute. Consider the following code:\n\u0026lt;!-- no guarantee which one of these will execute first --\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; async src=\u0026#34;module1.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script type=\u0026#34;module\u0026#34; async src=\u0026#34;module2.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;\rIn this example, there are two module files loaded asynchronously. It\u0026rsquo;s not possible to tell which module will execute first simply by looking at this code. If module1.js finishes downloading first (including all of its import resources), then it will execute first. If module2.js finishes downloading first, then that module will execute first instead.\nLoading Modules as Workers Workers, such as web workers and service workers, execute JavaScript code outside of the web page context. Creating a new worker involves creating a new instance Worker (or another class) and passing in the location of JavaScript file. The default loading mechanism is to load files as scripts, like this:\n// load script.js as a script let worker = new Worker(\u0026#34;script.js\u0026#34;);\rTo support loading modules, the developers of the HTML standard added a second argument to these constructors. The second argument is an object with a type property with a default value of \u0026quot;script\u0026quot;. You can set type to \u0026quot;module\u0026quot; in order to load module files:\n// load module.js as a module let worker = new Worker(\u0026#34;module.js\u0026#34;, { type: \u0026#34;module\u0026#34; });\rThis example loads module.js as a module instead of a script by passing a second argument with \u0026quot;module\u0026quot; as the type property\u0026rsquo;s value. (The type property is meant to mimic how the type attribute of \u0026lt;script\u0026gt; differentiates modules and scripts.) The second argument is supported for all worker types in the browser.\nWorker modules are generally the same as worker scripts, but there are a couple of exceptions. First, worker scripts are limited to being loaded from the same origin as the web page in which they are referenced, but worker modules aren\u0026rsquo;t quite as limited. Although worker modules have the same default restriction, they can also load files that have appropriate Cross-Origin Resource Sharing (CORS) headers to allow access. Second, while a worker script can use the self.importScripts() method to load additional scripts into the worker, self.importScripts() always fails on worker modules because you should use import instead.\nBrowser Module Specifier Resolution All of the examples to this point in the chapter have used a relative module specifier path such as \u0026quot;./example.js\u0026quot;. Browsers require module specifiers to be in one of the following formats:\nBegin with / to resolve from the root directory Begin with ./ to resolve from the current directory Begin with ../ to resolve from the parent directory URL format For example, suppose you have a module file located at https://www.example.com/modules/module.js that contains the following code:\n// imports from https://www.example.com/modules/example1.js import { first } from \u0026#34;./example1.js\u0026#34;; // imports from https://www.example.com/example2.js import { second } from \u0026#34;../example2.js\u0026#34;; // imports from https://www.example.com/example3.js import { third } from \u0026#34;/example3.js\u0026#34;; // imports from https://www2.example.com/example4.js import { fourth } from \u0026#34;https://www2.example.com/example4.js\u0026#34;;\rEach of the module specifiers in this example is valid for use in a browser, including the complete URL in the final line (you\u0026rsquo;d need to be sure ww2.example.com has properly configured its Cross-Origin Resource Sharing (CORS) headers to allow cross-domain loading). These are the only module specifier formats that browsers can resolve by default (though the not-yet-complete module loader specification will provide ways to resolve other formats). That means some normal looking module specifiers are actually invalid in browsers and will result in an error, such as:\n// invalid - doesn\u0026#39;t begin with /, ./, or ../ import { first } from \u0026#34;example.js\u0026#34;; // invalid - doesn\u0026#39;t begin with /, ./, or ../ import { second } from \u0026#34;example/index.js\u0026#34;;\rEach of these module specifiers cannot be loaded by the browser. The two module specifiers are in an invalid format (missing the correct beginning characters) even though both will work when used as the value of src in a \u0026lt;script\u0026gt; tag. This is an intentional difference in behavior between \u0026lt;script\u0026gt; and import.\nSummary ECMAScript 6 adds modules to the language as a way to package up and encapsulate functionality. Modules behave differently than scripts, as they don\u0026rsquo;t modify the global scope with their top-level variables, functions, and classes, and this is undefined. To achieve that behavior, modules are loaded using a different mode.\nYou must export any functionality you\u0026rsquo;d like to make available to consumers of a module. Variables, functions, and classes can all be exported, and there is also one default export allowed per module. After exporting, another module can import all or some of the exported names. These names act as if defined by let and operate as block bindings that can\u0026rsquo;t be redeclared in the same module.\nModules need not export anything if they are manipulating something in the global scope. You can actually import from such a module without introducing any bindings into the module scope.\nBecause modules must run in a different mode, browsers introduced \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; to signal that the source file or inline code should be executed as a module. Module files loaded with \u0026lt;script type=\u0026quot;module\u0026quot;\u0026gt; are loaded as if the defer attribute is applied to them. Modules are also executed in the order in which they appear in the containing document once the document is fully parsed.\n","date":"0001-01-01","id":45,"permalink":"/es6/13-modules/","summary":"\u003cp\u003eJavaScript\u0026rsquo;s \u0026ldquo;shared everything\u0026rdquo; approach to loading code is one of the most error-prone and confusing aspects of the language. Other languages use concepts such as packages to define code scope, but before ECMAScript 6, everything defined in every JavaScript file of an application shared one global scope. As web applications became more complex and started using even more JavaScript code, that approach caused problems like naming collisions and security concerns. One goal of ECMAScript 6 was to solve the scope problem and bring some order to JavaScript applications. That\u0026rsquo;s where modules come in.\u003c/p\u003e","tags":[],"title":"13 Encapsulating Code With Modules"},{"content":"Solution const reverseString = (str) =\u0026gt; str.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;); console.log(reverseString(\u0026#34;programming\u0026#34;)); // Output: \u0026#34;gnimmargorp\u0026#34; ","date":"0001-01-01","id":46,"permalink":"/prep-1/prep-1/11-to-20/13.-reversing-a-string/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ereverseString\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverseString\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;programming\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: \u0026#34;gnimmargorp\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"13. Reversing a String"},{"content":"Solution const findLargestSmallest = (array) =\u0026gt; ({ Largest: Math.max(...array), Smallest: Math.min(...array) }); console.log(findLargestSmallest([4, 7, 1, 8, 5])); // Output: { Largest: 8, Smallest: 1 } ","date":"0001-01-01","id":47,"permalink":"/prep-1/prep-1/11-to-20/14.-finding-the-largest-and-smallest-numbers-in-an-array/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efindLargestSmallest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e({\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eLargest\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emax\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003eSmallest\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emin\u003c/span\u003e\u003cspan class=\"p\"\u003e(...\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efindLargestSmallest\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: { Largest: 8, Smallest: 1 }\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"14. Finding the Largest and Smallest Numbers in an Array"},{"content":"Solution const sortArray = (array) =\u0026gt; array.slice().sort((a, b) =\u0026gt; a - b); console.log(sortArray([3, 1, 4, 1, 5, 9])); // Output: [1, 1, 3, 4, 5, 9] ","date":"0001-01-01","id":48,"permalink":"/prep-1/prep-1/11-to-20/15.-sorting-an-array/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esortArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esortArray\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: [1, 1, 3, 4, 5, 9]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"15. Sorting an Array"},{"content":"Solution const sumArray = (array) =\u0026gt; array.reduce((sum, num) =\u0026gt; sum + num, 0); console.log(sumArray([1, 2, 3, 4, 5])); // Output: 15 ","date":"0001-01-01","id":49,"permalink":"/prep-1/prep-1/11-to-20/16.-finding-the-sum-of-elements-in-an-array/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumArray\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e]));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: 15\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"16. Finding the Sum of Elements in an Array"},{"content":"Solution const armstrongNumbersInRange = (start, end) =\u0026gt; { const isArmstrong = (num) =\u0026gt; num === [...num.toString()].reduce((sum, digit) =\u0026gt; sum + Math.pow(digit, num.toString().length), 0); return Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start).filter(isArmstrong); }; console.log(armstrongNumbersInRange(1, 500)); // [1, 153, 370, 371, 407] // 18. Generating Multiplication Tables const multiplicationTable = (num) =\u0026gt; { for (let i = 1; i \u0026lt;= 5; i++) { console.log(`${num} x ${i} = ${num * i}`); } }; multiplicationTable(4); // 19. Finding Prime Numbers in a Range const primesInRange = (start, end) =\u0026gt; { const isPrime = (num) =\u0026gt; num \u0026gt; 1 \u0026amp;\u0026amp; Array.from({ length: Math.sqrt(num) }, (_, i) =\u0026gt; i + 2).every((i) =\u0026gt; num % i !== 0); return Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start).filter(isPrime); }; console.log(primesInRange(10, 30)); // [11, 13, 17, 19, 23, 29] // 20. Checking for Perfect Numbers const isPerfectNumber = (num) =\u0026gt; Array.from({ length: num - 1 }, (_, i) =\u0026gt; i + 1) .filter((i) =\u0026gt; num % i === 0) .reduce((a, b) =\u0026gt; a + b, 0) === num; console.log(isPerfectNumber(28) ? \u0026#34;Perfect Number\u0026#34; : \u0026#34;Not Perfect\u0026#34;); // Perfect Number ","date":"0001-01-01","id":50,"permalink":"/prep-1/prep-1/11-to-20/17.-checking-for-armstrong-numbers-in-a-range/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003earmstrongNumbersInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisArmstrong\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisArmstrong\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earmstrongNumbersInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e500\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [1, 153, 370, 371, 407]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 18. Generating Multiplication Tables\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e x \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e = \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 19. Finding Prime Numbers in a Range\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimesInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimesInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [11, 13, 17, 19, 23, 29]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// 20. Checking for Perfect Numbers\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e28\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Perfect Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Perfect\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Perfect Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"17. Checking for Armstrong Numbers in a Range"},{"content":"Solution const multiplicationTable = (num) =\u0026gt; { for (let i = 1; i \u0026lt;= 5; i++) { console.log(`${num} x ${i} = ${num * i}`); } }; multiplicationTable(4);\r","date":"0001-01-01","id":51,"permalink":"/prep-1/prep-1/11-to-20/18.-generating-multiplication-tables/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e x \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e = \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003emultiplicationTable\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"18. Generating Multiplication Tables"},{"content":"Solution const primesInRange = (start, end) =\u0026gt; { const isPrime = (num) =\u0026gt; num \u0026gt; 1 \u0026amp;\u0026amp; Array.from({ length: Math.sqrt(num) }, (_, i) =\u0026gt; i + 2).every((i) =\u0026gt; num % i !== 0); return Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start).filter(isPrime); }; console.log(primesInRange(10, 30)); // [11, 13, 17, 19, 23, 29] ","date":"0001-01-01","id":52,"permalink":"/prep-1/prep-1/11-to-20/19.-finding-prime-numbers-in-a-range/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimesInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimesInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e30\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [11, 13, 17, 19, 23, 29]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"19. Finding Prime Numbers in a Range"},{"content":"Difficulty: Easy\nTopics: Basic Programming, Number Theory\nDescription: Write a program to determine if a number is prime.\nExample: Input: number = 7 Output: Prime Explanation: 7 has no divisors other than 1 and itself, so it is a prime number.\nSolution const isPrime = (number) =\u0026gt; { if (number \u0026lt;= 1) return \u0026#34;Not Prime\u0026#34;; for (let i = 2; i \u0026lt;= Math.sqrt(number); i++) { if (number % i === 0) return \u0026#34;Not Prime\u0026#34;; } return \u0026#34;Prime\u0026#34;; }; console.log(isPrime(7)); // Output: Prime ","date":"0001-01-01","id":53,"permalink":"/prep-1/prep-1/1-to-10/2.-checking-for-prime-numbers/","summary":"\u003cp\u003e\u003cstrong\u003eDifficulty\u003c/strong\u003e: Easy\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eTopics\u003c/strong\u003e: Basic Programming, Number Theory\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: Write a program to determine if a number is prime.\u003c/p\u003e\n\u003ch3 id=\"example\"\u003eExample:\u003c/h3\u003e\n\u003cp\u003eInput: \u003ccode\u003enumber = 7\u003c/code\u003e\nOutput: \u003ccode\u003ePrime\u003c/code\u003e\nExplanation: 7 has no divisors other than 1 and itself, so it is a prime number.\u003c/p\u003e","tags":[],"title":"2. Checking for Prime Numbers"},{"content":"Solution const isPerfectNumber = (num) =\u0026gt; Array.from({ length: num - 1 }, (_, i) =\u0026gt; i + 1) .filter((i) =\u0026gt; num % i === 0) .reduce((a, b) =\u0026gt; a + b, 0) === num; console.log(isPerfectNumber(28) ? \u0026#34;Perfect Number\u0026#34; : \u0026#34;Not Perfect\u0026#34;); // Perfect Number ","date":"0001-01-01","id":54,"permalink":"/prep-1/prep-1/11-to-20/20.-checking-for-perfect-numbers/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPerfectNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e28\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Perfect Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Perfect\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Perfect Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"20. Checking for Perfect Numbers"},{"content":"Solution const sumEvenNumbersInRange = (start, end) =\u0026gt; Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start) .filter((n) =\u0026gt; n % 2 === 0) .reduce((a, b) =\u0026gt; a + b, 0); console.log(sumEvenNumbersInRange(1, 10)); // 30 ","date":"0001-01-01","id":55,"permalink":"/prep-1/prep-1/21-to-30/21.-sum-of-even-numbers-in-a-range/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumEvenNumbersInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumEvenNumbersInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 30\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"21. Sum of Even Numbers in a Range"},{"content":"Solution const sumOddNumbersInRange = (start, end) =\u0026gt; Array.from({ length: end - start + 1 }, (_, i) =\u0026gt; i + start) .filter((n) =\u0026gt; n % 2 !== 0) .reduce((a, b) =\u0026gt; a + b, 0); console.log(sumOddNumbersInRange(1, 10)); // 25 ","date":"0001-01-01","id":56,"permalink":"/prep-1/prep-1/21-to-30/22.-sum-of-odd-numbers-in-a-range/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOddNumbersInRange\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003eend\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estart\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOddNumbersInRange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 25\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"22. Sum of Odd Numbers in a Range"},{"content":"Solution const fibonacciAtPosition = (n) =\u0026gt; (n \u0026lt;= 1 ? n : fibonacciAtPosition(n - 1) + fibonacciAtPosition(n - 2)); console.log(fibonacciAtPosition(5)); // 5 ","date":"0001-01-01","id":57,"permalink":"/prep-1/prep-1/21-to-30/23.-fibonacci-number-at-specific-position/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efibonacciAtPosition\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"23. Fibonacci Number at Specific Position"},{"content":"Solution const primesLessThan = (limit) =\u0026gt; Array.from({ length: limit - 2 }, (_, i) =\u0026gt; i + 2).filter((isPrime) =\u0026gt; isPrime \u0026gt; 1 \u0026amp;\u0026amp; Array.from({ length: Math.sqrt(isPrime) }, (_, j) =\u0026gt; j + 2).every((k) =\u0026gt; isPrime % k !== 0)); console.log(primesLessThan(20)); // [2, 3, 5, 7, 11, 13, 17, 19] ","date":"0001-01-01","id":58,"permalink":"/prep-1/prep-1/21-to-30/24.-prime-numbers-less-than-given-number/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eprimesLessThan\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elimit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003elimit\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esqrt\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003eevery\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ek\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPrime\u003c/span\u003e \u003cspan class=\"o\"\u003e%\u003c/span\u003e \u003cspan class=\"nx\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eprimesLessThan\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e20\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [2, 3, 5, 7, 11, 13, 17, 19]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"24. Prime Numbers Less Than Given Number"},{"content":"Solution const countDigits = (num) =\u0026gt; num.toString().length; console.log(countDigits(12345)); // 5 ","date":"0001-01-01","id":59,"permalink":"/prep-1/prep-1/21-to-30/25.-number-of-digits-in-a-number/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ecountDigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ecountDigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e12345\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 5\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"25. Number of Digits in a Number"},{"content":"Solution const isNarcissistic = (num) =\u0026gt; num === [...num.toString()].reduce((sum, digit) =\u0026gt; sum + Math.pow(digit, num.toString().length), 0); console.log(isNarcissistic(153) ? \u0026#34;Narcissistic Number\u0026#34; : \u0026#34;Not Narcissistic\u0026#34;); // Narcissistic Number ","date":"0001-01-01","id":60,"permalink":"/prep-1/prep-1/21-to-30/26.-checking-if-a-number-is-narcissistic/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisNarcissistic\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisNarcissistic\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e153\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Narcissistic Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not Narcissistic\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Narcissistic Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"26. Checking if a Number is Narcissistic"},{"content":"Solution const numberPattern = (rows) =\u0026gt; { let count = 1; for (let i = 1; i \u0026lt;= rows; i++) { console.log([...Array(i)].map(() =\u0026gt; count++).join(\u0026#34; \u0026#34;)); } }; numberPattern(3);\r","date":"0001-01-01","id":61,"permalink":"/prep-1/prep-1/21-to-30/27.-generating-a-pattern-of-numbers/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003enumberPattern\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003erows\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e([...\u003c/span\u003e\u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)].\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e(()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ecount\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003enumberPattern\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"27. Generating a Pattern of Numbers"},{"content":"Solution const sumOfFactorialDigits = (num) =\u0026gt; { const factorial = (n) =\u0026gt; (n \u0026lt;= 1 ? 1 : n * factorial(n - 1)); return [...factorial(num).toString()].reduce((sum, digit) =\u0026gt; sum + +digit, 0); }; console.log(sumOfFactorialDigits(4)); // 6 ","date":"0001-01-01","id":62,"permalink":"/prep-1/prep-1/21-to-30/28.-sum-of-the-digits-of-the-factorial-of-a-number/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumOfFactorialDigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()].\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumOfFactorialDigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 6\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"28. Sum of the Digits of the Factorial of a Number"},{"content":"Solution const largestPalindrome = (str) =\u0026gt; { let longest = \u0026#34;\u0026#34;; for (let i = 0; i \u0026lt; str.length; i++) { for (let j = i + 1; j \u0026lt;= str.length; j++) { const subStr = str.slice(i, j); if (subStr === subStr.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;) \u0026amp;\u0026amp; subStr.length \u0026gt; longest.length) { longest = subStr; } } } return longest; }; console.log(largestPalindrome(\u0026#34;babad\u0026#34;)); // \u0026#34;bab\u0026#34; or \u0026#34;aba\u0026#34; ","date":"0001-01-01","id":63,"permalink":"/prep-1/prep-1/21-to-30/29.-largest-palindrome-in-a-string/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003elargestPalindrome\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eslice\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003esubStr\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003elongest\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elargestPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;babad\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// \u0026#34;bab\u0026#34; or \u0026#34;aba\u0026#34;\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"29. Largest Palindrome in a String"},{"content":"Difficulty Easy Topics Basic Programming Date Handling Description Write a program to check if a given year is a leap year.\nExample Input: year = 2020 Output: Leap Year Explanation: 2020 is divisible by 4 but not by 100, or it is divisible by 400, so it is a leap year.\nSolution: const isLeapYear = (year) =\u0026gt; ((year % 4 === 0 \u0026amp;\u0026amp; year % 100 !== 0) || year % 400 === 0 ? \u0026#34;Leap Year\u0026#34; : \u0026#34;Not a Leap Year\u0026#34;); console.log(isLeapYear(2020)); // Output: Leap Year ","date":"0001-01-01","id":64,"permalink":"/prep-1/prep-1/1-to-10/3.-validating-leap-years/","summary":"\u003ch3 id=\"difficulty\"\u003eDifficulty\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eEasy\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"topics\"\u003eTopics\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eBasic Programming\u003c/li\u003e\n\u003cli\u003eDate Handling\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eWrite a program to check if a given year is a leap year.\u003c/p\u003e","tags":[],"title":"3. Validating Leap Years"},{"content":"Solution const missingNumbers = (sequence, n) =\u0026gt; Array.from({ length: n }, (_, i) =\u0026gt; i + 1).filter((num) =\u0026gt; !sequence.includes(num)); console.log(missingNumbers([1, 2, 4, 5], 5)); // [3] ","date":"0001-01-01","id":65,"permalink":"/prep-1/prep-1/21-to-30/30.-finding-missing-numbers-in-a-sequence/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003emissingNumbers\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nb\"\u003eArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efrom\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"nx\"\u003en\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003e_\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"o\"\u003e!\u003c/span\u003e\u003cspan class=\"nx\"\u003esequence\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eincludes\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enum\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003emissingNumbers\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// [3]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"30. Finding Missing Numbers in a Sequence"},{"content":"","date":"0001-01-01","id":66,"permalink":"/360-whims/","summary":"","tags":[],"title":"360-whims"},{"content":"4. Calculating Armstrong Numbers const isArmstrongNumber = (number) =\u0026gt; { const digits = number.toString().split(\u0026#34;\u0026#34;); const sum = digits.reduce((acc, digit) =\u0026gt; acc + Math.pow(Number(digit), digits.length), 0); return sum === number ? \u0026#34;Armstrong Number\u0026#34; : \u0026#34;Not an Armstrong Number\u0026#34;; }; console.log(isArmstrongNumber(153)); // Output: Armstrong Number ","date":"0001-01-01","id":67,"permalink":"/prep-1/prep-1/1-to-10/4.-calculating-armstrong-numbers/","summary":"\u003ch3 id=\"4-calculating-armstrong-numbers\"\u003e4. \u003cstrong\u003eCalculating Armstrong Numbers\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisArmstrongNumber\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eacc\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eacc\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eMath\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epow\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"nx\"\u003edigits\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Armstrong Number\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not an Armstrong Number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisArmstrongNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e153\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Armstrong Number\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"4. Calculating Armstrong Numbers"},{"content":"5. Generating the Fibonacci Series const generateFibonacci = (limit) =\u0026gt; { const fib = [0, 1]; let next = fib[0] + fib[1]; while (next \u0026lt;= limit) { fib.push(next); next = fib[fib.length - 1] + fib[fib.length - 2]; } return fib; }; console.log(generateFibonacci(10)); // Output: [0, 1, 1, 2, 3, 5, 8] ","date":"0001-01-01","id":68,"permalink":"/prep-1/prep-1/1-to-10/5.-generating-the-fibonacci-series/","summary":"\u003ch3 id=\"5-generating-the-fibonacci-series\"\u003e5. \u003cstrong\u003eGenerating the Fibonacci Series\u003c/strong\u003e\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egenerateFibonacci\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003elimit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003elimit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enext\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003enext\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003efib\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003egenerateFibonacci\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: [0, 1, 1, 2, 3, 5, 8]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"5. Generating the Fibonacci Series"},{"content":"\rconst isPalindrome = (input) =\u0026gt; { const str = input.toString(); return str === str.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;) ? \u0026#34;Palindrome\u0026#34; : \u0026#34;Not a Palindrome\u0026#34;; }; console.log(isPalindrome(\u0026#34;radar\u0026#34;)); // Output: Palindrome ","date":"0001-01-01","id":69,"permalink":"/prep-1/prep-1/1-to-10/6.-identifying-palindromes/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eisPalindrome\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003estr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e).\u003c/span\u003e\u003cspan class=\"nx\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e().\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Palindrome\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Not a Palindrome\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eisPalindrome\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;radar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: Palindrome\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"6. Identifying Palindromes"},{"content":"\r// pyramid star pattern function generateStarPattern(patternType, height) { if (patternType === \u0026#34;pyramid\u0026#34;) { for (let i = 1; i \u0026lt;= height; i++) { const spaces = \u0026#34; \u0026#34;.repeat(height - i); // Leading spaces const stars = \u0026#34;*\u0026#34;.repeat(2 * i - 1); // Stars in the row console.log(spaces + stars); } } else { console.log(\u0026#34;Pattern type not supported.\u0026#34;); } } const patternType = \u0026#34;pyramid\u0026#34;; const height = 5; generateStarPattern(patternType, height);\rExplanation:\nSpaces: For each row, we calculate the number of leading spaces using \u0026quot; \u0026quot;.repeat(height - i), which decreases as we go down. Stars: For each row, the number of stars follows the formula 2 * i - 1. Combination: Combine the spaces and stars to form the row and print it. When run with patternType = \u0026quot;pyramid\u0026quot; and height = 5, the output will be:\n*\r***\r*****\r*******\r*********\r","date":"0001-01-01","id":70,"permalink":"/prep-1/prep-1/1-to-10/7.-crafting-star-patterns-pyramid/","summary":"\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// pyramid star pattern\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003egenerateStarPattern\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epatternType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epatternType\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pyramid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003espaces\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34; \u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erepeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Leading spaces\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003estars\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;*\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003erepeat\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e-\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Stars in the row\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e      \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003espaces\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003estars\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;Pattern type not supported.\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003epatternType\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;pyramid\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003egenerateStarPattern\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003epatternType\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003cp\u003e\u003cstrong\u003eExplanation\u003c/strong\u003e:\u003c/p\u003e","tags":[],"title":"7. Crafting Star Patterns (Pyramid)"},{"content":"Solution const factorial = (number) =\u0026gt; { let result = 1; for (let i = 2; i \u0026lt;= number; i++) { result *= i; } return result; }; console.log(factorial(5)); // Output: 120 ","date":"0001-01-01","id":71,"permalink":"/prep-1/prep-1/1-to-10/8.-finding-the-factorial-of-a-number/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;=\u003c/span\u003e \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e*=\u003c/span\u003e \u003cspan class=\"nx\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003efactorial\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: 120\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"8. Finding the Factorial of a Number"},{"content":"Solution const sumDigits = (number) =\u0026gt; number .toString() .split(\u0026#34;\u0026#34;) .reduce((sum, digit) =\u0026gt; sum + Number(digit), 0); console.log(sumDigits(1234)); // Output: 10 ","date":"0001-01-01","id":72,"permalink":"/prep-1/prep-1/1-to-10/9.-summing-digits-of-a-number/","summary":"\u003ch3 id=\"solution\"\u003eSolution\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003esumDigits\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003enumber\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etoString\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ereduce\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003esum\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003esum\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nb\"\u003eNumber\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003edigit\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003esumDigits\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1234\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e \u003cspan class=\"c1\"\u003e// Output: 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e","tags":[],"title":"9. Summing Digits of a Number"},{"content":"","date":"0001-01-01","id":73,"permalink":"/360-whims/formbuilder/","summary":"","tags":[],"title":"An overview of formbuilder module"},{"content":"Description The RBACComponent is a React component that utilizes Role-Based Access Control (RBAC) to conditionally render its children based on the user\u0026rsquo;s role. It checks if the user has the necessary permissions to view the component\u0026rsquo;s content.\nImports import { useRBAC } from \u0026#34;../../../../context/RBACContext\u0026#34;;\ruseRBAC: A custom hook that provides the current user\u0026rsquo;s role from the RBAC context. Type Definitions RBACComponentTypes type RBACComponentTypes = { children: any; whichRoles?: any; allRoles?: boolean; };\rchildren (any): The React nodes to be rendered if the user has the appropriate role. whichRoles (optional, any): An array of roles that are permitted to access the component. If provided, the user\u0026rsquo;s role must match one of these for the children to be rendered. allRoles (optional, boolean): A flag that, if set to true, allows the children to be rendered for all users regardless of their role. Component Definition export const RBACComponent = ({ children, whichRoles, allRoles = false, }: RBACComponentTypes) =\u0026gt; {\rParameters children: The content to be conditionally displayed based on user roles. whichRoles: An array of roles that are allowed to access the children. allRoles: A boolean flag indicating whether to render the children for all users. Usage const { userRole } = useRBAC();\rRetrieves the current user\u0026rsquo;s role from the RBAC context. Render Logic The component renders its children based on the following conditions:\nIf whichRoles is provided:\nChecks if the userRole is included in the whichRoles array. If true, it renders the children. If false, it renders nothing. If allRoles is true:\nRegardless of the user\u0026rsquo;s role, it renders the children. Example \u0026lt;RBACComponent whichRoles={[\u0026#34;facility_manager\u0026#34;, \u0026#34;doctor\u0026#34;]} allRoles={false}\u0026gt; \u0026lt;div\u0026gt;Protected Content\u0026lt;/div\u0026gt; \u0026lt;/RBACComponent\u0026gt;\rIn this example, the content \u0026ldquo;Protected Content\u0026rdquo; will only be displayed if the user\u0026rsquo;s role is either facility_manager or doctor. References: implementation:\nsrc\\common\\config\\rbac\\components\\RBACComponent.tsx\nconsumed at:\nsrc\\pages\\supply-chain\\indent\\indent-details\\IndentDetails.tsx\n","date":"0001-01-01","id":74,"permalink":"/360-whims/360-whims/rbac/an-overview-of-rbac-component/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eRBACComponent\u003c/code\u003e is a React component that utilizes Role-Based Access Control (RBAC) to conditionally render its children based on the user\u0026rsquo;s role. It checks if the user has the necessary permissions to view the component\u0026rsquo;s content.\u003c/p\u003e","tags":[],"title":"An overview of RBAC Component"},{"content":"technical documentation for RBAC RBAC at many level\nComponent level Feature level (toggle feature) Sidebar level get the logged in user\u0026rsquo;s\nrole and org plan ex: FM\naccess to the modules as well as its sub modules based on the current org plan ex: CHW Module , Track CHW Attendance\nhis abilities and ex: Read\nSidebar level - static items - dynamic items based on some special toggle feature which is specific to the facility / Org ex: Analytics\nComponent level ( Show and hide ) - we would need a inhouse custom component like ( from @casl/ability ) - base on the logged in user role\nFeature level -Based on their access to specific modules ex: doctor module is not visible for fm\nRBAC for custom roles\n1 Create a user group/cohart ex: operations group 2 Attach a policy to that group ex: operations policy\nOperations access terms / policy *And the terms like this, CHW Module - CHW Profile [Y]Create [Y]Read [N]Update [N]Delete\n- Track CHW Attendance\r[N]Create [Y]Read [N]Update [N]Delete\r3 Add a user to a operations group ex: user rahul,rakshith is added to the group\nBy default user inherits the abilites/properties of the cohert he is added to Create a Policy 1 Show all modules and select the modules which needs to be added to a cohart Ex 1 CHW Module - CHW Profile - Track CHW Attendance\npath src/rbac\nsidebar/route level // src\\common\\config\\routing\\RoutesConfig.ts import { allRoles, permittedRoles } from \u0026#34;../rbac/types/rbac.types\u0026#34;; import { hasAccessToModule, hasAccessToSubModule } from \u0026#34;../../../rbac\u0026#34;; import { Permissions } from \u0026#34;../../../rbac/types\u0026#34;; export default [ { isRoute: true, component: DashboardPage, path: \u0026#34;/dashboard\u0026#34;, title: \u0026#34;DashboardPage\u0026#34;, exact: true, permission: [ permittedRoles.facilityManager, permittedRoles.organizationAdmin, ], canDisplay: hasAccessToModule(\u0026#34;DASHBOARD\u0026#34;, read), children: [], }, { isRoute: true, component: CHWPage, path: \u0026#34;/chw/chw-management\u0026#34;, title: \u0026#34;CHWPage\u0026#34;, exact: true, permission: allRoles, canDisplay: hasAccessToModule(\u0026#34;LIST_CHW\u0026#34;, read), children: [], }, { isRoute: true, component: CHWOverview, path: \u0026#34;/chw/overview\u0026#34;, title: \u0026#34;CHWOverview\u0026#34;, permission: allRoles, canDisplay: hasAccessToSubModule(\u0026#34;LIST_CHW\u0026#34;, \u0026#34;CONTAINER_CHW\u0026#34;, read), children: [], },\rcomponent level \u0026mdash; check rbac-component.md\nmodule level Example 1 when dealing with Submodules\nimport { allRoles, permittedRoles } from \u0026#34;../rbac/types/rbac.types\u0026#34;; import { hasAccessToModule, hasAccessToSubModule } from \u0026#34;../../../rbac\u0026#34;; import { Permissions } from \u0026#34;../../../rbac/types\u0026#34;; function AttendanceListTable() { const canExport = hasAccessToSubModule( \u0026#34;LIST_CHW\u0026#34;, \u0026#34;LIST_ATTENDANCE\u0026#34;, Permissions.export_button ); return ( \u0026lt;div\u0026gt; \u0026lt;div className=\u0026#34;card-toolbar\u0026#34;\u0026gt; \u0026lt;button hidden={!canExport} onClick={handleExportModal} className=\u0026#34;btn btn-sm btn-light-primary me-5\u0026#34; \u0026gt; \u0026lt;i className=\u0026#34;fas fa-download\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; EXPORT \u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } export default SampleApp;\rExample 2 when dealing with Modules import { allRoles, permittedRoles } from \u0026#34;../rbac/types/rbac.types\u0026#34;; import { hasAccessToModule, hasAccessToSubModule } from \u0026#34;../../../rbac\u0026#34;; import { Permissions } from \u0026#34;../../../rbac/types\u0026#34;; function ManagerOnboarding() { const cannotSeeOnboardingForm = !hasAccessToModule( \u0026#34;ONBOARD_MANAGER\u0026#34;, Permissions.read ); return ( \u0026lt;div hidden={cannotSeeOnboardingForm}\u0026gt; \u0026lt;p\u0026gt;Some sample text\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); } export default ManagerOnboarding;\rextend RBAC rules Step 1\nAsk which user role as access to this feature, is it admin or facility manager.\nIf both can access it than place it as a common resources\nKnow its composability ie., export btn, distribute option some examples\nexport const Composability_Permissions = { read: \u0026#34;READ\u0026#34;, update: \u0026#34;UPDATE\u0026#34;, create: \u0026#34;CREATE\u0026#34;, search_bar: \u0026#34;SEARCH_BAR\u0026#34;, assign_button: \u0026#34;ASSIGN_BUTTON\u0026#34;, reassign_button: \u0026#34;REASSIGN_BUTTON\u0026#34;, distribute_button: \u0026#34;DISTRIBUTE_BUTTON\u0026#34;, export_button: \u0026#34;EXPORT_BUTTON\u0026#34;, delete_button: \u0026#34;DELETE_BUTTON\u0026#34;, filter_button: \u0026#34;FILTER_BUTTON\u0026#34;, detail_button: \u0026#34;DETAIL_BUTTON\u0026#34;, create_form: \u0026#34;CREATE_FORM\u0026#34;, view_form: \u0026#34;VIEW_FORM\u0026#34; };\r/** * Logged in User level RBAC */ import { Permissions, chwTablePermissions, tablePermissions } from \u0026#34;./types\u0026#34;; const { create, filter_button, export_button, read, search_bar, update } = Permissions; export const commonResource = { roleId: { roleName: \u0026#34;FACILITY_MANAGER\u0026#34;, description: \u0026#34;This role specifies the Admin users\u0026#34; }, platform: \u0026#34;WEB_PORTAL\u0026#34;, sidebars: [], modules: [ { moduleName: \u0026#34;Visulise the insights on various modules\u0026#34;, identifier: \u0026#34;DASHBOARD\u0026#34;, submoduleAvailable: false, permissions: [read], subModules: [] }, { moduleName: \u0026#34;Report\u0026#34;, identifier: \u0026#34;LIST_REPORT\u0026#34;, submoduleAvailable: false, permissions: [read, export_button], subModules: [] }, { moduleName: \u0026#34;list of courses\u0026#34;, identifier: \u0026#34;LIST_COURSE\u0026#34;, submoduleAvailable: true, permissions: [read, search_bar, filter_button], subModules: [ { subModuleName: \u0026#34;Container for the Course Overview\u0026#34;, identifier: \u0026#34;CONTAINER_COURSE\u0026#34;, permissions: [read] }, { subModuleName: \u0026#34;Attach/Modify content to the existing course\u0026#34;, identifier: \u0026#34;ATTACH_MODIFY_CONTENT\u0026#34;, permissions: [read, update] }, { subModuleName: \u0026#34;See course content\u0026#34;, identifier: \u0026#34;SEE_COURSE_CONTENT\u0026#34;, permissions: [read] } ] } ] };\rStep 2\nexport const resource = loggedInUser === \u0026#34;FACILITY_MANAGER\u0026#34; ? fmResource : AdminResource;\r","date":"0001-01-01","id":75,"permalink":"/360-whims/360-whims/rbac/an-overview-of-rbac-usage-in-whims-portal/","summary":"\u003ch1 id=\"technical-documentation-for-rbac\"\u003etechnical documentation for RBAC\u003c/h1\u003e\n\u003cp\u003eRBAC at many level\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eComponent level\u003c/li\u003e\n\u003cli\u003eFeature level (toggle feature)\u003c/li\u003e\n\u003cli\u003eSidebar level\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eget the logged in user\u0026rsquo;s\u003c/p\u003e","tags":[],"title":"An overview of RBAC usage in whims portal"},{"content":"Along with the major changes this book has already covered, ECMAScript 6 made several other changes that are smaller but still helpful in improving JavaScript. Those changes include making integers easier to use, adding new methods for calculations, a tweak to Unicode identifiers, and formalizing the__proto__ property. I describe all of those in this appendix.\nWorking with Integers JavaScript uses the IEEE 754 encoding system to represent both integers and floats, which has caused a lot of confusion over the years. The language takes great pains to ensure that developers don\u0026rsquo;t need to worry about the details of number encoding, but problems still leak through from time to time. ECMAScript 6 seeks to address this by making integers easier to identify and work with.\nIdentifying Integers First, ECMAScript 6 added the Number.isInteger() method, which can determine whether a value represents an integer in JavaScript. While JavaScript uses IEEE 754 to represent both types of numbers, floats and integers are stored differently. The Number.isInteger() method takes advantage of that, and when the method is called on a value, the JavaScript engine looks at the underlying representation of the value to determine whether that value is an integer. That means numbers that look like floats might actually be stored as integers and cause Number.isInteger() to return true. For example:\nconsole.log(Number.isInteger(25)); // true console.log(Number.isInteger(25.0)); // true console.log(Number.isInteger(25.1)); // false In this code, Number.isInteger() returns true for both 25 and 25.0 even though the latter looks like a float. Simply adding a decimal point to a number doesn\u0026rsquo;t automatically make it a float in JavaScript. Since 25.0 is really just 25, it is stored as an integer. The number 25.1, however, is stored as a float because there is a fraction value.\nSafe Integers IEEE 754 can only accurately represent integers between -2^53^ and 2^53^, and outside this \u0026ldquo;safe\u0026rdquo; range, binary representations end up reused for multiple numeric values. That means JavaScript can only safely represent integers within the IEEE 754 range before problems become apparent. For instance, consider this code:\nconsole.log(Math.pow(2, 53)); // 9007199254740992 console.log(Math.pow(2, 53) + 1); // 9007199254740992 This example doesn\u0026rsquo;t contain a typo, yet two different numbers are represented by the same JavaScript integer. The effect becomes more prevalent the further the value falls outside the safe range.\nECMAScript 6 introduced the Number.isSafeInteger() method to better identify integers that the language can accurately represent. It also added the Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER properties to represent the upper and lower bounds of the integer range, respectively. The Number.isSafeInteger() method ensures that a value is an integer and falls within the safe range of integer values, as in this example:\nvar inside = Number.MAX_SAFE_INTEGER, outside = inside + 1; console.log(Number.isInteger(inside)); // true console.log(Number.isSafeInteger(inside)); // true console.log(Number.isInteger(outside)); // true console.log(Number.isSafeInteger(outside)); // false The number inside is the largest safe integer, so it returns true for both the Number.isInteger() and Number.isSafeInteger() methods. The number outside is the first questionable integer value, and it isn\u0026rsquo;t considered safe even though it\u0026rsquo;s still an integer.\nMost of the time, you only want to deal with safe integers when doing integer arithmetic or comparisons in JavaScript, so using Number.isSafeInteger() as part of input validation is a good idea.\nNew Math Methods The new emphasis on gaming and graphics that led ECMAScript 6 to include typed arrays in JavaScript also led to the realization that a JavaScript engine could do many mathematical calculations more efficiently. But optimization strategies like asm.js, which works on a subset of JavaScript to improve performance, need more information to perform calculations in the fastest way possible. For instance, knowing whether the numbers should be treated as 32-bit integers or as 64-bit floats is important for hardware-based operations, which are much faster than software-based operations.\nAs a result, ECMAScript 6 added several methods to the Math object to improve the speed of common mathematical calculations. Improving the speed of common calculations also improves the overall speed of applications that perform many calculations, such as graphics programs. The new methods are listed below:\nMath.acosh(x) Returns the inverse hyperbolic cosine of x. Math.asinh(x) Returns the inverse hyperbolic sine of x. Math.atanh(x) Returns the inverse hyperbolic tangent of x Math.cbrt(x) Returns the cubed root of x. Math.clz32(x) Returns the number of leading zero bits in the 32-bit integer representation of x. Math.cosh(x) Returns the hyperbolic cosine of x. Math.expm1(x) Returns the result of subtracting 1 from the exponential function of x Math.fround(x) Returns the nearest single-precision float of x. Math.hypot(...values) Returns the square root of the sum of the squares of each argument. Math.imul(x, y) Returns the result of performing true 32-bit multiplication of the two arguments. Math.log1p(x) Returns the natural logarithm of 1 + x. Math.log10(x) Returns the base 10 logarithm of x. Math.log2(x) Returns the base 2 logarithm of x. Math.sign(x) Returns -1 if the x is negative, 0 if x is +0 or -0, or 1 if x is positive. Math.sinh(x) Returns the hyperbolic sine of x. Math.tanh(x) Returns the hyperbolic tangent of x. Math.trunc(x) Removes fraction digits from a float and returns an integer. It\u0026rsquo;s beyond the scope of this book to explain each new method and what it does in detail. But if your application needs to do a reasonably common calculation, be sure to check the new Math methods before implementing it yourself.\nUnicode Identifiers ECMAScript 6 offers better Unicode support than previous versions of JavaScript, and it also changes what characters may be used as identifiers. In ECMAScript 5, it was already possible to use Unicode escape sequences for identifiers. For example:\n// Valid in ECMAScript 5 and 6 var a = \u0026#34;abc\u0026#34;; console.log(a); // \u0026#34;abc\u0026#34; // equivalent to: console.log(a); // \u0026#34;abc\u0026#34; After the var statement in this example, you can use either \\u0061 or a to access the variable. In ECMAScript 6, you can also use Unicode code point escape sequences as identifiers, like this:\n// Valid in ECMAScript 5 and 6 var a = \u0026#34;abc\u0026#34;; console.log(a); // \u0026#34;abc\u0026#34; // equivalent to: console.log(a); // \u0026#34;abc\u0026#34; This example just replaces \\u0061 with its code point equivalent. Otherwise, it does exactly the same thing as the previous example.\nAdditionally, ECMAScript 6 formally specifies valid identifiers in terms of Unicode Standard Annex #31: Unicode Identifier and Pattern Syntax, which gives the following rules:\nThe first character must be $, _, or any Unicode symbol with a derived core property of ID_Start. Each subsequent character must be $, _, \\u200c (a zero-width non-joiner), \\u200d (a zero-width joiner), or any Unicode symbol with a derived core property of ID_Continue. The ID_Start and ID_Continue derived core properties are defined in Unicode Identifier and Pattern Syntax as a way to identify symbols that are appropriate for use in identifiers such as variables and domain names. The specification is not specific to JavaScript.\nFormalizing the __proto__ Property Even before ECMAScript 5 was finished, several JavaScript engines already implemented a custom property called __proto__ that could be used to both get and set the [[Prototype]] property. Effectively, __proto__ was an early precursor to both the Object.getPrototypeOf() and Object.setPrototypeOf() methods. Expecting all JavaScript engines to remove this property is unrealistic (there were popular JavaScript libraries making use of __proto__), so ECMAScript 6 also formalized the __proto__ behavior. But the formalization appears in Appendix B of ECMA-262 along with this warning:\nThese features are not considered part of the core ECMAScript language. Programmers should not use or assume the existence of these features and behaviours when writing new ECMAScript code. ECMAScript implementations are discouraged from implementing these features unless the implementation is part of a web browser or is required to run the same legacy ECMAScript code that web browsers encounter.\nThe ECMAScript specification recommends using Object.getPrototypeOf() and Object.setPrototypeOf() instead because __proto__ has the following characteristics:\nYou can only specify __proto__ once in an object literal. If you specify two __proto__ properties, then an error is thrown. This is the only object literal property with that restriction. The computed form [\u0026quot;__proto__\u0026quot;] acts like a regular property and doesn\u0026rsquo;t set or return the current object\u0026rsquo;s prototype. All rules related to object literal properties apply in this form, as opposed to the non-computed form, which has exceptions. While you should avoid using the __proto__ property, the way the specification defined it is interesting. In ECMAScript 6 engines, Object.prototype.__proto__ is defined as an accessor property whose get method calls Object.getPrototypeOf() and whose set method calls the Object.setPrototypeOf() method. This leaves no real difference between using __proto__ and Object.getPrototypeOf()/Object.setPrototypeOf(), except that __proto__ allows you to set the prototype of an object literal directly. Here\u0026rsquo;s how that works:\nlet person = { getGreeting() { return \u0026#34;Hello\u0026#34;; } }; let dog = { getGreeting() { return \u0026#34;Woof\u0026#34;; } }; // prototype is person let friend = { __proto__: person }; console.log(friend.getGreeting()); // \u0026#34;Hello\u0026#34; console.log(Object.getPrototypeOf(friend) === person); // true console.log(friend.__proto__ === person); // true // set prototype to dog friend.__proto__ = dog; console.log(friend.getGreeting()); // \u0026#34;Woof\u0026#34; console.log(friend.__proto__ === dog); // true console.log(Object.getPrototypeOf(friend) === dog); // true Instead of calling Object.create() to make the friend object, this example creates a standard object literal that assigns a value to the __proto__ property. When creating an object with the Object.create() method, on the other hand, you\u0026rsquo;d have to specify full property descriptors for any additional object properties.\n","date":"0001-01-01","id":76,"permalink":"/es6/a-other-changes/","summary":"\u003cp\u003eAlong with the major changes this book has already covered, ECMAScript 6 made several other changes that are smaller but still helpful in improving JavaScript. Those changes include making integers easier to use, adding new methods for calculations, a tweak to Unicode identifiers, and formalizing the\u003ccode\u003e__proto__\u003c/code\u003e property. I describe all of those in this appendix.\u003c/p\u003e","tags":[],"title":"Appendix A: Smaller Changes"},{"content":"The development of ECMAScript 6 took about four years, and after that, TC-39 decided that such a long development process was unsustainable. Instead, they moved to a yearly release cycle to ensure new language features would make it into development sooner.\nMore frequent releases mean that each new edition of ECMAScript should have fewer new features than ECMAScript 6. To signify this change, new versions of the specification no longer prominently feature the edition number, and instead refer to the year in which the specification was published. As a result, ECMAScript 6 is also known as ECMAScript 2015, and ECMAScript 7 is formally known as ECMAScript 2016. TC-39 expects to use the year-based naming system for all future ECMAScript editions.\nECMAScript 2016 was finalized in March 2016 and contained only three additions to the language: a new mathematical operator, a new array method, and a new syntax error. Both are covered in this appendix.\nThe Exponentiation Operator The only change to JavaScript syntax introduced in ECMAScript 2016 is the exponentiation operator, which is a mathematical operation that applies an exponent to a base. JavaScript already had the Math.pow() method to perform exponentiation, but JavaScript was also one of the only languages that required a method rather than a formal operator. (And some developers argue an operator is easier to read and reason about.)\nThe exponentiation operator is two asterisks (**) where the left operand is the base and the right operand is the exponent. For example:\nlet result = 5 ** 2; console.log(result); // 25 console.log(result === Math.pow(5, 2)); // true This example calculates 5^2^, which is equal to 25. You can still use Math.pow() to achieve the same result.\nOrder of Operations The exponentiation operator has the highest precedence of all binary operators in JavaScript (unary operators have higher precedence than **). That means it is applied first to any compound operation, as in this example:\nlet result = 2 * 5 ** 2; console.log(result); // 50 The calculation of 5^2^ happens first. The resulting value is then multiplied by 2 for a final result of 50.\nOperand Restriction The exponentiation operator does have a somewhat unusual restriction that isn\u0026rsquo;t present for other operators. The left side of an exponentiation operation cannot be a unary expression other than ++ or --. For example, this is invalid syntax:\n// syntax error let result = -5 ** 2;\rThe -5 in this example is a syntax error because the order of operations is ambiguous. Does the - apply just to 5 or the result of the 5 ** 2 expression? Disallowing unary expressions on the left side of the exponentiation operator eliminates that ambiguity. In order to clearly specify intent, you need to include parentheses either around -5 or around 5 ** 2 as follows:\n// ok let result1 = -(5 ** 2); // equal to -25 // also ok let result2 = (-5) ** 2; // equal to 25 If you put the parentheses around the expression, the - is applied to the whole thing. When the parentheses surround -5, it\u0026rsquo;s clear that you want to raise -5 to the second power.\nYou don\u0026rsquo;t need parentheses to use ++ and -- on the left side of the exponentiation operator because both operators have clearly-defined behavior on their operands. A prefix ++ or -- changes the operand before any other operations take place, and the postfix versions don\u0026rsquo;t apply any changes until after the entire expression has been evaluated. Both use cases are safe on the left side of this operator, as this code demonstrates:\nlet num1 = 2, num2 = 2; console.log((++num1) ** 2); // 9 console.log(num1); // 3 console.log((num2--) ** 2); // 4 console.log(num2); // 1 In this example, num1 is incremented before the exponentiation operator is applied, so num1 becomes 3 and the result of the operation is 9. For num2, the value remains 2 for the exponentiation operation and then is decremented to 1.\nThe Array.prototype.includes() Method You might recall that ECMAScript 6 added String.prototype.includes() in order to check whether certain substrings exist within a given string. Originally, ECMAScript 6 was also going to introduce an Array.prototype.includes() method to continue the trend of treating strings and arrays similarly. But the specification for Array.prototype.includes() was incomplete by the ECMAScript 6 deadline, and so Array.prototype.includes() ended up in ECMAScript 2016 instead.\nHow to Use Array.prototype.includes() The Array.prototype.includes() method accepts two arguments: the value to search for and an optional index from which to start the search. When the second argument is provided, includes() starts the match from that index. (The default starting index is 0.) The return value is true if the value is found inside the array and false if not. For example:\nlet values = [1, 2, 3]; console.log(values.includes(1)); // true console.log(values.includes(0)); // false // start the search from index 2 console.log(values.includes(1, 2)); // false Here, calling values.includes() returns true for the value of 1 and false for the value of 0 because 0 isn\u0026rsquo;t in the array. When the second argument is used to start the search at index 2 (which contains the value 3), the values.includes() method returns false because the number 1 is not found between index 2 and the end of the array.\nValue Comparison The value comparison performed by the includes() method uses the === operator with one exception: NaN is considered equal to NaN even though NaN === NaN evaluates to false. This is different than the behavior of the indexOf() method, which strictly uses === for comparison. To see the difference, consider this code:\nlet values = [1, NaN, 2]; console.log(values.indexOf(NaN)); // -1 console.log(values.includes(NaN)); // true The values.indexOf() method returns -1 for NaN even though NaN is contained in the values array. On the other hand, values.includes() returns true for NaN because it uses a different value comparison operator.\nW\u0026gt; When you want to check just for the existence of a value in an array and don\u0026rsquo;t need to know the index , I recommend using includes() because of the difference in how NaN is treated by the includes() and indexOf() methods. If you do need to know where in the array a value exists, then you have to use the indexOf() method.\nAnother quirk of this implementation is that +0 and -0 are considered to be equal. In this case, the behavior of indexOf() and includes() is the same:\nlet values = [1, +0, 2]; console.log(values.indexOf(-0)); // 1 console.log(values.includes(-0)); // true Here, both indexOf() and includes() find +0 when -0 is passed because the two values are considered equal. Note that this is different than the behavior of the Object.is() method, which considers +0 and -0 to be different values.\nChange to Function-Scoped Strict Mode When strict mode was introduced in ECMAScript 5, the language was quite a bit simpler than it became in ECMAScript 6. Despite that, ECMAScript 6 still allowed you to specify strict mode using the \u0026quot;use strict\u0026quot; directive either in the global scope (which would make all code run in strict mode) or in a function scope (so only the function would run in strict mode). The latter ended up being a problem in ECMAScript 6 due to the more complex ways that parameters could be defined, specifically, with destructuring and default parameter values. To understand the problem, consider the following code:\nfunction doSomething(first = this) { \u0026#34;use strict\u0026#34;; return first; }\rHere, the named parameter first is assigned a default value of this. What would you expect the value of first to be? The ECMAScript 6 specification instructed JavaScript engines to treat the parameters as being run in strict mode in this case, so this should be equal to undefined. However, implementing parameters running in strict mode when \u0026quot;use strict\u0026quot; is present inside the function turned out to be quite difficult because parameter default values can be functions as well. This difficulty led to most JavaScript engines not implementing this feature (so this would be equal to the global object).\nAs a result of the implementation difficulty, ECMAScript 2016 makes it illegal to have a \u0026quot;use strict\u0026quot; directive inside of a function whose parameters are either destructured or have default values. Only simple parameter lists, those that don\u0026rsquo;t contain destructuring or default values, are allowed when \u0026quot;use strict\u0026quot; is present in the body of a function. Here are some examples:\n// okay - using simple parameter list function okay(first, second) { \u0026#34;use strict\u0026#34;; return first; } // syntax error function notOkay1(first, second=first) { \u0026#34;use strict\u0026#34;; return first; } // syntax error function notOkay2({ first, second }) { \u0026#34;use strict\u0026#34;; return first; }\rYou can still use \u0026quot;use strict\u0026quot; with simple parameter lists, which is why okay() works as you would expect (the same as it would in ECMAScript 5). The notOkay1() function is a syntax error because you can no longer use \u0026quot;use strict\u0026quot; in functions with default parameter values. Similarly, the notOkay2() function is a syntax error because you can\u0026rsquo;t use \u0026quot;use strict\u0026quot; in a function with destructured parameters.\nOverall, this change removes both a point of confusion for JavaScript developers and an implementation problem for JavaScript engines.\n","date":"0001-01-01","id":77,"permalink":"/es6/b-ecmascript-7/","summary":"\u003cp\u003eThe development of ECMAScript 6 took about four years, and after that, TC-39 decided that such a long development process was unsustainable. Instead, they moved to a yearly release cycle to ensure new language features would make it into development sooner.\u003c/p\u003e","tags":[],"title":"Appendix B: Understanding ECMAScript 7 (2016)"},{"content":"What will be the output?\nlet array = [1, 2, 3, 4, 5, 6]; let [a, b, , ...rest] = array; console.log(a) console.log(b) console.log(c) console.log(rest) let c;\rA: 1, 2, 3, [ 4, 5, 6 ] B: 1, 2, c is not defined C: 1, 2, NaN, undefined D: 1, 2, c is not defined, [4, 5, 6] Answer Option: B What will be the output?\nlet array1 = [1, 2, 3, 4, 5, 6]; let array2 = array1 array2.push(7, 8, 9, 10) console.log(array1) console.log(array2.sort())\rA: [ 1, 2, 3, 4, 5, 6 ], [ 1, 10, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9 ] B: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ], [ 1, 10, 2, 3, 4, 5, 6, 7, 8, 9 ] C: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 7, 8, 9, 10 ], [ 1, 2, 3, 4, 5, 6, 7, 7, 8, 8, 9, 9, 10 ] D: [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 7, 8, 9, 10 ], [ 1, 2, 3, 4, 5, 6 ] Answer Option: B What will be the output?\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] function checkNum(num) { return num \u0026gt;= 4; } let newArray1 = [array.map((item) =\u0026gt; { return item })].filter(checkNum) let newArray2 = array.filter(checkNum).map((item) =\u0026gt; { return item }) console.log(newArray1) console.log(newArray2)\rA: [ [] ], [ [ 4, 5, 6, 7, 8, 9, 10 ] ] B: NaN, [] C: [], [ 4, 5, 6, 7, 8, 9, 10 ] D: [ [] ], [ 5, 6, 7, 8, 9, 10 ] Answer Option: C Guess the output\nlet array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] function checkNum(num) { return num \u0026gt; 4; } let newArray = [array.filter(checkNum).map((item, index) =\u0026gt; { return item - array[index] }).reduce((acc, curr) =\u0026gt; { return acc + curr })] console.log(newArray)\rA: [ 24 ] B: 24 C: NaN D: Undefined Answer Option: A Guess the following output?\nconst doSomething = (a, b) =\u0026gt; { return [a + b, a - b, a * b, a / b] } let [...rest] = doSomething(4, 2) console.log(rest * rest)\rA: [ 36, 4, 64, 4 ] B: 18 C: NaN D: rest is not defined Answer Option: C Guess the following output?\nconst doSomething = (a, b) =\u0026gt; { return [a + b, a - b, a * b, a / b] } let someVariable = 5; let [...rest] = doSomething(4, 2) someVariable = rest.reduce((acc, total) =\u0026gt; { return 0 + total; }); console.log(someVariable)\rA: 960 B: 192 C: NaN D: 2 Answer Option: D Guess the following output?\nconst doSomething = (a, b) =\u0026gt; { return [a + b, a - b, a * b, a / b] } let someVariable = 5; let [...rest] = doSomething(4, 2) someVariable = rest.reduce((acc = 1, total) =\u0026gt; { return acc + total; }); console.log(someVariable)\rA: 19 B: 192 C: NaN D: 18 Answer Option: A Guess the following output?\nconst nums = [1, 2, 3, 4, 5, 6]; const res = nums.forEach((item) =\u0026gt; { return item * item; }); console.log(res);\rA: null B: [ 1, 4, 9, 16, 25, 36 ] C: [1, 2, 3, 4, 5, 6] D: Undefined Answer Option: D Guess the following output?\nlet array = [1, 2, 3]; let array2 = array; let array3 = [...array]; console.log(array.concat(4)); console.log(array2.concat(5)); console.log(array3.concat(6, 7));\rA: [ 1, 2, 3, 4 ], [ 1, 2, 3, 5 ], [ 1, 2, 3, 6, 7 ] B: [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 6, 7 ] C: [ 1, 2, 3 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 6, 7 ] D: [ 1, 2, 3, 4 ], [ 1, 2, 3, 5 ], [ 1, 2, 3, 6, 7 ] Answer Option: A Guess the following output?\nconst clothes = [\u0026#39;jacket\u0026#39;, \u0026#39;t-shirt\u0026#39;]; clothes.length = 0; console.log(clothes[0]);\rA: jacket B: undefined C: error D: not defined Answer Option: B ","date":"0001-01-01","id":78,"permalink":"/code-snippets/arrays/","summary":"\u003cp\u003e\u003cstrong\u003eWhat will be the output?\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-JS\" data-lang=\"JS\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e6\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e...\u003c/span\u003e\u003cspan class=\"nx\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003erest\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003e1, 2, 3, [ 4, 5, 6 ]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003e1, 2, c is not defined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003e1, 2, NaN, undefined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eD: \u003ccode\u003e1, 2, c is not defined, [4, 5, 6]\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-b\"\u003eOption: B\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"Arrays"},{"content":"Axios Configuration path src\\common\\utils\\axiosUtils.ts\nThis module configures Axios instances for public and protected API calls, handles token refreshing, and manages user session state.\nIt employs JWT for authentication and utilizes local storage to store access and refresh tokens. Dependencies Axios: Library for making HTTP requests. getElapsedMins: Utility function to calculate elapsed minutes since a given timestamp. dayjs: Date library for manipulating and formatting dates. jwt_decode: Library for decoding JWT tokens. TokenService: Service for managing user authentication tokens. Constants Headers:\npublicHeaders: Content type for public requests (form URL encoded). orgSelectorHeaders: Content type for organization selection (JSON). protectedHeadersContent: Headers for protected content (Excel file download). API Payload:\npayload: Form data for refreshing access tokens, including grant_type, client_id, and refresh_token retrieved from local storage. Base URLs:\nRetrieved from environment variables REACT_APP_BASE_URL and REACT_APP_AUTH_URL. Axios Instances Public Axios Instance:\n$axiosPublic: Configured for public API endpoints with the necessary headers and timeout. Protected Axios Instance:\n$axiosProtected: A function that creates an Axios instance with authorization headers. Functions getRefreshedAccess(payload: string):\nSends a request to refresh the access token using the provided payload. Updates local storage with new access and refresh tokens upon success. Redirects to the home page if an error occurs (e.g., invalid token). Axios Interceptors:\nRequest Interceptor:\nChecks if the access token is present and whether it has expired. If expired, calls getRefreshedAccess() to refresh the token and updates the request headers. Validates the remaining session time; if over 45 minutes, redirects the user to the home page. Error Interceptor:\nRemoves user tokens and redirects to the home page on request failure. Variables payload: The payload used for refreshing access tokens, including grant type, client ID, and the refresh token retrieved from local storage. authUrl: The base URL for authentication endpoints. baseUrl: The base URL for the application’s API. Functions $axiosPublicContentJSON export const $axiosPublicContentJSON = Axios.create({ headers: { ...orgSelectorHeaders }, timeout: 10000, baseURL: baseUrl });\rDescription: Axios instance configured for public content requests with JSON headers. Timeout: 10 seconds. $axiosPublic export const $axiosPublic = Axios.create({ headers: { ...publicHeaders }, timeout: 10000, baseURL: authUrl });\rDescription: Axios instance configured for public requests. Timeout: 10 seconds. getRefreshedAccess export const getRefreshedAccess = async (payload: string) =\u0026gt; { const realmName = JSON.parse(localStorage.getItem(\u0026#34;organizationId\u0026#34;) || \u0026#34;{}\u0026#34;); try { const resp: any = await $axiosPublic.post(`/realms/${realmName}/protocol/openid-connect/token`, payload); //@ts-ignore localStorage.setItem(\u0026#34;access_token\u0026#34;, JSON.stringify(resp.data.access_token)); //@ts-ignore localStorage.setItem(\u0026#34;refresh_token\u0026#34;, JSON.stringify(resp.data.refresh_token)); } catch (error) { TokenService.removeUser(); window.location.href = \u0026#34;/\u0026#34;; } };\rParameters: payload (string): The payload containing the refresh token. Description: Makes a POST request to refresh the access token using the provided payload. Functionality: Retrieves the organization ID from local storage. If the request succeeds, it stores the new access and refresh tokens in local storage. If it fails, it removes the user and redirects to the homepage. $axiosProtected export const $axiosProtected = () =\u0026gt; { const accessToken = JSON.parse(localStorage.getItem(\u0026#34;access_token\u0026#34;) || \u0026#34;{}\u0026#34;); const protectedHeaders = { \u0026#34;Content-Type\u0026#34;: \u0026#34;application/json;charset=UTF-8\u0026#34;, \u0026#34;Authorization\u0026#34;: `Bearer ${accessToken}` }; // ***************** Axios instance ********* const instance = Axios.create({ headers: { ...protectedHeaders }, timeout: 1000000, baseURL: baseUrl }); // **************** Interceptor logic ********** instance.interceptors.request.use( async (config: any) =\u0026gt; { if (!accessToken) { config.headers.Authorization = `Bearer ${accessToken}`; } const user: any = jwt_decode(accessToken); const isExpired = dayjs.unix(user.exp).diff(dayjs()) \u0026lt; 1; if (!isExpired) { return config; } else { const response: any = await getRefreshedAccess(payload); if (response) { config.headers.Authorization = `Bearer ${response?.data?.data.token}`; } const remainingTime = getElapsedMins(JSON.parse(localStorage.getItem(\u0026#34;logginSession\u0026#34;) || \u0026#34;{}\u0026#34;), new Date().getTime()); if (remainingTime \u0026gt;= 45) { TokenService.removeUser(); window.location.href = \u0026#34;/\u0026#34;; } localStorage.setItem(\u0026#34;logginSession\u0026#34;, JSON.stringify(new Date().getTime())); return config; } }, async function (error) { TokenService.removeUser(); window.location.href = \u0026#34;/\u0026#34;; return Promise.reject(error); } ); return instance; };\rDescription: Creates an Axios instance for making protected requests that require authorization. Functionality: Checks if the access token is expired. If expired, it attempts to refresh the access token. If the session has been active for more than 45 minutes, it logs the user out. Default Export export default $axiosProtected;\rDescription: Exports the $axiosProtected instance as the default export for use in other parts of the application. ","date":"0001-01-01","id":79,"permalink":"/360-whims/360-whims/auth/auth/","summary":"\u003ch2 id=\"axios-configuration\"\u003eAxios Configuration\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ccode\u003epath\u003c/code\u003e src\\common\\utils\\axiosUtils.ts\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis module configures Axios instances for public and protected API calls, handles token refreshing, and manages user session state.\u003c/p\u003e","tags":[],"title":"Auth"},{"content":"","date":"0001-01-01","id":80,"permalink":"/360-whims/auth/","summary":"","tags":[],"title":"Auth module in 360 portal"},{"content":"\rA curated list of links on component-driven development and design systems\nContents Articles Components React Development tools Styles Testing Design systems Design Whitespace Color Typography Design tools Misc Talks Books Courses Tools Development workbenches Misc Libraries and components React Styles Design system examples Design system catalogs Misc Contributing Authors and license Articles Components Cards and Composability in Design Systems Component Based Design System With Styled-System Defining Component APIs in React Designing Button States Handling spacing in a UI component library Hidden in plain site — the levels of component reuse. The path to portability for UI components Managing Heading Levels In Design Systems React Patterns for Style Composition in React Presentational and Container Components The Three Tenets of Styled System Development tools Component-Driven Development Prefabricated components. The case for building UI components in isolation React Storybook: Develop Beautiful User Interfaces with Ease Storybook vs Styleguidist. A comparison of the top UI component explorers UI component explorers — your new favorite tool Using React within a Design System Styles Creating truly universal React component systems. Announcing styled-components/primitives Designer-Oriented Styles Styling themes React SSR pitfalls in building adaptive layouts Testing Visual Testing — the pragmatic way to test UIs Design systems 4 Things I Know About Pattern Libraries Building a React Component Library Conducting an Interface Inventory Creating A Living Style Guide: A Case Study Design Systems Sprint 0: The Silver Bullet of Product Development Design systems, style guides, pattern libraries. What the hell is the difference? Designing Imaginative Style Guides From Pages to Patterns: An Exercise for Everyone How and why we built the Marvel Styleguide How to construct a design system. Tips for designing and building a consistent design system Interface Inventory Setup a design system. Build a system that provides a unified set of UX, design rules and patterns Taking The Pattern Library To The Next Level Tokens in Design Systems: 10 Tips to Architect \u0026amp; Implement Design Decisions for Everyone UI Component Playbook. A 5-step guide to designing and engineering frontends with components Design Dark Patterns are designed to trick you (and they’re all over the Web) Design System Grammar Whitespace 8-Point Grid: Borders And Layouts Framework for creating a predictable \u0026amp; harmonious spacing system for faster design-dev handoff Intro to The 8-Point Grid System More Padding, Please! The power of white space in product design Role of White Space in User Interface Design Space in Design Systems. From Basics to Expanded Concepts to Apply Space with Intent Whitespace Why White Space Is Crucial To UX Design Color 10 Reasons to Use Color Polishing GitLab’s UI: A new color system Re-approaching Color The Science of Color Contrast — An Expert Designer’s Guide Designing accessible color systems Typography Creating a type style guide Deep Dive on Typescales Framework to create an accessible \u0026amp; harmonious typography system for faster design-dev handoff Typographic scale Typography in Design Systems Design tools Component architecture in Figma Creating and Maintaining the Marvel Style Guide in Sketch Evolution of Tools. Closing the loop with Design Intelligence How to create a Design System in Sketch Painting with Code. Introducing our new open source library React Sketch.app Sketching in the Browser Misc Pure UI Sketching Interfaces. Generating code from low fidelity wireframes Turning Design Mockups Into Code With Deep Learning Vue Design System Why designers and frond-end developers should talk more often Talks Build Beautiful Interfaces Faster by Dominic Nguyen and Zhenya Savchenko (2016) Custom CSS is the path to inconsistent UI by Artem Sapegin (React Alicante 2017) Designing With React by Kristin Baumann (React Day Berlin 2017) Dream of Styleguide Driven Development by Sara Vieira (React Alicante 2017) Modular CSS by Andrey Okonetchnikov (React Alicante 2017) Nathan Curtis on Buttons in Design Systems Sketching in the Browser by Mark Dalgleish (JSHeroes 2018) Books Atomic Design by Brad Frost Design Systems: A practical guide to creating design languages for digital products by Alla Kholmatova Design Systems Handbook by InVision Elements of Typographic Style by Robert Bringhurst Front-end Style Guides: Creating and Maintaining Style Guides for Websites by Anna Debenham Frontend Architecture for Design Systems: A Modern Blueprint for Scalable and Sustainable Websites by Micah Godbolt Inclusive Components by Heydon Pickering On Web Typography by Jason Santa Maria Courses Advanced React Component Patterns Tools Development workbenches Bit - A tool for isolating, developing and sharing components between projects and applications, with 2-way collaboartion over components. React Cosmos React Styleguidist — isolated React component development environment with a living style guide Storybook Misc Cupper — documentation builder for inclusive designers Theo — generate design tokens for web, iOS and Android from single source ColorBox - a new way to building color systems for accessible UIs that scale Color - Color palette generator with aria and other interesting features Libraries and components React Atomic layout — a single component to distribute a spacial relation in your layouts macro-components — create flexible layout and composite UI components without the need to define arbitrary custom props React Group — render React children with a separator React Spaceman — React component to manage whitespace Rebass — Flexible \u0026amp; functional React design system, built with styled-system Rebass Grid — responsive React grid system built with styled-components Reach UI — accessible foundation of your React-based design system Stack Styled — make stack layouts easy Styles styled-tools — useful interpolated functions for styled-components and other CSS in JS libraries styled-system — design system utilities for styled-components and other CSS in JS libraries Colors coloralgorithm – Javacript function to produce color sets Design system examples Alfa Bank Ant Design Aragon UI Audi Auth0 Design System Backpack by Skyscanner Carbon Design System by IBM Circuit UI by SumUp cf-design by Cloudflare Lightning Design System Marvel Material Design Office UI Fabric Pivotal UI Pluralsight Design System Polaris by Shopify Priceline One Seek Style Guide Semantic UI Vue Design System Elastic UI framework Design system catalogs Adele Awesome Design Systems Misc Dark Patterns Design Systems newsletter React Components Catalog — curated list of great React components User Interface Design Patterns Type Scale — a visual type scale calculator Website Style Guide Resources Contributing Suggestions are welcome: send a pull request if you find something awesome about component-driven development.\nAuthors and license Andrey Okonetchnikov, a frontend engineer and UI \u0026amp; UX designer from Russia living in Vienna, Austria. Artem Sapegin, a frontend developer at Wayfair and the creator of React Styleguidist. He also writes about frontend at his blog. CC0 1.0 Universal license, see the included License.md file.\n","date":"0001-01-01","id":81,"permalink":"/others/others/awesome-component-driven-development/","summary":"\u003c!-- # Awesome component-driven development [![Awesome](https://awesome.re/badge-flat.svg)](https://awesome.re) --\u003e\r\n\u003cp\u003eA curated list of links on component-driven development and design systems\u003c/p\u003e\n\u003c!-- To update TOC run: npx markdown-toc -i Readme.md --\u003e\r\n\u003c!-- To lint run:       npx awesome-lint --\u003e\r\n\u003c!-- To format run:     npx prettier --write Readme.md --\u003e\r\n\u003ch2 id=\"contents\"\u003eContents\u003c/h2\u003e\n\u003c!-- toc --\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#articles\"\u003eArticles\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#components\"\u003eComponents\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#react\"\u003eReact\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#development-tools\"\u003eDevelopment tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#styles\"\u003eStyles\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#testing\"\u003eTesting\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#design-systems\"\u003eDesign systems\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#design\"\u003eDesign\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#whitespace\"\u003eWhitespace\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#color\"\u003eColor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#typography\"\u003eTypography\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#design-tools\"\u003eDesign tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#misc\"\u003eMisc\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#talks\"\u003eTalks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#books\"\u003eBooks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#courses\"\u003eCourses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#tools\"\u003eTools\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#development-workbenches\"\u003eDevelopment workbenches\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#misc-1\"\u003eMisc\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#libraries-and-components\"\u003eLibraries and components\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#react-1\"\u003eReact\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#styles-1\"\u003eStyles\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#design-system-examples\"\u003eDesign system examples\u003c/a\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#design-system-catalogs\"\u003eDesign system catalogs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#misc-2\"\u003eMisc\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#contributing\"\u003eContributing\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#authors-and-license\"\u003eAuthors and license\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c!-- tocstop --\u003e\r\n\u003ch2 id=\"articles\"\u003eArticles\u003c/h2\u003e\n\u003ch3 id=\"components\"\u003eComponents\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/eightshapes-llc/cards-and-composability-in-design-systems-8845ecbee50e\"\u003eCards and Composability in Design Systems\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://varun.ca/styled-system/\"\u003eComponent Based Design System With Styled-System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jxnblk.com/blog/defining-component-apis-in-react/\"\u003eDefining Component APIs in React\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cloudfour.com/thinks/designing-button-states/\"\u003eDesigning Button States\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/fed-or-dead/handling-spacing-in-a-ui-component-library-70f3b22ec89\"\u003eHandling spacing in a UI component library\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/hidden-in-plain-site-the-levels-of-component-reuse-ee9b0d7b1bd2\"\u003eHidden in plain site — the levels of component reuse. The path to portability for UI components\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@Heydon/managing-heading-levels-in-design-systems-18be9a746fa3\"\u003eManaging Heading Levels In Design Systems\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"react\"\u003eReact\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://jxnblk.com/blog/patterns-for-style-composition-in-react/\"\u003ePatterns for Style Composition in React\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0\"\u003ePresentational and Container Components\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://jxnblk.com/blog/the-three-tenets-of-styled-system/\"\u003eThe Three Tenets of Styled System\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"development-tools\"\u003eDevelopment tools\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/component-driven-development-ce1109d56c8e#.ltre4c82b\"\u003eComponent-Driven Development\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/prefabricated-components-2932bfc992ba\"\u003ePrefabricated components. The case for building UI components in isolation\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.sitepoint.com/react-storybook-develop-beautiful-user-interfaces-with-ease/\"\u003eReact Storybook: Develop Beautiful User Interfaces with Ease\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/storybook-vs-styleguidist-2bd93d6dcc06\"\u003eStorybook vs Styleguidist. A comparison of the top UI component explorers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/the-crucial-tool-for-modern-frontend-engineers-fb849b06187a#.ag31xppof\"\u003eUI component explorers — your new favorite tool\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/buildit/using-react-within-a-design-system-73d4bb0cc822#.nix8am1gt\"\u003eUsing React within a Design System\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"styles\"\u003eStyles\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/styled-components/announcing-primitives-support-for-truly-universal-component-systems-5772c7d14bc7\"\u003eCreating truly universal React component systems. Announcing styled-components/primitives\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://the-pastry-box-project.net/james-kyle/2018-january-22\"\u003eDesigner-Oriented Styles\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://johno.com/styling-themes\"\u003eStyling themes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://nikitakirsanov.com/en/blog/adaptive-layout-in-react-apps-with-ssr/\"\u003eReact SSR pitfalls in building adaptive layouts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"testing\"\u003eTesting\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/visual-testing-the-pragmatic-way-to-test-uis-18c8da617ecf\"\u003eVisual Testing — the pragmatic way to test UIs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"design-systems\"\u003eDesign systems\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://daverupert.com/2017/06/what-i-know-about-pattern-libraries/\"\u003e4 Things I Know About Pattern Libraries\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@_alanbsmith/building-a-react-component-library-part-1-d8a1e248fe6c\"\u003eBuilding a React Component Library\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://bradfrost.com/blog/post/conducting-an-interface-inventory/\"\u003eConducting an Interface Inventory\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/2016/05/creating-a-living-style-guide-case-study/\"\u003eCreating A Living Style Guide: A Case Study\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@marcintreder/design-systems-sprint-0-the-silver-bullet-of-product-development-8c0ed83bf00d\"\u003eDesign Systems Sprint 0: The Silver Bullet of Product Development\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://product-unicorn.com/design-systems-style-guides-all-those-libraries-what-the-hell-is-the-difference-4c2741193fdc\"\u003eDesign systems, style guides, pattern libraries. What the hell is the difference?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://24ways.org/2016/designing-imaginative-style-guides/\"\u003eDesigning Imaginative Style Guides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://alistapart.com/article/from-pages-to-patterns-an-exercise-for-everyone\"\u003eFrom Pages to Patterns: An Exercise for Everyone\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.marvelapp.com/the-marvel-styleguide/\"\u003eHow and why we built the Marvel Styleguide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.freecodecamp.org/how-to-construct-a-design-system-864adbf2a117\"\u003eHow to construct a design system. Tips for designing and building a consistent design system\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://bradfrost.com/blog/post/interface-inventory/\"\u003eInterface Inventory\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.prototypr.io/design-system-ac88c6740f53#.7teofr9rk\"\u003eSetup a design system. Build a system that provides a unified set of UX, design rules and patterns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/taking-pattern-libraries-next-level/\"\u003eTaking The Pattern Library To The Next Level\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/eightshapes-llc/tokens-in-design-systems-25dd82d58421\"\u003eTokens in Design Systems: 10 Tips to Architect \u0026amp; Implement Design Decisions for Everyone\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.hichroma.com/ui-component-playbook-fd3022d00590#.7yfxvqlqw\"\u003eUI Component Playbook. A 5-step guide to designing and engineering frontends with components\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"design\"\u003eDesign\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://arstechnica.com/information-technology/2016/07/dark-patterns-are-designed-to-trick-you-and-theyre-all-over-the-web/\"\u003eDark Patterns are designed to trick you (and they’re all over the Web)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://daneden.me/2017/07/12/a-design-system-grammar/\"\u003eDesign System Grammar\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"whitespace\"\u003eWhitespace\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://builttoadapt.io/8-point-grid-borders-and-layouts-e91eb97f5091\"\u003e8-Point Grid: Borders And Layouts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.prototypr.io/a-framework-for-creating-a-predictable-and-harmonious-spacing-system-8eee8aaf773c\"\u003eFramework for creating a predictable \u0026amp; harmonious spacing system for faster design-dev handoff\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632\"\u003eIntro to The 8-Point Grid System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/wayfair-design/more-padding-please-b95e19422acc\"\u003eMore Padding, Please! The power of white space in product design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.designorate.com/white-space-user-interface-design/\"\u003eRole of White Space in User Interface Design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/eightshapes-llc/space-in-design-systems-188bcbae0d62\"\u003eSpace in Design Systems. From Basics to Expanded Concepts to Apply Space with Intent\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://alistapart.com/article/whitespace\"\u003eWhitespace\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.fastcodesign.com/3046656/why-white-space-is-crucial-to-ux-design\"\u003eWhy White Space Is Crucial To UX Design\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"color\"\u003eColor\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://understandinggraphics.com/design/10-reasons-to-use-color/\"\u003e10 Reasons to Use Color\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://about.gitlab.com/2018/03/29/polishing-gitlabs-ui-a-new-color-system/\"\u003ePolishing GitLab’s UI: A new color system\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://design.lyft.com/re-approaching-color-9e604ba22c88\"\u003eRe-approaching Color\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.muz.li/the-science-of-color-contrast-an-expert-designers-guide-33e84c41d156\"\u003eThe Science of Color Contrast — An Expert Designer’s Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://stripe.com/en-de/blog/accessible-color-systems\"\u003eDesigning accessible color systems\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"typography\"\u003eTypography\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.typekit.com/2014/10/22/creating-a-type-style-guide/\"\u003eCreating a type style guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/design-ibm/a-deep-dive-on-typescales-16c7b1473d83\"\u003eDeep Dive on Typescales\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.prototypr.io/10-practical-steps-to-create-a-predictable-accessible-and-harmonious-typography-system-a-case-6c85d901bedd\"\u003eFramework to create an accessible \u0026amp; harmonious typography system for faster design-dev handoff\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://spencermortensen.com/articles/typographic-scale/\"\u003eTypographic scale\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/@ethersystem/typography-in-design-systems-d61bf5d8a333\"\u003eTypography in Design Systems\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"design-tools\"\u003eDesign tools\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://blog.figma.com/component-architecture-in-figma-f16ae9cc4481\"\u003eComponent architecture in Figma\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.marvelapp.com/creating-maintaining-marvel-style-guide-sketch/\"\u003eCreating and Maintaining the Marvel Style Guide in Sketch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://airbnb.design/the-evolution-of-tools/\"\u003eEvolution of Tools. Closing the loop with Design Intelligence\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/sketch-app-sources/how-to-create-a-design-system-in-sketch-part-one-fd450dccab10\"\u003eHow to create a Design System in Sketch\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://airbnb.design/painting-with-code/\"\u003ePainting with Code. Introducing our new open source library React Sketch.app\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://medium.com/seek-blog/sketching-in-the-browser-33a7b7aa0526\"\u003eSketching in the Browser\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"misc\"\u003eMisc\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://rauchg.com/2015/pure-ui\"\u003ePure UI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://airbnb.design/sketching-interfaces/\"\u003eSketching Interfaces. Generating code from low fidelity wireframes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.floydhub.com/turning-design-mockups-into-code-with-deep-learning/\"\u003eTurning Design Mockups Into Code With Deep Learning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://viljamis.com/2018/vue-design-system/\"\u003eVue Design System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://janpersiel.com/why-designers-and-frond-end-developers-should-talk-more-often/\"\u003eWhy designers and frond-end developers should talk more often\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"talks\"\u003eTalks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/dlMe7u02m50\"\u003eBuild Beautiful Interfaces Faster\u003c/a\u003e by Dominic Nguyen and Zhenya Savchenko (2016)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/Cdtwz3PbW7M\"\u003eCustom CSS is the path to inconsistent UI\u003c/a\u003e by Artem Sapegin (React Alicante 2017)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/ixIuMs3aDCI\"\u003eDesigning With React\u003c/a\u003e by Kristin Baumann (React Day Berlin 2017)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/JjXnmhNW8Cs\"\u003eDream of Styleguide Driven Development\u003c/a\u003e by Sara Vieira (React Alicante 2017)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/dYD058pQ8vg\"\u003eModular CSS\u003c/a\u003e by Andrey Okonetchnikov (React Alicante 2017)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vimeo.com/223433031\"\u003eNathan Curtis on Buttons in Design Systems\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://youtu.be/ohw6AgPbJoE\"\u003eSketching in the Browser\u003c/a\u003e by Mark Dalgleish (JSHeroes 2018)\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"books\"\u003eBooks\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://shop.bradfrost.com/\"\u003eAtomic Design\u003c/a\u003e by Brad Frost\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/printed-books/design-systems/\"\u003eDesign Systems: A practical guide to creating design languages for digital products\u003c/a\u003e by Alla Kholmatova\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.designbetter.co/design-systems-handbook\"\u003eDesign Systems Handbook\u003c/a\u003e by InVision\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/gp/product/0881792128/?tag=artesapesphot-20\"\u003eElements of Typographic Style\u003c/a\u003e by Robert Bringhurst\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://www.maban.co.uk/projects/front-end-style-guides/\"\u003eFront-end Style Guides: Creating and Maintaining Style Guides for Websites\u003c/a\u003e by Anna Debenham\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/gp/product/B01B6WS868/?tag=artesapesphot-20\"\u003eFrontend Architecture for Design Systems: A Modern Blueprint for Scalable and Sustainable Websites\u003c/a\u003e by Micah Godbolt\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://book.inclusive-components.design/\"\u003eInclusive Components\u003c/a\u003e by Heydon Pickering\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://abookapart.com/products/on-web-typography\"\u003eOn Web Typography\u003c/a\u003e by Jason Santa Maria\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"courses\"\u003eCourses\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://egghead.io/courses/advanced-react-component-patterns\"\u003eAdvanced React Component Patterns\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"tools\"\u003eTools\u003c/h2\u003e\n\u003ch3 id=\"development-workbenches\"\u003eDevelopment workbenches\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/teambit/bit\"\u003eBit\u003c/a\u003e - A tool for isolating, developing and sharing components between projects and applications, with 2-way collaboartion over components.\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/react-cosmos/react-cosmos\"\u003eReact Cosmos\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://react-styleguidist.js.org/\"\u003eReact Styleguidist\u003c/a\u003e — isolated React component development environment with a living style guide\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://storybook.js.org/\"\u003eStorybook\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"misc-1\"\u003eMisc\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/ThePacielloGroup/cupper\"\u003eCupper\u003c/a\u003e — documentation builder for inclusive designers\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/salesforce-ux/theo\"\u003eTheo\u003c/a\u003e — generate design tokens for web, iOS and Android from single source\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.colorbox.io\"\u003eColorBox\u003c/a\u003e - a new way to building color systems for accessible UIs that scale\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cloudflare.design/color/\"\u003eColor\u003c/a\u003e - Color palette generator with aria and other interesting features\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"libraries-and-components\"\u003eLibraries and components\u003c/h2\u003e\n\u003ch3 id=\"react-1\"\u003eReact\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/kettanaito/atomic-layout\"\u003eAtomic layout\u003c/a\u003e — a single component to distribute a spacial relation in your layouts\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/jxnblk/macro-components\"\u003emacro-components\u003c/a\u003e — create flexible layout and composite UI components without the need to define arbitrary custom props\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sapegin.github.io/react-group/\"\u003eReact Group\u003c/a\u003e — render React children with a separator\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sapegin/react-spaceman\"\u003eReact Spaceman\u003c/a\u003e — React component to manage whitespace\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rebassjs.org/\"\u003eRebass\u003c/a\u003e — Flexible \u0026amp; functional React design system, built with styled-system\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://rebassjs.org/grid/\"\u003eRebass Grid\u003c/a\u003e — responsive React grid system built with styled-components\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ui.reach.tech/\"\u003eReach UI\u003c/a\u003e — accessible foundation of your React-based design system\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://sapegin.github.io/stack-styled/\"\u003eStack Styled\u003c/a\u003e — make stack layouts easy\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"styles-1\"\u003eStyles\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/diegohaz/styled-tools\"\u003estyled-tools\u003c/a\u003e — useful interpolated functions for styled-components and other CSS in JS libraries\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/jxnblk/styled-system\"\u003estyled-system\u003c/a\u003e — design system utilities for styled-components and other CSS in JS libraries\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"colors\"\u003eColors\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/lyft/coloralgorithm\"\u003ecoloralgorithm\u003c/a\u003e – Javacript function to produce color sets\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"design-system-examples\"\u003eDesign system examples\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"http://design.alfabank.ru/\"\u003eAlfa Bank\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ant.design\"\u003eAnt Design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ui.aragon.org/\"\u003eAragon UI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.audi.com/ci/en/guides/user-interface/introduction.html\"\u003eAudi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/auth0/cosmos\"\u003eAuth0 Design System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://backpack.github.io/\"\u003eBackpack\u003c/a\u003e by Skyscanner\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.carbondesignsystem.com\"\u003eCarbon Design System\u003c/a\u003e by IBM\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://circuit.sumup.com/#/\"\u003eCircuit UI\u003c/a\u003e by SumUp\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://cloudflare.github.io/cf-ui/\"\u003ecf-design\u003c/a\u003e by Cloudflare\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.lightningdesignsystem.com\"\u003eLightning Design System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://marvelapp.com/styleguide/\"\u003eMarvel\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://material.io/guidelines/\"\u003eMaterial Design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developer.microsoft.com/en-us/fabric\"\u003eOffice UI Fabric\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://styleguide.pivotal.io/\"\u003ePivotal UI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://design-system.pluralsight.com/\"\u003ePluralsight Design System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://polaris.shopify.com/\"\u003ePolaris\u003c/a\u003e by Shopify\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://pricelinelabs.github.io/design-system/\"\u003ePriceline One\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://seek-oss.github.io/seek-style-guide/\"\u003eSeek Style Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://react.semantic-ui.com\"\u003eSemantic UI\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://vueds.com/\"\u003eVue Design System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://elastic.github.io/eui/#/\"\u003eElastic UI framework\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"design-system-catalogs\"\u003eDesign system catalogs\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://adele.uxpin.com/\"\u003eAdele\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/alexpate/awesome-design-systems\"\u003eAwesome Design Systems\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"misc-2\"\u003eMisc\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://darkpatterns.org\"\u003eDark Patterns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://news.design.systems/\"\u003eDesign Systems newsletter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/sapegin/react-components\"\u003eReact Components Catalog\u003c/a\u003e — curated list of great React components\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://ui-patterns.com\"\u003eUser Interface Design Patterns\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://type-scale.com/\"\u003eType Scale\u003c/a\u003e — a visual type scale calculator\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"http://styleguides.io/\"\u003eWebsite Style Guide Resources\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"contributing\"\u003eContributing\u003c/h2\u003e\n\u003cp\u003eSuggestions are welcome: \u003ca href=\"Contributing.md\"\u003esend a pull request\u003c/a\u003e if you find something awesome about component-driven development.\u003c/p\u003e","tags":[],"title":"Awesome component-driven development"},{"content":"","date":"0001-01-01","id":82,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"Description This module provides utility functions for handling date/time calculations.\nDependencies dayjs: A lightweight date manipulation library. Functions getElapsedMins export const getElapsedMins = (startTime: number | null, endTime: number) =\u0026gt; {\rParameters:\nstartTime (number | null): The start time in milliseconds since the Unix epoch. Can be null. endTime (number): The end time in milliseconds since the Unix epoch. Returns:\nThe absolute difference in minutes between startTime and endTime. Usage: This function is used to calculate the elapsed minutes between two timestamps.\n","date":"0001-01-01","id":83,"permalink":"/360-whims/360-whims/auth/chore-utils-documentation/","summary":"\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eThis module provides utility functions for handling date/time calculations.\u003c/p\u003e\n\u003ch3 id=\"dependencies\"\u003eDependencies\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003edayjs\u003c/strong\u003e: A lightweight date manipulation library.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"functions\"\u003eFunctions\u003c/h3\u003e\n\u003ch4 id=\"getelapsedmins\"\u003e\u003ccode\u003egetElapsedMins\u003c/code\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-typescript\" data-lang=\"typescript\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003eexport\u003c/span\u003e \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003egetElapsedMins\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003estartTime\u003c/span\u003e: \u003cspan class=\"kt\"\u003enumber\u003c/span\u003e \u003cspan class=\"o\"\u003e|\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eendTime\u003c/span\u003e: \u003cspan class=\"kt\"\u003enumber\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eParameters\u003c/strong\u003e:\u003c/p\u003e","tags":[],"title":"Chore Utils Documentation"},{"content":"","date":"0001-01-01","id":84,"permalink":"/code-snippets/","summary":"","tags":[],"title":"Code snippets"},{"content":"Website This website is built using Docusaurus 2, a modern static website generator.\nInstallation $ npm\rLocal Development $ npm start\rThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\nBuild $ npm build\rThis command generates static content into the build directory and can be served using any static contents hosting service.\nDeployment Using SSH:\n$ USE_SSH=true npm deploy\rNot using SSH:\n$ GIT_USER=\u0026lt;Your GitHub username\u0026gt; npm deploy\rIf you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the gh-pages branch.\nTo Translate website in to any language mkdir -p i18n/\u0026lt;SUPPORTED_LANG\u0026gt;/docusaurus-plugin-content-docs/current cp -r docs/** i18n/\u0026lt;SUPPORTED_LANG\u0026gt;/docusaurus-plugin-content-docs/current\rTo update/translate the new content\nnpm run write-translations -- --locale \u0026lt;SUPPORTED_LANG\u0026gt;\r","date":"0001-01-01","id":85,"permalink":"/ikure-whims-usermanual/ikure-whims-usermanual/commands/","summary":"\u003ch1 id=\"website\"\u003eWebsite\u003c/h1\u003e\n\u003cp\u003eThis website is built using \u003ca href=\"https://docusaurus.io/\"\u003eDocusaurus 2\u003c/a\u003e, a modern static website generator.\u003c/p\u003e\n\u003ch3 id=\"installation\"\u003eInstallation\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ npm\u003c/code\u003e\u003c/pre\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"local-development\"\u003eLocal Development\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cpre tabindex=\"0\"\u003e\u003ccode\u003e$ npm start\u003c/code\u003e\u003c/pre\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eThis command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.\u003c/p\u003e","tags":[],"title":"Commands"},{"content":"State management in WHIMS 360 portal using Context API What is Context API? Context API provides a way to pass data through the component tree without passing props at every level. It helps when some global state (like user authentication, theme, etc.) needs to be accessed by many components. Let’s transform this into a UserRoleContext to focus entirely on managing user roles, such as facility_manager or admin, retrieved from an API.\nUserRoleContext with Role Management Example We’ll create a UserRoleContext to handle fetching, storing, and providing access to the user\u0026rsquo;s role from an API.\nFolder Structure Inside src/:\nsrc/\r│\r├── components/\r├── context/\r│ └── UserRoleContext.tsx\r├── pages/\r│ ├── Dashboard.tsx\r│ ├── AdminPage.tsx\r│ └── Login.tsx\r└── App.tsx\r1. Create UserRoleContext Here’s how we define a context to manage user roles.\nUserRoleContext.tsx import React, { createContext, useContext, useEffect, useState, ReactNode } from \u0026#34;react\u0026#34;; // Define the shape of UserRoleContext interface UserRoleContextType { role: string | null; fetchUserRole: () =\u0026gt; Promise\u0026lt;void\u0026gt;; isLoading: boolean; } // Create context with default value undefined for safety const UserRoleContext = createContext\u0026lt;UserRoleContextType | undefined\u0026gt;(undefined); // Props for UserRoleProvider interface UserRoleProviderProps { children: ReactNode; } // Provider component export const UserRoleProvider: React.FC\u0026lt;UserRoleProviderProps\u0026gt; = ({ children }) =\u0026gt; { const [role, setRole] = useState\u0026lt;string | null\u0026gt;(null); const [isLoading, setIsLoading] = useState\u0026lt;boolean\u0026gt;(true); // Simulate an API call to fetch user role const fetchUserRole = async () =\u0026gt; { setIsLoading(true); try { const response = await fetch(\u0026#34;/api/user/role\u0026#34;); // Replace with your actual API const data = await response.json(); setRole(data.role); // Example: { role: \u0026#39;facility_manager\u0026#39; } } catch (error) { console.error(\u0026#34;Failed to fetch user role:\u0026#34;, error); setRole(null); } finally { setIsLoading(false); } }; useEffect(() =\u0026gt; { fetchUserRole(); }, []); return \u0026lt;UserRoleContext.Provider value={{ role, fetchUserRole, isLoading }}\u0026gt;{children}\u0026lt;/UserRoleContext.Provider\u0026gt;; }; // Custom hook to use UserRoleContext export const useUserRole = () =\u0026gt; { const context = useContext(UserRoleContext); if (!context) { throw new Error(\u0026#34;useUserRole must be used within a UserRoleProvider\u0026#34;); } return context; };\r2. Create Pages Based on Role AdminPage.tsx This page will be accessible only for admin users.\nimport React from \u0026#34;react\u0026#34;; import { useUserRole } from \u0026#34;../context/UserRoleContext\u0026#34;; const AdminPage: React.FC = () =\u0026gt; { const { role } = useUserRole(); if (role !== \u0026#34;admin\u0026#34;) { return \u0026lt;p\u0026gt;Access denied. You are not an admin.\u0026lt;/p\u0026gt;; } return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Admin Page\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Welcome, Admin!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; ); }; export default AdminPage;\rDashboard.tsx This page is accessible for all users, but it shows different content based on the user’s role.\nimport React from \u0026#34;react\u0026#34;; import { useUserRole } from \u0026#34;../context/UserRoleContext\u0026#34;; const Dashboard: React.FC = () =\u0026gt; { const { role, isLoading } = useUserRole(); if (isLoading) { return \u0026lt;p\u0026gt;Loading...\u0026lt;/p\u0026gt;; } return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Dashboard\u0026lt;/h2\u0026gt; {role === \u0026#34;facility_manager\u0026#34; \u0026amp;\u0026amp; \u0026lt;p\u0026gt;Welcome, Facility Manager!\u0026lt;/p\u0026gt;} {role === \u0026#34;admin\u0026#34; \u0026amp;\u0026amp; \u0026lt;p\u0026gt;Welcome, Admin!\u0026lt;/p\u0026gt;} \u0026lt;/div\u0026gt; ); }; export default Dashboard;\r3. Implement Routes In src/App.tsx, define routes with role-based access.\nApp.tsx import React from \u0026#34;react\u0026#34;; import { BrowserRouter as Router, Route, Routes, Navigate } from \u0026#34;react-router-dom\u0026#34;; import { UserRoleProvider } from \u0026#34;./context/UserRoleContext\u0026#34;; import Login from \u0026#34;./pages/Login\u0026#34;; import Dashboard from \u0026#34;./pages/Dashboard\u0026#34;; import AdminPage from \u0026#34;./pages/AdminPage\u0026#34;; const App: React.FC = () =\u0026gt; { return ( \u0026lt;UserRoleProvider\u0026gt; \u0026lt;Router\u0026gt; \u0026lt;Routes\u0026gt; \u0026lt;Route path=\u0026#34;/login\u0026#34; element={\u0026lt;Login /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/dashboard\u0026#34; element={\u0026lt;Dashboard /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;/admin\u0026#34; element={\u0026lt;AdminPage /\u0026gt;} /\u0026gt; \u0026lt;Route path=\u0026#34;*\u0026#34; element={\u0026lt;Navigate to=\u0026#34;/login\u0026#34; /\u0026gt;} /\u0026gt; \u0026lt;/Routes\u0026gt; \u0026lt;/Router\u0026gt; \u0026lt;/UserRoleProvider\u0026gt; ); }; export default App;\r4. Login Page Simulate a login that redirects the user to the Dashboard.\nLogin.tsx import React from \u0026#34;react\u0026#34;; import { useNavigate } from \u0026#34;react-router-dom\u0026#34;; import { useUserRole } from \u0026#34;../context/UserRoleContext\u0026#34;; const Login: React.FC = () =\u0026gt; { const { fetchUserRole } = useUserRole(); const navigate = useNavigate(); const handleLogin = async () =\u0026gt; { await fetchUserRole(); // Fetch user role after login navigate(\u0026#34;/dashboard\u0026#34;); }; return ( \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Login\u0026lt;/h2\u0026gt; \u0026lt;button onClick={handleLogin}\u0026gt;Login\u0026lt;/button\u0026gt; \u0026lt;/div\u0026gt; ); }; export default Login;\r5. Testing the Flow On visiting /login, the user clicks Login, which triggers fetchUserRole. After login, the user is redirected to /dashboard and sees content based on their role. If the user tries to visit /admin without the correct role, they will see an \u0026ldquo;Access denied\u0026rdquo; message. ","date":"0001-01-01","id":86,"permalink":"/360-whims/360-whims/state-management/context-api/","summary":"\u003ch1 id=\"state-management-in-whims-360-portal-using-context-api\"\u003eState management in WHIMS 360 portal using Context API\u003c/h1\u003e\n\u003chr\u003e\n\u003ch2 id=\"what-is-context-api\"\u003e\u003cstrong\u003eWhat is Context API?\u003c/strong\u003e\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eContext API provides a way to pass data through the component tree without passing props at every level.\u003c/li\u003e\n\u003cli\u003eIt helps when some global state (like user authentication, theme, etc.) needs to be accessed by many components.\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003cp\u003eLet’s transform this into a \u003cstrong\u003eUserRoleContext\u003c/strong\u003e to focus entirely on managing user roles, such as \u003ccode\u003efacility_manager\u003c/code\u003e or \u003ccode\u003eadmin\u003c/code\u003e, retrieved from an API.\u003c/p\u003e","tags":[],"title":"Context API"},{"content":"","date":"0001-01-01","id":87,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"\r🎉 Ultra-simplified explanation to design patterns! 🎉\rA topic that can easily make anyone's mind wobble. Here I try to make them stick in to your\nmind (and maybe mine) by explaining them in the simplest way possible.\rCheck out my other project and say \u0026ldquo;hi\u0026rdquo; on Twitter.\nCreational Design Patterns Structural Design Patterns Behavioral Design Patterns Simple Factory Adapter Chain of Responsibility Factory Method Bridge Command Abstract Factory Composite Iterator Builder Decorator Mediator Prototype Facade Memento Singleton Flyweight Observer Proxy Visitor Strategy State Template Method Introduction Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.\nDesign patterns are solutions to recurring problems; guidelines on how to tackle certain problems\nWikipedia describes them as\nIn software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. It is a description or template for how to solve a problem that can be used in many different situations.\n⚠️ Be Careful Design patterns are not a silver bullet to all your problems. Do not try to force them; bad things are supposed to happen, if done so. Keep in mind that design patterns are solutions to problems, not solutions finding problems; so don\u0026rsquo;t overthink. If used in a correct place in a correct manner, they can prove to be a savior; or else they can result in a horrible mess of a code. Also note that the code samples below are in PHP-7, however this shouldn\u0026rsquo;t stop you because the concepts are same anyways.\nTypes of Design Patterns Creational Structural Behavioral Creational Design Patterns In plain words\nCreational patterns are focused towards how to instantiate an object or group of related objects.\nWikipedia says\nIn software engineering, creational design patterns are design patterns that deal with object creation mechanisms, trying to create objects in a manner suitable to the situation. The basic form of object creation could result in design problems or added complexity to the design. Creational design patterns solve this problem by somehow controlling this object creation.\nSimple Factory Factory Method Abstract Factory Builder Prototype Singleton 🏠 Simple Factory Real world example\nConsider, you are building a house and you need doors. You can either put on your carpenter clothes, bring some wood, glue, nails and all the tools required to build the door and start building it in your house or you can simply call the factory and get the built door delivered to you so that you don\u0026rsquo;t need to learn anything about the door making or to deal with the mess that comes with making it.\nIn plain words\nSimple factory simply generates an instance for client without exposing any instantiation logic to the client\nWikipedia says\nIn object-oriented programming (OOP), a factory is an object for creating other objects – formally a factory is a function or method that returns objects of a varying prototype or class from some method call, which is assumed to be \u0026ldquo;new\u0026rdquo;.\nProgrammatic Example\nFirst of all we have a door interface and the implementation\ninterface Door { public function getWidth(): float; public function getHeight(): float; } class WoodenDoor implements Door { protected $width; protected $height; public function __construct(float $width, float $height) { $this-\u0026gt;width = $width; $this-\u0026gt;height = $height; } public function getWidth(): float { return $this-\u0026gt;width; } public function getHeight(): float { return $this-\u0026gt;height; } }\rThen we have our door factory that makes the door and returns it\nclass DoorFactory { public static function makeDoor($width, $height): Door { return new WoodenDoor($width, $height); } }\rAnd then it can be used as\n// Make me a door of 100x200 $door = DoorFactory::makeDoor(100, 200); echo \u0026#39;Width: \u0026#39; . $door-\u0026gt;getWidth(); echo \u0026#39;Height: \u0026#39; . $door-\u0026gt;getHeight(); // Make me a door of 50x100 $door2 = DoorFactory::makeDoor(50, 100);\rWhen to Use?\nWhen creating an object is not just a few assignments and involves some logic, it makes sense to put it in a dedicated factory instead of repeating the same code everywhere.\n🏭 Factory Method Real world example\nConsider the case of a hiring manager. It is impossible for one person to interview for each of the positions. Based on the job opening, she has to decide and delegate the interview steps to different people.\nIn plain words\nIt provides a way to delegate the instantiation logic to child classes.\nWikipedia says\nIn class-based programming, the factory method pattern is a creational pattern that uses factory methods to deal with the problem of creating objects without having to specify the exact class of the object that will be created. This is done by creating objects by calling a factory method—either specified in an interface and implemented by child classes, or implemented in a base class and optionally overridden by derived classes—rather than by calling a constructor.\nProgrammatic Example\nTaking our hiring manager example above. First of all we have an interviewer interface and some implementations for it\ninterface Interviewer { public function askQuestions(); } class Developer implements Interviewer { public function askQuestions() { echo \u0026#39;Asking about design patterns!\u0026#39;; } } class CommunityExecutive implements Interviewer { public function askQuestions() { echo \u0026#39;Asking about community building\u0026#39;; } }\rNow let us create our HiringManager\nabstract class HiringManager { // Factory method abstract protected function makeInterviewer(): Interviewer; public function takeInterview() { $interviewer = $this-\u0026gt;makeInterviewer(); $interviewer-\u0026gt;askQuestions(); } }\rNow any child can extend it and provide the required interviewer\nclass DevelopmentManager extends HiringManager { protected function makeInterviewer(): Interviewer { return new Developer(); } } class MarketingManager extends HiringManager { protected function makeInterviewer(): Interviewer { return new CommunityExecutive(); } }\rand then it can be used as\n$devManager = new DevelopmentManager(); $devManager-\u0026gt;takeInterview(); // Output: Asking about design patterns $marketingManager = new MarketingManager(); $marketingManager-\u0026gt;takeInterview(); // Output: Asking about community building. When to use?\nUseful when there is some generic processing in a class but the required sub-class is dynamically decided at runtime. Or putting it in other words, when the client doesn\u0026rsquo;t know what exact sub-class it might need.\n🔨 Abstract Factory Real world example\nExtending our door example from Simple Factory. Based on your needs you might get a wooden door from a wooden door shop, iron door from an iron shop or a PVC door from the relevant shop. Plus you might need a guy with different kind of specialities to fit the door, for example a carpenter for wooden door, welder for iron door etc. As you can see there is a dependency between the doors now, wooden door needs carpenter, iron door needs a welder etc.\nIn plain words\nA factory of factories; a factory that groups the individual but related/dependent factories together without specifying their concrete classes.\nWikipedia says\nThe abstract factory pattern provides a way to encapsulate a group of individual factories that have a common theme without specifying their concrete classes\nProgrammatic Example\nTranslating the door example above. First of all we have our Door interface and some implementation for it\ninterface Door { public function getDescription(); } class WoodenDoor implements Door { public function getDescription() { echo \u0026#39;I am a wooden door\u0026#39;; } } class IronDoor implements Door { public function getDescription() { echo \u0026#39;I am an iron door\u0026#39;; } }\rThen we have some fitting experts for each door type\ninterface DoorFittingExpert { public function getDescription(); } class Welder implements DoorFittingExpert { public function getDescription() { echo \u0026#39;I can only fit iron doors\u0026#39;; } } class Carpenter implements DoorFittingExpert { public function getDescription() { echo \u0026#39;I can only fit wooden doors\u0026#39;; } }\rNow we have our abstract factory that would let us make family of related objects i.e. wooden door factory would create a wooden door and wooden door fitting expert and iron door factory would create an iron door and iron door fitting expert\ninterface DoorFactory { public function makeDoor(): Door; public function makeFittingExpert(): DoorFittingExpert; } // Wooden factory to return carpenter and wooden door class WoodenDoorFactory implements DoorFactory { public function makeDoor(): Door { return new WoodenDoor(); } public function makeFittingExpert(): DoorFittingExpert { return new Carpenter(); } } // Iron door factory to get iron door and the relevant fitting expert class IronDoorFactory implements DoorFactory { public function makeDoor(): Door { return new IronDoor(); } public function makeFittingExpert(): DoorFittingExpert { return new Welder(); } }\rAnd then it can be used as\n$woodenFactory = new WoodenDoorFactory(); $door = $woodenFactory-\u0026gt;makeDoor(); $expert = $woodenFactory-\u0026gt;makeFittingExpert(); $door-\u0026gt;getDescription(); // Output: I am a wooden door $expert-\u0026gt;getDescription(); // Output: I can only fit wooden doors // Same for Iron Factory $ironFactory = new IronDoorFactory(); $door = $ironFactory-\u0026gt;makeDoor(); $expert = $ironFactory-\u0026gt;makeFittingExpert(); $door-\u0026gt;getDescription(); // Output: I am an iron door $expert-\u0026gt;getDescription(); // Output: I can only fit iron doors As you can see the wooden door factory has encapsulated the carpenter and the wooden door also iron door factory has encapsulated the iron door and welder. And thus it had helped us make sure that for each of the created door, we do not get a wrong fitting expert.\nWhen to use?\nWhen there are interrelated dependencies with not-that-simple creation logic involved\n👷 Builder Real world example\nImagine you are at Hardee\u0026rsquo;s and you order a specific deal, lets say, \u0026ldquo;Big Hardee\u0026rdquo; and they hand it over to you without any questions; this is the example of simple factory. But there are cases when the creation logic might involve more steps. For example you want a customized Subway deal, you have several options in how your burger is made e.g what bread do you want? what types of sauces would you like? What cheese would you want? etc. In such cases builder pattern comes to the rescue.\nIn plain words\nAllows you to create different flavors of an object while avoiding constructor pollution. Useful when there could be several flavors of an object. Or when there are a lot of steps involved in creation of an object.\nWikipedia says\nThe builder pattern is an object creation software design pattern with the intentions of finding a solution to the telescoping constructor anti-pattern.\nHaving said that let me add a bit about what telescoping constructor anti-pattern is. At one point or the other we have all seen a constructor like below:\npublic function __construct($size, $cheese = true, $pepperoni = true, $tomato = false, $lettuce = true) { }\rAs you can see; the number of constructor parameters can quickly get out of hand and it might become difficult to understand the arrangement of parameters. Plus this parameter list could keep on growing if you would want to add more options in future. This is called telescoping constructor anti-pattern.\nProgrammatic Example\nThe sane alternative is to use the builder pattern. First of all we have our burger that we want to make\nclass Burger { protected $size; protected $cheese = false; protected $pepperoni = false; protected $lettuce = false; protected $tomato = false; public function __construct(BurgerBuilder $builder) { $this-\u0026gt;size = $builder-\u0026gt;size; $this-\u0026gt;cheese = $builder-\u0026gt;cheese; $this-\u0026gt;pepperoni = $builder-\u0026gt;pepperoni; $this-\u0026gt;lettuce = $builder-\u0026gt;lettuce; $this-\u0026gt;tomato = $builder-\u0026gt;tomato; } }\rAnd then we have the builder\nclass BurgerBuilder { public $size; public $cheese = false; public $pepperoni = false; public $lettuce = false; public $tomato = false; public function __construct(int $size) { $this-\u0026gt;size = $size; } public function addPepperoni() { $this-\u0026gt;pepperoni = true; return $this; } public function addLettuce() { $this-\u0026gt;lettuce = true; return $this; } public function addCheese() { $this-\u0026gt;cheese = true; return $this; } public function addTomato() { $this-\u0026gt;tomato = true; return $this; } public function build(): Burger { return new Burger($this); } }\rAnd then it can be used as:\n$burger = (new BurgerBuilder(14)) -\u0026gt;addPepperoni() -\u0026gt;addLettuce() -\u0026gt;addTomato() -\u0026gt;build();\rWhen to use?\nWhen there could be several flavors of an object and to avoid the constructor telescoping. The key difference from the factory pattern is that; factory pattern is to be used when the creation is a one step process while builder pattern is to be used when the creation is a multi step process.\n🐑 Prototype Real world example\nRemember dolly? The sheep that was cloned! Lets not get into the details but the key point here is that it is all about cloning\nIn plain words\nCreate object based on an existing object through cloning.\nWikipedia says\nThe prototype pattern is a creational design pattern in software development. It is used when the type of objects to create is determined by a prototypical instance, which is cloned to produce new objects.\nIn short, it allows you to create a copy of an existing object and modify it to your needs, instead of going through the trouble of creating an object from scratch and setting it up.\nProgrammatic Example\nIn PHP, it can be easily done using clone\nclass Sheep { protected $name; protected $category; public function __construct(string $name, string $category = \u0026#39;Mountain Sheep\u0026#39;) { $this-\u0026gt;name = $name; $this-\u0026gt;category = $category; } public function setName(string $name) { $this-\u0026gt;name = $name; } public function getName() { return $this-\u0026gt;name; } public function setCategory(string $category) { $this-\u0026gt;category = $category; } public function getCategory() { return $this-\u0026gt;category; } }\rThen it can be cloned like below\n$original = new Sheep(\u0026#39;Jolly\u0026#39;); echo $original-\u0026gt;getName(); // Jolly echo $original-\u0026gt;getCategory(); // Mountain Sheep // Clone and modify what is required $cloned = clone $original; $cloned-\u0026gt;setName(\u0026#39;Dolly\u0026#39;); echo $cloned-\u0026gt;getName(); // Dolly echo $cloned-\u0026gt;getCategory(); // Mountain sheep Also you could use the magic method __clone to modify the cloning behavior.\nWhen to use?\nWhen an object is required that is similar to existing object or when the creation would be expensive as compared to cloning.\n💍 Singleton Real world example\nThere can only be one president of a country at a time. The same president has to be brought to action, whenever duty calls. President here is singleton.\nIn plain words\nEnsures that only one object of a particular class is ever created.\nWikipedia says\nIn software engineering, the singleton pattern is a software design pattern that restricts the instantiation of a class to one object. This is useful when exactly one object is needed to coordinate actions across the system.\nSingleton pattern is actually considered an anti-pattern and overuse of it should be avoided. It is not necessarily bad and could have some valid use-cases but should be used with caution because it introduces a global state in your application and change to it in one place could affect in the other areas and it could become pretty difficult to debug. The other bad thing about them is it makes your code tightly coupled plus mocking the singleton could be difficult.\nProgrammatic Example\nTo create a singleton, make the constructor private, disable cloning, disable extension and create a static variable to house the instance\nfinal class President { private static $instance; private function __construct() { // Hide the constructor } public static function getInstance(): President { if (!self::$instance) { self::$instance = new self(); } return self::$instance; } private function __clone() { // Disable cloning } private function __wakeup() { // Disable unserialize } }\rThen in order to use\n$president1 = President::getInstance(); $president2 = President::getInstance(); var_dump($president1 === $president2); // true Structural Design Patterns In plain words\nStructural patterns are mostly concerned with object composition or in other words how the entities can use each other. Or yet another explanation would be, they help in answering \u0026ldquo;How to build a software component?\u0026rdquo;\nWikipedia says\nIn software engineering, structural design patterns are design patterns that ease the design by identifying a simple way to realize relationships between entities.\nAdapter Bridge Composite Decorator Facade Flyweight Proxy 🔌 Adapter Real world example\nConsider that you have some pictures in your memory card and you need to transfer them to your computer. In order to transfer them you need some kind of adapter that is compatible with your computer ports so that you can attach memory card to your computer. In this case card reader is an adapter. Another example would be the famous power adapter; a three legged plug can\u0026rsquo;t be connected to a two pronged outlet, it needs to use a power adapter that makes it compatible with the two pronged outlet. Yet another example would be a translator translating words spoken by one person to another\nIn plain words\nAdapter pattern lets you wrap an otherwise incompatible object in an adapter to make it compatible with another class.\nWikipedia says\nIn software engineering, the adapter pattern is a software design pattern that allows the interface of an existing class to be used as another interface. It is often used to make existing classes work with others without modifying their source code.\nProgrammatic Example\nConsider a game where there is a hunter and he hunts lions.\nFirst we have an interface Lion that all types of lions have to implement\ninterface Lion { public function roar(); } class AfricanLion implements Lion { public function roar() { } } class AsianLion implements Lion { public function roar() { } }\rAnd hunter expects any implementation of Lion interface to hunt.\nclass Hunter { public function hunt(Lion $lion) { $lion-\u0026gt;roar(); } }\rNow let\u0026rsquo;s say we have to add a WildDog in our game so that hunter can hunt that also. But we can\u0026rsquo;t do that directly because dog has a different interface. To make it compatible for our hunter, we will have to create an adapter that is compatible\n// This needs to be added to the game class WildDog { public function bark() { } } // Adapter around wild dog to make it compatible with our game class WildDogAdapter implements Lion { protected $dog; public function __construct(WildDog $dog) { $this-\u0026gt;dog = $dog; } public function roar() { $this-\u0026gt;dog-\u0026gt;bark(); } }\rAnd now the WildDog can be used in our game using WildDogAdapter.\n$wildDog = new WildDog(); $wildDogAdapter = new WildDogAdapter($wildDog); $hunter = new Hunter(); $hunter-\u0026gt;hunt($wildDogAdapter);\r🚡 Bridge Real world example\nConsider you have a website with different pages and you are supposed to allow the user to change the theme. What would you do? Create multiple copies of each of the pages for each of the themes or would you just create separate theme and load them based on the user\u0026rsquo;s preferences? Bridge pattern allows you to do the second i.e.\nIn Plain Words\nBridge pattern is about preferring composition over inheritance. Implementation details are pushed from a hierarchy to another object with a separate hierarchy.\nWikipedia says\nThe bridge pattern is a design pattern used in software engineering that is meant to \u0026ldquo;decouple an abstraction from its implementation so that the two can vary independently\u0026rdquo;\nProgrammatic Example\nTranslating our WebPage example from above. Here we have the WebPage hierarchy\ninterface WebPage { public function __construct(Theme $theme); public function getContent(); } class About implements WebPage { protected $theme; public function __construct(Theme $theme) { $this-\u0026gt;theme = $theme; } public function getContent() { return \u0026#34;About page in \u0026#34; . $this-\u0026gt;theme-\u0026gt;getColor(); } } class Careers implements WebPage { protected $theme; public function __construct(Theme $theme) { $this-\u0026gt;theme = $theme; } public function getContent() { return \u0026#34;Careers page in \u0026#34; . $this-\u0026gt;theme-\u0026gt;getColor(); } }\rAnd the separate theme hierarchy\ninterface Theme { public function getColor(); } class DarkTheme implements Theme { public function getColor() { return \u0026#39;Dark Black\u0026#39;; } } class LightTheme implements Theme { public function getColor() { return \u0026#39;Off white\u0026#39;; } } class AquaTheme implements Theme { public function getColor() { return \u0026#39;Light blue\u0026#39;; } }\rAnd both the hierarchies\n$darkTheme = new DarkTheme(); $about = new About($darkTheme); $careers = new Careers($darkTheme); echo $about-\u0026gt;getContent(); // \u0026#34;About page in Dark Black\u0026#34;; echo $careers-\u0026gt;getContent(); // \u0026#34;Careers page in Dark Black\u0026#34;; 🌿 Composite Real world example\nEvery organization is composed of employees. Each of the employees has the same features i.e. has a salary, has some responsibilities, may or may not report to someone, may or may not have some subordinates etc.\nIn plain words\nComposite pattern lets clients treat the individual objects in a uniform manner.\nWikipedia says\nIn software engineering, the composite pattern is a partitioning design pattern. The composite pattern describes that a group of objects is to be treated in the same way as a single instance of an object. The intent of a composite is to \u0026ldquo;compose\u0026rdquo; objects into tree structures to represent part-whole hierarchies. Implementing the composite pattern lets clients treat individual objects and compositions uniformly.\nProgrammatic Example\nTaking our employees example from above. Here we have different employee types\ninterface Employee { public function __construct(string $name, float $salary); public function getName(): string; public function setSalary(float $salary); public function getSalary(): float; public function getRoles(): array; } class Developer implements Employee { protected $salary; protected $name; protected $roles; public function __construct(string $name, float $salary) { $this-\u0026gt;name = $name; $this-\u0026gt;salary = $salary; } public function getName(): string { return $this-\u0026gt;name; } public function setSalary(float $salary) { $this-\u0026gt;salary = $salary; } public function getSalary(): float { return $this-\u0026gt;salary; } public function getRoles(): array { return $this-\u0026gt;roles; } } class Designer implements Employee { protected $salary; protected $name; protected $roles; public function __construct(string $name, float $salary) { $this-\u0026gt;name = $name; $this-\u0026gt;salary = $salary; } public function getName(): string { return $this-\u0026gt;name; } public function setSalary(float $salary) { $this-\u0026gt;salary = $salary; } public function getSalary(): float { return $this-\u0026gt;salary; } public function getRoles(): array { return $this-\u0026gt;roles; } }\rThen we have an organization which consists of several different types of employees\nclass Organization { protected $employees; public function addEmployee(Employee $employee) { $this-\u0026gt;employees[] = $employee; } public function getNetSalaries(): float { $netSalary = 0; foreach ($this-\u0026gt;employees as $employee) { $netSalary += $employee-\u0026gt;getSalary(); } return $netSalary; } }\rAnd then it can be used as\n// Prepare the employees $john = new Developer(\u0026#39;John Doe\u0026#39;, 12000); $jane = new Designer(\u0026#39;Jane Doe\u0026#39;, 15000); // Add them to organization $organization = new Organization(); $organization-\u0026gt;addEmployee($john); $organization-\u0026gt;addEmployee($jane); echo \u0026#34;Net salaries: \u0026#34; . $organization-\u0026gt;getNetSalaries(); // Net Salaries: 27000 ☕ Decorator Real world example\nImagine you run a car service shop offering multiple services. Now how do you calculate the bill to be charged? You pick one service and dynamically keep adding to it the prices for the provided services till you get the final cost. Here each type of service is a decorator.\nIn plain words\nDecorator pattern lets you dynamically change the behavior of an object at run time by wrapping them in an object of a decorator class.\nWikipedia says\nIn object-oriented programming, the decorator pattern is a design pattern that allows behavior to be added to an individual object, either statically or dynamically, without affecting the behavior of other objects from the same class. The decorator pattern is often useful for adhering to the Single Responsibility Principle, as it allows functionality to be divided between classes with unique areas of concern.\nProgrammatic Example\nLets take coffee for example. First of all we have a simple coffee implementing the coffee interface\ninterface Coffee { public function getCost(); public function getDescription(); } class SimpleCoffee implements Coffee { public function getCost() { return 10; } public function getDescription() { return \u0026#39;Simple coffee\u0026#39;; } }\rWe want to make the code extensible to allow options to modify it if required. Lets make some add-ons (decorators)\nclass MilkCoffee implements Coffee { protected $coffee; public function __construct(Coffee $coffee) { $this-\u0026gt;coffee = $coffee; } public function getCost() { return $this-\u0026gt;coffee-\u0026gt;getCost() + 2; } public function getDescription() { return $this-\u0026gt;coffee-\u0026gt;getDescription() . \u0026#39;, milk\u0026#39;; } } class WhipCoffee implements Coffee { protected $coffee; public function __construct(Coffee $coffee) { $this-\u0026gt;coffee = $coffee; } public function getCost() { return $this-\u0026gt;coffee-\u0026gt;getCost() + 5; } public function getDescription() { return $this-\u0026gt;coffee-\u0026gt;getDescription() . \u0026#39;, whip\u0026#39;; } } class VanillaCoffee implements Coffee { protected $coffee; public function __construct(Coffee $coffee) { $this-\u0026gt;coffee = $coffee; } public function getCost() { return $this-\u0026gt;coffee-\u0026gt;getCost() + 3; } public function getDescription() { return $this-\u0026gt;coffee-\u0026gt;getDescription() . \u0026#39;, vanilla\u0026#39;; } }\rLets make a coffee now\n$someCoffee = new SimpleCoffee(); echo $someCoffee-\u0026gt;getCost(); // 10 echo $someCoffee-\u0026gt;getDescription(); // Simple Coffee $someCoffee = new MilkCoffee($someCoffee); echo $someCoffee-\u0026gt;getCost(); // 12 echo $someCoffee-\u0026gt;getDescription(); // Simple Coffee, milk $someCoffee = new WhipCoffee($someCoffee); echo $someCoffee-\u0026gt;getCost(); // 17 echo $someCoffee-\u0026gt;getDescription(); // Simple Coffee, milk, whip $someCoffee = new VanillaCoffee($someCoffee); echo $someCoffee-\u0026gt;getCost(); // 20 echo $someCoffee-\u0026gt;getDescription(); // Simple Coffee, milk, whip, vanilla 📦 Facade Real world example\nHow do you turn on the computer? \u0026ldquo;Hit the power button\u0026rdquo; you say! That is what you believe because you are using a simple interface that computer provides on the outside, internally it has to do a lot of stuff to make it happen. This simple interface to the complex subsystem is a facade.\nIn plain words\nFacade pattern provides a simplified interface to a complex subsystem.\nWikipedia says\nA facade is an object that provides a simplified interface to a larger body of code, such as a class library.\nProgrammatic Example\nTaking our computer example from above. Here we have the computer class\nclass Computer { public function getElectricShock() { echo \u0026#34;Ouch!\u0026#34;; } public function makeSound() { echo \u0026#34;Beep beep!\u0026#34;; } public function showLoadingScreen() { echo \u0026#34;Loading..\u0026#34;; } public function bam() { echo \u0026#34;Ready to be used!\u0026#34;; } public function closeEverything() { echo \u0026#34;Bup bup bup buzzzz!\u0026#34;; } public function sooth() { echo \u0026#34;Zzzzz\u0026#34;; } public function pullCurrent() { echo \u0026#34;Haaah!\u0026#34;; } }\rHere we have the facade\nclass ComputerFacade { protected $computer; public function __construct(Computer $computer) { $this-\u0026gt;computer = $computer; } public function turnOn() { $this-\u0026gt;computer-\u0026gt;getElectricShock(); $this-\u0026gt;computer-\u0026gt;makeSound(); $this-\u0026gt;computer-\u0026gt;showLoadingScreen(); $this-\u0026gt;computer-\u0026gt;bam(); } public function turnOff() { $this-\u0026gt;computer-\u0026gt;closeEverything(); $this-\u0026gt;computer-\u0026gt;pullCurrent(); $this-\u0026gt;computer-\u0026gt;sooth(); } }\rNow to use the facade\n$computer = new ComputerFacade(new Computer()); $computer-\u0026gt;turnOn(); // Ouch! Beep beep! Loading.. Ready to be used! $computer-\u0026gt;turnOff(); // Bup bup buzzz! Haah! Zzzzz 🍃 Flyweight Real world example\nDid you ever have fresh tea from some stall? They often make more than one cup that you demanded and save the rest for any other customer so to save the resources e.g. gas etc. Flyweight pattern is all about that i.e. sharing.\nIn plain words\nIt is used to minimize memory usage or computational expenses by sharing as much as possible with similar objects.\nWikipedia says\nIn computer programming, flyweight is a software design pattern. A flyweight is an object that minimizes memory use by sharing as much data as possible with other similar objects; it is a way to use objects in large numbers when a simple repeated representation would use an unacceptable amount of memory.\nProgrammatic example\nTranslating our tea example from above. First of all we have tea types and tea maker\n// Anything that will be cached is flyweight. // Types of tea here will be flyweights. class KarakTea { } // Acts as a factory and saves the tea class TeaMaker { protected $availableTea = []; public function make($preference) { if (empty($this-\u0026gt;availableTea[$preference])) { $this-\u0026gt;availableTea[$preference] = new KarakTea(); } return $this-\u0026gt;availableTea[$preference]; } }\rThen we have the TeaShop which takes orders and serves them\nclass TeaShop { protected $orders; protected $teaMaker; public function __construct(TeaMaker $teaMaker) { $this-\u0026gt;teaMaker = $teaMaker; } public function takeOrder(string $teaType, int $table) { $this-\u0026gt;orders[$table] = $this-\u0026gt;teaMaker-\u0026gt;make($teaType); } public function serve() { foreach ($this-\u0026gt;orders as $table =\u0026gt; $tea) { echo \u0026#34;Serving tea to table# \u0026#34; . $table; } } }\rAnd it can be used as below\n$teaMaker = new TeaMaker(); $shop = new TeaShop($teaMaker); $shop-\u0026gt;takeOrder(\u0026#39;less sugar\u0026#39;, 1); $shop-\u0026gt;takeOrder(\u0026#39;more milk\u0026#39;, 2); $shop-\u0026gt;takeOrder(\u0026#39;without sugar\u0026#39;, 5); $shop-\u0026gt;serve(); // Serving tea to table# 1 // Serving tea to table# 2 // Serving tea to table# 5 🎱 Proxy Real world example\nHave you ever used an access card to go through a door? There are multiple options to open that door i.e. it can be opened either using access card or by pressing a button that bypasses the security. The door\u0026rsquo;s main functionality is to open but there is a proxy added on top of it to add some functionality. Let me better explain it using the code example below.\nIn plain words\nUsing the proxy pattern, a class represents the functionality of another class.\nWikipedia says\nA proxy, in its most general form, is a class functioning as an interface to something else. A proxy is a wrapper or agent object that is being called by the client to access the real serving object behind the scenes. Use of the proxy can simply be forwarding to the real object, or can provide additional logic. In the proxy extra functionality can be provided, for example caching when operations on the real object are resource intensive, or checking preconditions before operations on the real object are invoked.\nProgrammatic Example\nTaking our security door example from above. Firstly we have the door interface and an implementation of door\ninterface Door { public function open(); public function close(); } class LabDoor implements Door { public function open() { echo \u0026#34;Opening lab door\u0026#34;; } public function close() { echo \u0026#34;Closing the lab door\u0026#34;; } }\rThen we have a proxy to secure any doors that we want\nclass SecuredDoor implements Door { protected $door; public function __construct(Door $door) { $this-\u0026gt;door = $door; } public function open($password) { if ($this-\u0026gt;authenticate($password)) { $this-\u0026gt;door-\u0026gt;open(); } else { echo \u0026#34;Big no! It ain\u0026#39;t possible.\u0026#34;; } } public function authenticate($password) { return $password === \u0026#39;$ecr@t\u0026#39;; } public function close() { $this-\u0026gt;door-\u0026gt;close(); } }\rAnd here is how it can be used\n$door = new SecuredDoor(new LabDoor()); $door-\u0026gt;open(\u0026#39;invalid\u0026#39;); // Big no! It ain\u0026#39;t possible. $door-\u0026gt;open(\u0026#39;$ecr@t\u0026#39;); // Opening lab door $door-\u0026gt;close(); // Closing lab door Yet another example would be some sort of data-mapper implementation. For example, I recently made an ODM (Object Data Mapper) for MongoDB using this pattern where I wrote a proxy around mongo classes while utilizing the magic method __call(). All the method calls were proxied to the original mongo class and result retrieved was returned as it is but in case of find or findOne data was mapped to the required class objects and the object was returned instead of Cursor.\nBehavioral Design Patterns In plain words\nIt is concerned with assignment of responsibilities between the objects. What makes them different from structural patterns is they don\u0026rsquo;t just specify the structure but also outline the patterns for message passing/communication between them. Or in other words, they assist in answering \u0026ldquo;How to run a behavior in software component?\u0026rdquo;\nWikipedia says\nIn software engineering, behavioral design patterns are design patterns that identify common communication patterns between objects and realize these patterns. By doing so, these patterns increase flexibility in carrying out this communication.\nChain of Responsibility Command Iterator Mediator Memento Observer Visitor Strategy State Template Method 🔗 Chain of Responsibility Real world example\nFor example, you have three payment methods (A, B and C) setup in your account; each having a different amount in it. A has 100 USD, B has 300 USD and C having 1000 USD and the preference for payments is chosen as A then B then C. You try to purchase something that is worth 210 USD. Using Chain of Responsibility, first of all account A will be checked if it can make the purchase, if yes purchase will be made and the chain will be broken. If not, request will move forward to account B checking for amount if yes chain will be broken otherwise the request will keep forwarding till it finds the suitable handler. Here A, B and C are links of the chain and the whole phenomenon is Chain of Responsibility.\nIn plain words\nIt helps building a chain of objects. Request enters from one end and keeps going from object to object till it finds the suitable handler.\nWikipedia says\nIn object-oriented design, the chain-of-responsibility pattern is a design pattern consisting of a source of command objects and a series of processing objects. Each processing object contains logic that defines the types of command objects that it can handle; the rest are passed to the next processing object in the chain.\nProgrammatic Example\nTranslating our account example above. First of all we have a base account having the logic for chaining the accounts together and some accounts\nabstract class Account { protected $successor; protected $balance; public function setNext(Account $account) { $this-\u0026gt;successor = $account; } public function pay(float $amountToPay) { if ($this-\u0026gt;canPay($amountToPay)) { echo sprintf(\u0026#39;Paid %s using %s\u0026#39; . PHP_EOL, $amountToPay, get_called_class()); } elseif ($this-\u0026gt;successor) { echo sprintf(\u0026#39;Cannot pay using %s. Proceeding ..\u0026#39; . PHP_EOL, get_called_class()); $this-\u0026gt;successor-\u0026gt;pay($amountToPay); } else { throw new Exception(\u0026#39;None of the accounts have enough balance\u0026#39;); } } public function canPay($amount): bool { return $this-\u0026gt;balance \u0026gt;= $amount; } } class Bank extends Account { protected $balance; public function __construct(float $balance) { $this-\u0026gt;balance = $balance; } } class Paypal extends Account { protected $balance; public function __construct(float $balance) { $this-\u0026gt;balance = $balance; } } class Bitcoin extends Account { protected $balance; public function __construct(float $balance) { $this-\u0026gt;balance = $balance; } }\rNow let\u0026rsquo;s prepare the chain using the links defined above (i.e. Bank, Paypal, Bitcoin)\n// Let\u0026#39;s prepare a chain like below // $bank-\u0026gt;$paypal-\u0026gt;$bitcoin // // First priority bank // If bank can\u0026#39;t pay then paypal // If paypal can\u0026#39;t pay then bit coin $bank = new Bank(100); // Bank with balance 100 $paypal = new Paypal(200); // Paypal with balance 200 $bitcoin = new Bitcoin(300); // Bitcoin with balance 300 $bank-\u0026gt;setNext($paypal); $paypal-\u0026gt;setNext($bitcoin); // Let\u0026#39;s try to pay using the first priority i.e. bank $bank-\u0026gt;pay(259); // Output will be // ============== // Cannot pay using bank. Proceeding .. // Cannot pay using paypal. Proceeding ..: // Paid 259 using Bitcoin! 👮 Command Real world example\nA generic example would be you ordering food at a restaurant. You (i.e. Client) ask the waiter (i.e. Invoker) to bring some food (i.e. Command) and waiter simply forwards the request to Chef (i.e. Receiver) who has the knowledge of what and how to cook. Another example would be you (i.e. Client) switching on (i.e. Command) the television (i.e. Receiver) using a remote control (Invoker).\nIn plain words\nAllows you to encapsulate actions in objects. The key idea behind this pattern is to provide the means to decouple client from receiver.\nWikipedia says\nIn object-oriented programming, the command pattern is a behavioral design pattern in which an object is used to encapsulate all information needed to perform an action or trigger an event at a later time. This information includes the method name, the object that owns the method and values for the method parameters.\nProgrammatic Example\nFirst of all we have the receiver that has the implementation of every action that could be performed\n// Receiver class Bulb { public function turnOn() { echo \u0026#34;Bulb has been lit\u0026#34;; } public function turnOff() { echo \u0026#34;Darkness!\u0026#34;; } }\rthen we have an interface that each of the commands are going to implement and then we have a set of commands\ninterface Command { public function execute(); public function undo(); public function redo(); } // Command class TurnOn implements Command { protected $bulb; public function __construct(Bulb $bulb) { $this-\u0026gt;bulb = $bulb; } public function execute() { $this-\u0026gt;bulb-\u0026gt;turnOn(); } public function undo() { $this-\u0026gt;bulb-\u0026gt;turnOff(); } public function redo() { $this-\u0026gt;execute(); } } class TurnOff implements Command { protected $bulb; public function __construct(Bulb $bulb) { $this-\u0026gt;bulb = $bulb; } public function execute() { $this-\u0026gt;bulb-\u0026gt;turnOff(); } public function undo() { $this-\u0026gt;bulb-\u0026gt;turnOn(); } public function redo() { $this-\u0026gt;execute(); } }\rThen we have an Invoker with whom the client will interact to process any commands\n// Invoker class RemoteControl { public function submit(Command $command) { $command-\u0026gt;execute(); } }\rFinally let\u0026rsquo;s see how we can use it in our client\n$bulb = new Bulb(); $turnOn = new TurnOn($bulb); $turnOff = new TurnOff($bulb); $remote = new RemoteControl(); $remote-\u0026gt;submit($turnOn); // Bulb has been lit! $remote-\u0026gt;submit($turnOff); // Darkness! Command pattern can also be used to implement a transaction based system. Where you keep maintaining the history of commands as soon as you execute them. If the final command is successfully executed, all good otherwise just iterate through the history and keep executing the undo on all the executed commands.\n➿ Iterator Real world example\nAn old radio set will be a good example of iterator, where user could start at some channel and then use next or previous buttons to go through the respective channels. Or take an example of MP3 player or a TV set where you could press the next and previous buttons to go through the consecutive channels or in other words they all provide an interface to iterate through the respective channels, songs or radio stations.\nIn plain words\nIt presents a way to access the elements of an object without exposing the underlying presentation.\nWikipedia says\nIn object-oriented programming, the iterator pattern is a design pattern in which an iterator is used to traverse a container and access the container\u0026rsquo;s elements. The iterator pattern decouples algorithms from containers; in some cases, algorithms are necessarily container-specific and thus cannot be decoupled.\nProgrammatic example\nIn PHP it is quite easy to implement using SPL (Standard PHP Library). Translating our radio stations example from above. First of all we have RadioStation\nclass RadioStation { protected $frequency; public function __construct(float $frequency) { $this-\u0026gt;frequency = $frequency; } public function getFrequency(): float { return $this-\u0026gt;frequency; } }\rThen we have our iterator\nuse Countable; use Iterator; class StationList implements Countable, Iterator { /** @var RadioStation[] $stations */ protected $stations = []; /** @var int $counter */ protected $counter; public function addStation(RadioStation $station) { $this-\u0026gt;stations[] = $station; } public function removeStation(RadioStation $toRemove) { $toRemoveFrequency = $toRemove-\u0026gt;getFrequency(); $this-\u0026gt;stations = array_filter($this-\u0026gt;stations, function (RadioStation $station) use ($toRemoveFrequency) { return $station-\u0026gt;getFrequency() !== $toRemoveFrequency; }); } public function count(): int { return count($this-\u0026gt;stations); } public function current(): RadioStation { return $this-\u0026gt;stations[$this-\u0026gt;counter]; } public function key() { return $this-\u0026gt;counter; } public function next() { $this-\u0026gt;counter++; } public function rewind() { $this-\u0026gt;counter = 0; } public function valid(): bool { return isset($this-\u0026gt;stations[$this-\u0026gt;counter]); } }\rAnd then it can be used as\n$stationList = new StationList(); $stationList-\u0026gt;addStation(new RadioStation(89)); $stationList-\u0026gt;addStation(new RadioStation(101)); $stationList-\u0026gt;addStation(new RadioStation(102)); $stationList-\u0026gt;addStation(new RadioStation(103.2)); foreach($stationList as $station) { echo $station-\u0026gt;getFrequency() . PHP_EOL; } $stationList-\u0026gt;removeStation(new RadioStation(89)); // Will remove station 89 👽 Mediator Real world example\nA general example would be when you talk to someone on your mobile phone, there is a network provider sitting between you and them and your conversation goes through it instead of being directly sent. In this case network provider is mediator.\nIn plain words\nMediator pattern adds a third party object (called mediator) to control the interaction between two objects (called colleagues). It helps reduce the coupling between the classes communicating with each other. Because now they don\u0026rsquo;t need to have the knowledge of each other\u0026rsquo;s implementation.\nWikipedia says\nIn software engineering, the mediator pattern defines an object that encapsulates how a set of objects interact. This pattern is considered to be a behavioral pattern due to the way it can alter the program\u0026rsquo;s running behavior.\nProgrammatic Example\nHere is the simplest example of a chat room (i.e. mediator) with users (i.e. colleagues) sending messages to each other.\nFirst of all, we have the mediator i.e. the chat room\ninterface ChatRoomMediator { public function showMessage(User $user, string $message); } // Mediator class ChatRoom implements ChatRoomMediator { public function showMessage(User $user, string $message) { $time = date(\u0026#39;M d, y H:i\u0026#39;); $sender = $user-\u0026gt;getName(); echo $time . \u0026#39;[\u0026#39; . $sender . \u0026#39;]:\u0026#39; . $message; } }\rThen we have our users i.e. colleagues\nclass User { protected $name; protected $chatMediator; public function __construct(string $name, ChatRoomMediator $chatMediator) { $this-\u0026gt;name = $name; $this-\u0026gt;chatMediator = $chatMediator; } public function getName() { return $this-\u0026gt;name; } public function send($message) { $this-\u0026gt;chatMediator-\u0026gt;showMessage($this, $message); } }\rAnd the usage\n$mediator = new ChatRoom(); $john = new User(\u0026#39;John Doe\u0026#39;, $mediator); $jane = new User(\u0026#39;Jane Doe\u0026#39;, $mediator); $john-\u0026gt;send(\u0026#39;Hi there!\u0026#39;); $jane-\u0026gt;send(\u0026#39;Hey!\u0026#39;); // Output will be // Feb 14, 10:58 [John]: Hi there! // Feb 14, 10:58 [Jane]: Hey! 💾 Memento Real world example\nTake the example of calculator (i.e. originator), where whenever you perform some calculation the last calculation is saved in memory (i.e. memento) so that you can get back to it and maybe get it restored using some action buttons (i.e. caretaker).\nIn plain words\nMemento pattern is about capturing and storing the current state of an object in a manner that it can be restored later on in a smooth manner.\nWikipedia says\nThe memento pattern is a software design pattern that provides the ability to restore an object to its previous state (undo via rollback).\nUsually useful when you need to provide some sort of undo functionality.\nProgrammatic Example\nLets take an example of text editor which keeps saving the state from time to time and that you can restore if you want.\nFirst of all we have our memento object that will be able to hold the editor state\nclass EditorMemento { protected $content; public function __construct(string $content) { $this-\u0026gt;content = $content; } public function getContent() { return $this-\u0026gt;content; } }\rThen we have our editor i.e. originator that is going to use memento object\nclass Editor { protected $content = \u0026#39;\u0026#39;; public function type(string $words) { $this-\u0026gt;content = $this-\u0026gt;content . \u0026#39; \u0026#39; . $words; } public function getContent() { return $this-\u0026gt;content; } public function save() { return new EditorMemento($this-\u0026gt;content); } public function restore(EditorMemento $memento) { $this-\u0026gt;content = $memento-\u0026gt;getContent(); } }\rAnd then it can be used as\n$editor = new Editor(); // Type some stuff $editor-\u0026gt;type(\u0026#39;This is the first sentence.\u0026#39;); $editor-\u0026gt;type(\u0026#39;This is second.\u0026#39;); // Save the state to restore to : This is the first sentence. This is second. $saved = $editor-\u0026gt;save(); // Type some more $editor-\u0026gt;type(\u0026#39;And this is third.\u0026#39;); // Output: Content before Saving echo $editor-\u0026gt;getContent(); // This is the first sentence. This is second. And this is third. // Restoring to last saved state $editor-\u0026gt;restore($saved); $editor-\u0026gt;getContent(); // This is the first sentence. This is second. 😎 Observer Real world example\nA good example would be the job seekers where they subscribe to some job posting site and they are notified whenever there is a matching job opportunity.\nIn plain words\nDefines a dependency between objects so that whenever an object changes its state, all its dependents are notified.\nWikipedia says\nThe observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods.\nProgrammatic example\nTranslating our example from above. First of all we have job seekers that need to be notified for a job posting\nclass JobPost { protected $title; public function __construct(string $title) { $this-\u0026gt;title = $title; } public function getTitle() { return $this-\u0026gt;title; } } class JobSeeker implements Observer { protected $name; public function __construct(string $name) { $this-\u0026gt;name = $name; } public function onJobPosted(JobPost $job) { // Do something with the job posting echo \u0026#39;Hi \u0026#39; . $this-\u0026gt;name . \u0026#39;! New job posted: \u0026#39;. $job-\u0026gt;getTitle(); } }\rThen we have our job postings to which the job seekers will subscribe\nclass EmploymentAgency implements Observable { protected $observers = []; protected function notify(JobPost $jobPosting) { foreach ($this-\u0026gt;observers as $observer) { $observer-\u0026gt;onJobPosted($jobPosting); } } public function attach(Observer $observer) { $this-\u0026gt;observers[] = $observer; } public function addJob(JobPost $jobPosting) { $this-\u0026gt;notify($jobPosting); } }\rThen it can be used as\n// Create subscribers $johnDoe = new JobSeeker(\u0026#39;John Doe\u0026#39;); $janeDoe = new JobSeeker(\u0026#39;Jane Doe\u0026#39;); // Create publisher and attach subscribers $jobPostings = new EmploymentAgency(); $jobPostings-\u0026gt;attach($johnDoe); $jobPostings-\u0026gt;attach($janeDoe); // Add a new job and see if subscribers get notified $jobPostings-\u0026gt;addJob(new JobPost(\u0026#39;Software Engineer\u0026#39;)); // Output // Hi John Doe! New job posted: Software Engineer // Hi Jane Doe! New job posted: Software Engineer 🏃 Visitor Real world example\nConsider someone visiting Dubai. They just need a way (i.e. visa) to enter Dubai. After arrival, they can come and visit any place in Dubai on their own without having to ask for permission or to do some leg work in order to visit any place here; just let them know of a place and they can visit it. Visitor pattern lets you do just that, it helps you add places to visit so that they can visit as much as they can without having to do any legwork.\nIn plain words\nVisitor pattern lets you add further operations to objects without having to modify them.\nWikipedia says\nIn object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existing object structures without modifying those structures. It is one way to follow the open/closed principle.\nProgrammatic example\nLet\u0026rsquo;s take an example of a zoo simulation where we have several different kinds of animals and we have to make them Sound. Let\u0026rsquo;s translate this using visitor pattern\n// Visitee interface Animal { public function accept(AnimalOperation $operation); } // Visitor interface AnimalOperation { public function visitMonkey(Monkey $monkey); public function visitLion(Lion $lion); public function visitDolphin(Dolphin $dolphin); }\rThen we have our implementations for the animals\nclass Monkey implements Animal { public function shout() { echo \u0026#39;Ooh oo aa aa!\u0026#39;; } public function accept(AnimalOperation $operation) { $operation-\u0026gt;visitMonkey($this); } } class Lion implements Animal { public function roar() { echo \u0026#39;Roaaar!\u0026#39;; } public function accept(AnimalOperation $operation) { $operation-\u0026gt;visitLion($this); } } class Dolphin implements Animal { public function speak() { echo \u0026#39;Tuut tuttu tuutt!\u0026#39;; } public function accept(AnimalOperation $operation) { $operation-\u0026gt;visitDolphin($this); } }\rLet\u0026rsquo;s implement our visitor\nclass Speak implements AnimalOperation { public function visitMonkey(Monkey $monkey) { $monkey-\u0026gt;shout(); } public function visitLion(Lion $lion) { $lion-\u0026gt;roar(); } public function visitDolphin(Dolphin $dolphin) { $dolphin-\u0026gt;speak(); } }\rAnd then it can be used as\n$monkey = new Monkey(); $lion = new Lion(); $dolphin = new Dolphin(); $speak = new Speak(); $monkey-\u0026gt;accept($speak); // Ooh oo aa aa! $lion-\u0026gt;accept($speak); // Roaaar! $dolphin-\u0026gt;accept($speak); // Tuut tutt tuutt! We could have done this simply by having an inheritance hierarchy for the animals but then we would have to modify the animals whenever we would have to add new actions to animals. But now we will not have to change them. For example, let\u0026rsquo;s say we are asked to add the jump behavior to the animals, we can simply add that by creating a new visitor i.e.\nclass Jump implements AnimalOperation { public function visitMonkey(Monkey $monkey) { echo \u0026#39;Jumped 20 feet high! on to the tree!\u0026#39;; } public function visitLion(Lion $lion) { echo \u0026#39;Jumped 7 feet! Back on the ground!\u0026#39;; } public function visitDolphin(Dolphin $dolphin) { echo \u0026#39;Walked on water a little and disappeared\u0026#39;; } }\rAnd for the usage\n$jump = new Jump(); $monkey-\u0026gt;accept($speak); // Ooh oo aa aa! $monkey-\u0026gt;accept($jump); // Jumped 20 feet high! on to the tree! $lion-\u0026gt;accept($speak); // Roaaar! $lion-\u0026gt;accept($jump); // Jumped 7 feet! Back on the ground! $dolphin-\u0026gt;accept($speak); // Tuut tutt tuutt! $dolphin-\u0026gt;accept($jump); // Walked on water a little and disappeared 💡 Strategy Real world example\nConsider the example of sorting, we implemented bubble sort but the data started to grow and bubble sort started getting very slow. In order to tackle this we implemented Quick sort. But now although the quick sort algorithm was doing better for large datasets, it was very slow for smaller datasets. In order to handle this we implemented a strategy where for small datasets, bubble sort will be used and for larger, quick sort.\nIn plain words\nStrategy pattern allows you to switch the algorithm or strategy based upon the situation.\nWikipedia says\nIn computer programming, the strategy pattern (also known as the policy pattern) is a behavioural software design pattern that enables an algorithm\u0026rsquo;s behavior to be selected at runtime.\nProgrammatic example\nTranslating our example from above. First of all we have our strategy interface and different strategy implementations\ninterface SortStrategy { public function sort(array $dataset): array; } class BubbleSortStrategy implements SortStrategy { public function sort(array $dataset): array { echo \u0026#34;Sorting using bubble sort\u0026#34;; // Do sorting return $dataset; } } class QuickSortStrategy implements SortStrategy { public function sort(array $dataset): array { echo \u0026#34;Sorting using quick sort\u0026#34;; // Do sorting return $dataset; } }\rAnd then we have our client that is going to use any strategy\nclass Sorter { protected $sorterSmall; protected $sorterBig; public function __construct(SortStrategy $sorterSmall, SortStrategy $sorterBig) { $this-\u0026gt;sorterSmall = $sorterSmall; $this-\u0026gt;sorterBig = $sorterBig; } public function sort(array $dataset): array { if (count($dataset) \u0026gt; 5) { return $this-\u0026gt;sorterBig-\u0026gt;sort($dataset); } else { return $this-\u0026gt;sorterSmall-\u0026gt;sort($dataset); } } }\rAnd it can be used as\n$smalldataset = [1, 3, 4, 2]; $bigdataset = [1, 4, 3, 2, 8, 10, 5, 6, 9, 7]; $sorter = new Sorter(new BubbleSortStrategy(), new QuickSortStrategy()); $sorter-\u0026gt;sort($dataset); // Output : Sorting using bubble sort $sorter-\u0026gt;sort($bigdataset); // Output : Sorting using quick sort 💢 State Real world example\nImagine you are using some drawing application, you choose the paint brush to draw. Now the brush changes its behavior based on the selected color i.e. if you have chosen red color it will draw in red, if blue then it will be in blue etc.\nIn plain words\nIt lets you change the behavior of a class when the state changes.\nWikipedia says\nThe state pattern is a behavioral software design pattern that implements a state machine in an object-oriented way. With the state pattern, a state machine is implemented by implementing each individual state as a derived class of the state pattern interface, and implementing state transitions by invoking methods defined by the pattern\u0026rsquo;s superclass. The state pattern can be interpreted as a strategy pattern which is able to switch the current strategy through invocations of methods defined in the pattern\u0026rsquo;s interface.\nProgrammatic example\nLet\u0026rsquo;s take an example of a phone. First of all we have our state interface and some state implementations\ninterface PhoneState { public function pickUp(): PhoneState; public function hangUp(): PhoneState; public function dial(): PhoneState; } // states implementation class PhoneStateIdle implements PhoneState { public function pickUp(): PhoneState { return new PhoneStatePickedUp(); } public function hangUp(): PhoneState { throw new Exception(\u0026#34;already idle\u0026#34;); } public function dial(): PhoneState { throw new Exception(\u0026#34;unable to dial in idle state\u0026#34;); } } class PhoneStatePickedUp implements PhoneState { public function pickUp(): PhoneState { throw new Exception(\u0026#34;already picked up\u0026#34;); } public function hangUp(): PhoneState { return new PhoneStateIdle(); } public function dial(): PhoneState { return new PhoneStateCalling(); } } class PhoneStateCalling implements PhoneState { public function pickUp(): PhoneState { throw new Exception(\u0026#34;already picked up\u0026#34;); } public function hangUp(): PhoneState { return new PhoneStateIdle(); } public function dial(): PhoneState { throw new Exception(\u0026#34;already dialing\u0026#34;); } }\rThen we have our Phone class that changes the state on different behavior calls\nclass Phone { private $state; public function __construct() { $this-\u0026gt;state = new PhoneStateIdle(); } public function pickUp() { $this-\u0026gt;state = $this-\u0026gt;state-\u0026gt;pickUp(); } public function hangUp() { $this-\u0026gt;state = $this-\u0026gt;state-\u0026gt;hangUp(); } public function dial() { $this-\u0026gt;state = $this-\u0026gt;state-\u0026gt;dial(); } }\rAnd then it can be used as follows and it will call the relevant state methods:\n$phone = new Phone(); $phone-\u0026gt;pickUp(); $phone-\u0026gt;dial();\r📒 Template Method Real world example\nSuppose we are getting some house built. The steps for building might look like\nPrepare the base of house Build the walls Add roof Add other floors The order of these steps could never be changed i.e. you can\u0026rsquo;t build the roof before building the walls etc but each of the steps could be modified for example walls can be made of wood or polyester or stone.\nIn plain words\nTemplate method defines the skeleton of how a certain algorithm could be performed, but defers the implementation of those steps to the children classes.\nWikipedia says\nIn software engineering, the template method pattern is a behavioral design pattern that defines the program skeleton of an algorithm in an operation, deferring some steps to subclasses. It lets one redefine certain steps of an algorithm without changing the algorithm\u0026rsquo;s structure.\nProgrammatic Example\nImagine we have a build tool that helps us test, lint, build, generate build reports (i.e. code coverage reports, linting report etc) and deploy our app on the test server.\nFirst of all we have our base class that specifies the skeleton for the build algorithm\nabstract class Builder { // Template method final public function build() { $this-\u0026gt;test(); $this-\u0026gt;lint(); $this-\u0026gt;assemble(); $this-\u0026gt;deploy(); } abstract public function test(); abstract public function lint(); abstract public function assemble(); abstract public function deploy(); }\rThen we can have our implementations\nclass AndroidBuilder extends Builder { public function test() { echo \u0026#39;Running android tests\u0026#39;; } public function lint() { echo \u0026#39;Linting the android code\u0026#39;; } public function assemble() { echo \u0026#39;Assembling the android build\u0026#39;; } public function deploy() { echo \u0026#39;Deploying android build to server\u0026#39;; } } class IosBuilder extends Builder { public function test() { echo \u0026#39;Running ios tests\u0026#39;; } public function lint() { echo \u0026#39;Linting the ios code\u0026#39;; } public function assemble() { echo \u0026#39;Assembling the ios build\u0026#39;; } public function deploy() { echo \u0026#39;Deploying ios build to server\u0026#39;; } }\rAnd then it can be used as\n$androidBuilder = new AndroidBuilder(); $androidBuilder-\u0026gt;build(); // Output: // Running android tests // Linting the android code // Assembling the android build // Deploying android build to server $iosBuilder = new IosBuilder(); $iosBuilder-\u0026gt;build(); // Output: // Running ios tests // Linting the ios code // Assembling the ios build // Deploying ios build to server 🚦 Wrap Up Folks And that about wraps it up. I will continue to improve this, so you might want to watch/star this repository to revisit. Also, I have plans on writing the same about the architectural patterns, stay tuned for it.\n","date":"0001-01-01","id":88,"permalink":"/others/others/design-patterns/","summary":"\u003cp align=\"center\"\u003e\r\n🎉 Ultra-simplified explanation to design patterns! 🎉\r\n\u003c/p\u003e\r\n\u003cp align=\"center\"\u003e\r\nA topic that can easily make anyone's mind wobble. Here I try to make them stick in to your\u003cbr\u003e mind (and maybe mine) by explaining them in the \u003ci\u003esimplest\u003c/i\u003e way possible.\r\n\u003c/p\u003e","tags":[],"title":"Design patterns"},{"content":" What will be the output ?\n\u0026lt;button onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34; onclick=\u0026#34;console.log(\u0026#39;Two\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt;\rA: One B: Two C: One Two D: Two One Answer Option: A What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34; onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.onclick = function() { console.log(\u0026#39;Two\u0026#39;); } \u0026lt;/script\u0026gt;\rA: One B: Two C: One Two D: Two One Answer Option: B What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34; onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;Two\u0026#39;); }); \u0026lt;/script\u0026gt;\rA: One B: Two C: One Two D: Two One Answer Option: C What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34; onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;Two\u0026#39;); }); button.onclick = function() { console.log(\u0026#39;Three\u0026#39;); } \u0026lt;/script\u0026gt;\rA: One Two B: Two Three C: Three Two D: One Two Three Answer Option: C What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;One\u0026#39;); }); button.onclick = function() { console.log(\u0026#39;Two\u0026#39;); } \u0026lt;/script\u0026gt;\rA: One B: Two C: One Two D: Two One Answer Option: C What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;One\u0026#39;); }); button.onclick = function() { console.log(\u0026#39;Two\u0026#39;); } button.setAttribute(\u0026#39;onclick\u0026#39;, \u0026#34;console.log(\u0026#39;Three\u0026#39;)\u0026#34;); \u0026lt;/script\u0026gt;\rA: One Two Three B: One Two C: One Three D: Three Two One Answer Option: C What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34; onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;Two\u0026#39;); }); button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;Three\u0026#39;); }, false); \u0026lt;/script\u0026gt;\rA: One Two B: One Three C: One Two Three D: Three One Two Answer Option: C What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34; onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); function clickHandler() { console.log(\u0026#39;Two\u0026#39;); } button.addEventListener(\u0026#39;click\u0026#39;, clickHandler); button.addEventListener(\u0026#39;click\u0026#39;, clickHandler, false); \u0026lt;/script\u0026gt;\rA: One Two B: One Three C: One Two Three D: Three One Two Answer Option: A What will be the output ?\n\u0026lt;button id=\u0026#34;button\u0026#34; style=\u0026#34;display: none;\u0026#34;\u0026gt; Click Me \u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const button = document.getElementById(\u0026#39;button\u0026#39;); button.onclick = function() { console.log(\u0026#39;One\u0026#39;); } button.addEventListener(\u0026#39;click\u0026#39;, function() { console.log(\u0026#39;Two\u0026#39;); }); setTimeout(function(){ button.click(); }, 1000); \u0026lt;/script\u0026gt;\rA: One Two B: One Three C: One Two Three D: Three One Two Answer Option: A What will be the output ?\n\u0026lt;p onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; \u0026lt;div onclick=\u0026#34;console.log(\u0026#39;Two\u0026#39;)\u0026#34;\u0026gt; \u0026lt;h1 onclick=\u0026#34;console.log(\u0026#39;Three\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/h1\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/p\u0026gt;\rA: One B: Three C: One Two Three D: Three Two E: Three Two one Answer Option: D What will be the output ?\n\u0026lt;div onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; \u0026lt;div onclick=\u0026#34;event.stopPropagation();console.log(\u0026#39;Two\u0026#39;);\u0026#34;\u0026gt; \u0026lt;div onclick=\u0026#34;console.log(\u0026#39;Three\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\rA: One B: Three C: One Two Three D: Three Two E: Three Two one Answer Option: D What will be the output ?\n\u0026lt;div onclick=\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u0026gt; \u0026lt;div onclick=\u0026#34;return false;console.log(\u0026#39;Two\u0026#39;);\u0026#34;\u0026gt; \u0026lt;div onclick=\u0026#34;console.log(\u0026#39;Three\u0026#39;)\u0026#34;\u0026gt; Click Me \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\rA: One B: Three C: One Two Three D: Three Two E: Three Two one Answer Option: None of the above What will be the output ?\n\u0026lt;div\u0026gt; \u0026lt;div class=\u0026#34;number-box\u0026#34;\u0026gt;1\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;number-box\u0026#34;\u0026gt;2\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;number-box\u0026#34;\u0026gt;3\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;number-box\u0026#34;\u0026gt;4\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const arr = document.querySelectorAll(\u0026#39;.number-box\u0026#39;); console.log(arr); \u0026lt;/script\u0026gt;\rA: array of length 4 B: undefined C: NodeList of length 4 D: empty array E: empty NodeList Answer Option: C ","date":"0001-01-01","id":89,"permalink":"/code-snippets/dom-events/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eWhat will be the output ?\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-HTML\" data-lang=\"HTML\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eonclick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;console.log(\u0026#39;One\u0026#39;)\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eonclick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;console.log(\u0026#39;Two\u0026#39;)\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  Click Me\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003eOne\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003eTwo\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003eOne Two\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eD: \u003ccode\u003eTwo One\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-a\"\u003eOption: A\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"DOM Events"},{"content":"","date":"0001-01-01","id":90,"permalink":"/es6/","summary":"","tags":[],"title":"ES6"},{"content":"1. FormBuilder Description: This is the top-level component responsible for managing the overall form structure. It serves as a container for all other components. Responsibilities: Maintains the state of the entire form (e.g., values, validation status). Handles form submission and validation logic. Can provide a context for child components to access common data and methods (e.g., using React Context or state management libraries like Redux). 2. MultiSection Description: This component represents a collection of sections within the form. It allows users to add or remove sections dynamically. Responsibilities: Renders multiple Section components based on the current form structure. Provides the ability to manage the order of sections (e.g., drag-and-drop functionality). Might include controls for adding new sections, such as buttons for “Add Section”. 3. Section Description: A Section component groups related questions. It provides a logical division within the form, making it easier for users to navigate and complete. Responsibilities: Renders multiple MultiQuestion components. Can include a title or header for the section, along with description text if needed. Handles local state and functionality specific to the section (e.g., validation for questions in that section). Provides functionality to delete the section or reorder it. 4. MultiQuestion Description: This component represents a collection of questions within a section. It allows for the dynamic addition and removal of questions. Responsibilities: Renders multiple Question components. Manages the order of questions and provides controls for adding or removing questions. Might handle validation logic for the questions contained within it. 5. Question Description: The Question component represents an individual question within the form. It is the lowest level in the hierarchy and is responsible for rendering the question interface (e.g., text input, dropdown, etc.). Responsibilities: Renders the question text and associated input fields (e.g., Field, TextField, etc.). Handles local state management for the question, including user input and validation errors. Can provide features such as conditional rendering based on user input or validation criteria. Includes controls for editing, deleting, or configuring question-specific options. Benefits of This Hierarchy Modularity: Each component has a specific responsibility, making the codebase easier to manage and reason about. Reusability: Components can be reused in different contexts (e.g., you can use the MultiQuestion component in other forms if needed). Separation of Concerns: Each component handles its own state and logic, reducing complexity in the top-level FormBuilder. Dynamic Capabilities: The hierarchical structure allows for easy addition and removal of sections and questions, facilitating dynamic form-building experiences. ","date":"0001-01-01","id":91,"permalink":"/360-whims/360-whims/formbuilder/formbuilder/","summary":"\u003ch3 id=\"1-formbuilder\"\u003e1. \u003cstrong\u003eFormBuilder\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: This is the top-level component responsible for managing the overall form structure. It serves as a container for all other components.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResponsibilities\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eMaintains the state of the entire form (e.g., values, validation status).\u003c/li\u003e\n\u003cli\u003eHandles form submission and validation logic.\u003c/li\u003e\n\u003cli\u003eCan provide a context for child components to access common data and methods (e.g., using React Context or state management libraries like Redux).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"2-multisection\"\u003e2. \u003cstrong\u003eMultiSection\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: This component represents a collection of sections within the form. It allows users to add or remove sections dynamically.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResponsibilities\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eRenders multiple \u003ccode\u003eSection\u003c/code\u003e components based on the current form structure.\u003c/li\u003e\n\u003cli\u003eProvides the ability to manage the order of sections (e.g., drag-and-drop functionality).\u003c/li\u003e\n\u003cli\u003eMight include controls for adding new sections, such as buttons for “Add Section”.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"3-section\"\u003e3. \u003cstrong\u003eSection\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: A \u003ccode\u003eSection\u003c/code\u003e component groups related questions. It provides a logical division within the form, making it easier for users to navigate and complete.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResponsibilities\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eRenders multiple \u003ccode\u003eMultiQuestion\u003c/code\u003e components.\u003c/li\u003e\n\u003cli\u003eCan include a title or header for the section, along with description text if needed.\u003c/li\u003e\n\u003cli\u003eHandles local state and functionality specific to the section (e.g., validation for questions in that section).\u003c/li\u003e\n\u003cli\u003eProvides functionality to delete the section or reorder it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"4-multiquestion\"\u003e4. \u003cstrong\u003eMultiQuestion\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: This component represents a collection of questions within a section. It allows for the dynamic addition and removal of questions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResponsibilities\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eRenders multiple \u003ccode\u003eQuestion\u003c/code\u003e components.\u003c/li\u003e\n\u003cli\u003eManages the order of questions and provides controls for adding or removing questions.\u003c/li\u003e\n\u003cli\u003eMight handle validation logic for the questions contained within it.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"5-question\"\u003e5. \u003cstrong\u003eQuestion\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDescription\u003c/strong\u003e: The \u003ccode\u003eQuestion\u003c/code\u003e component represents an individual question within the form. It is the lowest level in the hierarchy and is responsible for rendering the question interface (e.g., text input, dropdown, etc.).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eResponsibilities\u003c/strong\u003e:\n\u003cul\u003e\n\u003cli\u003eRenders the question text and associated input fields (e.g., \u003ccode\u003eField\u003c/code\u003e, \u003ccode\u003eTextField\u003c/code\u003e, etc.).\u003c/li\u003e\n\u003cli\u003eHandles local state management for the question, including user input and validation errors.\u003c/li\u003e\n\u003cli\u003eCan provide features such as conditional rendering based on user input or validation criteria.\u003c/li\u003e\n\u003cli\u003eIncludes controls for editing, deleting, or configuring question-specific options.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"benefits-of-this-hierarchy\"\u003e\u003cstrong\u003eBenefits of This Hierarchy\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eModularity\u003c/strong\u003e: Each component has a specific responsibility, making the codebase easier to manage and reason about.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eReusability\u003c/strong\u003e: Components can be reused in different contexts (e.g., you can use the \u003ccode\u003eMultiQuestion\u003c/code\u003e component in other forms if needed).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSeparation of Concerns\u003c/strong\u003e: Each component handles its own state and logic, reducing complexity in the top-level \u003ccode\u003eFormBuilder\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDynamic Capabilities\u003c/strong\u003e: The hierarchical structure allows for easy addition and removal of sections and questions, facilitating dynamic form-building experiences.\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"FormBuilder"},{"content":"What is this Frontend System Design guide about? Frontend System Design guide attempts to cover the various factors to be considered while architecting a complex large-scale frontend application from scratch. Also the guide acts like a checklist that can be used as a reference for frontend system design. The guide aims to contain the breadth of the frontend systems while giving the directions to explore in depth for both individual contributors and system architects.\nGuide is generic and not biased towards any library or framework Engineering Design High Level Design Low level Design Engineering Design Team size User base Knowledge base Compliance/Governance User/Client expectations Open source vs proprietary Documentation / PRD Future Roadmaps High Level Design Platform identification SPA vs MPA SSR, SSG, CSR Tech stack Search Engine Optimization CI/CD User Experience A/B testing MVP planning Server Side Architecture Security State Management Internationalization E2E testing Tools Integration Authentication \u0026amp; Authorization Quality Assurance \u0026amp; Control User role management Low Level Design Code/Folder architecture Desktop/Mobile first approach System breakdown Component Design Form development Storage management API Design Instrumentation Design system Routing management CSS optimizations Lazy loading of modules Accessibility Image optimizations Pagination, Debouncing, Throttling Performance: FCP, LCP, TTI, CLS Versioning Unit testing Architecture Considerations Client-side Architecture Basics idiomatic.js High Level Design details Product Requirement Document (PRD) / Design Document\nIdentify Scope/Requirement Review your understanding with stakeholders Discuss about Design/Wireframe\nThink like an architect. We should not consider team bandwidth, capacity and time. Discuss about Edge cases. Robustness: Handle SPOF (Single Point of Failure) ex: Monitoring, Logging Identify Business\nIs it B2B (business-to-business)? Is it B2C (business-to-consumer)? Is it Internal Product? Is it Customer facing product? Identify Platform\nDesktop Mobile Tablet Identify Users (Know your audience)\nConduct surveys Discuss about Location and Devices Internet speed End Users knowledge base (ex: Technical user) Pilot Product (sometimes to understand audience) Identify Design Approach\nResponsive vs Adaptive design Desktop first vs Mobile first Identify APIs\nRest APIs / Graph APIs / RPC JSON / Protocol buffers Role based management\nLarge system needs roles based access and permissions Authentication and Authorization Read/Write/View Permissions Discuss about Routes/Component access Identify Right Platform (compare frameworks based on the use case)\nSingle Page Applications (Unsuitable for Blogs/News based products) No reloading of a page at navigation No SEO Multi Page Applications Reloading of a page at every page navigation. Progressive Web Applications Provides offline support and native like functionality. Server Side Rendering Better SEO Important points to discuss: Are users on mobile? Is SEO needed? Is SPA enough? Is PWA enough? (Service worker, Web Worker) Compare SSR / SSG / CSR Any Pricing model? (optional) - Subscriptions based, Paid APIs Will my app be Frontend heavy? (or backend heavy) Do I have resources for this skill? Is your application Canvas (or SVG) heavy? (Figma, Draw.io) Is your application webRTC heavy? (Video streaming) Identify User Flow\nDiscuss vision of a product. Do we need to build from scratch or we can leverage some existing functionalities Discuss about authentication and authorization (Google auth / OAuth) Interact with the Product manager to understand the scope before designing the application. Discuss happy scenarios. Discuss edge cases. Discuss failing scenarios Identify MVP (Minimum Viable Product)\nProblem -\u0026gt; Solution -\u0026gt; Build MVP -\u0026gt; MVP to Customers Discuss MVP phase with product manager Discuss roadmaps and divide product in milestones After MVP release there can be a slight change in design/approach to make the product better Volume of Operations\nDiscuss about the end users of the product Identify QPS (Queries per second) Discuss about Load testing/Stress testing Inject analytics in application (ex: Google analytics, Sentry, NewRelic) Analytics data helps us to scale the system SEO (Search Engine Optimization)\nCrawling Use of Heading tags Semantic tags Site Ranking Sitemap Meta Keywords Organic approach vs Inorganic approach Use of alt tags 301 Redirects (bad for SEO) Robots.txt Open graph protocol for social graph Component Based Design\nComponent wise deployment cycle (CI/CD) Monolith vs Microservice architecture Micro Frontend (independent dev \u0026amp; deployment for scalability) Static components vs Dynamic components IFrame/Shell approach State Management\nHow to maintain state through the application? How to manage users\u0026rsquo; data? State management Libraries (Redux, Flux, NgRX) Handling APIs\nPolling (Short and Long) Web Sockets (Real-time) (ex: chat, shared editors) Batch requests GraphQL Caching GET APIs (Middleware concepts to cache response) Server-Sent Events (SSE) Optimizing Images\nAdd alt attributes (Images should be descriptive for SEO) Load images based on screen size (img srcset) Image compression (ex: JPEG 2000) Image sitemaps Use SVGs for generic dimensions (in case of stretching of images) Discuss about image Sprites for icons Discuss about progressive images (ex: Medium.com) - e.g. blurhash Instrumentation\nMeasurement and tracking are key for a stable system Monitoring Error logging (for tracing) Debugging Logs/Track all events happened in the application Implement Analytics (GA) Sentry (to capture errors) Newrelic (to detect failures) Versioning of artifacts\nArtifacts tracking (ex: Confluence) Rollback \u0026amp; backup mechanisms Performance Optimization Techniques\nWebpack to optimized/compressed pages (Code splitting, Brotli Compression, Gzip Compression) Web Vitals (FP, LCP, CLS, etc) Lighthouse / PageSpeed Insights Fast Loading (Initial load should be fast) Smooth Operations (Loading indicators / Light/Smooth/Meaningful animations (to avoid jerks in transitions) / Splash screens) - (dialog with light animations) Animation directions should be the same (dialog coming from bottom should close in bottom) - (smooth animation should be added in sidebars for better UX) Animation between data fetching(APIs request) - Skeletal Loaders, Blurhash etc Discuss about Caching - ex: API, resource cache (Browser cache / Memory / CDN / Disk Cache) Pagination vs Infinite Scroll Meaningful animation Micro interactions Internationalization (i18n) / Localization (i10n)\nLocalization Numeric, date and time formats Singular \u0026amp; Plurals Use of currency Keyboard usage Symbols, icons and colors Text and graphics vary with different languages and religions, may be subject to misinterpretation or viewed as insensitive Varying legal requirements Accessibility\nAlt attributes Aria-labels Multi-device support, slow network speed Color contrast, semantics tags Security\nMITM XSS CSRF Clickjacking Content Security Policy (CSP) CORS Security headers Helpful Tools Testing your SSL web server HTTP/2 Test HTTP Header Checker Website Speed Test Performance Test What Does my site cost? HTML5 Security Cheat Sheet Production Best Practices : Security Web Application Vulnerabiliies Index Quality assurance and control\nStable products are successful Specify standards - Code level / Artifacts level / Asset level Git Hooks (pre commit hooks, husky) Linters / Static Analyzers Unit testing Workflow testing (User level flows) (Tools - Cypress) Integration testing Automation suite Cross browsers testing Cross platform testing Governance\nControlling the workflows and protecting the assets UX Design -\u0026gt; Developers -\u0026gt; Product Managers -\u0026gt; UX Designing -\u0026gt; QA Code level governance - like PRs approval (sets standard in your team) - e.g. Gitflow Artifacts/Assets level governance (before go live) like Product Manager approval, Stakeholders approvals Experiment based release cycle\nExperiment flag, which can help in the release cycle NFR (Non Functional Requirement)\nDiscuss about CI/CD (Docker, Pipeline) License This repository is MIT licensed. Read more\n","date":"0001-01-01","id":92,"permalink":"/others/others/frontend-system-design-guide/","summary":"\u003ch3 id=\"what-is-this-frontend-system-design-guide-about\"\u003eWhat is this Frontend System Design guide about?\u003c/h3\u003e\n\u003cp\u003eFrontend System Design guide attempts to cover the various factors to be considered while architecting a complex large-scale frontend application from scratch. Also the guide acts like a checklist that can be used as a reference for frontend system design. The guide aims to contain the breadth of the frontend systems while giving the directions to explore in depth for both individual contributors and system architects.\u003c/p\u003e","tags":[],"title":"Frontend System Design Guide"},{"content":" What will be the Output??\nfunction setName() { this.name = \u0026#39;devkode\u0026#39;; } setName(); console.log(this.name);\rA: ‘devkode’ B: undefined C: An Error will be thrown D: null Answer Option: A What will be the output ?\nfunction fun(num1) { var num2 = 6; function TDK() { var num3 = 10; console.log(num1 * num2 * num3) } return TDK; } var TeamDevKode = fun(5) TeamDevKode ()\rA: undefined B: 0 C: 300 D: infinity Answer Option: C What is the output ?\nconst animal = { animal_name: \u0026#34;cat\u0026#34;, action: function () { console.log(`${this.animal_name} is doing action`); } }; setTimeout(animal.action, 1000);\rA: cat is doing action B: undefined is doing action C: null is doing action D: error Answer Option: B What is the output ?\nconst animal = { animal_name: \u0026#34;cat\u0026#34;, action: function () { console.log(`${this.animal_name} is doing action`); } }; setTimeout(function () { animal.action(); }, 1000);\rA: cat is doing action B: undefined is doing action C: null is doing action D: error Answer Option: A What is the output ?\nconst animal = { animal_name: \u0026#34;cat\u0026#34;, action: function () { console.log(`${this.animal_name} is doing action`); } }; let func = animal.action.bind(animal); setTimeout(func, 1000);\rA: null is doing action B: undefined is doing action C: cat is doing action D: error Answer Option: C What is the output ?\nfunction getFunc() { let value = \u0026#34;Hey !\u0026#34;; let func = new Function(\u0026#34;console.log(value)\u0026#34;); return func; } getFunc()();\rA: Hey ! B: error: value is not defined C: null Answer Option: B What is the output ?\nfunction getFunc() { let value = \u0026#34;Hello Friends !\u0026#34;; let func = () =\u0026gt; { alert(value); }; return func; } getFunc()();\rA: Hey ! B: error: value is not defined C: Hello Friends ! D: null Answer Option: C What is the output ?\nx = 1; function func() { this.x = 2; return x; } let a = new func(); console.log(a.x);\rA: 1 B: 2 C: undefined Answer Option: B What will be the output ?\nlet arr = Array.from(Array(10).keys()); function func(a) { console.log(arguments.length); } func(arr); func(...arr);\rA: 10 10 B: 10 1 C: 1 10 D: 1 1 Answer Option: C What will be the output ?\nfunction func(a, b) { arguments[1] = 2; console.log(b); } func(1);\rA: 2 B: undefined C: 1 D: null Answer Option: B What will be the output ?\nvar x = 3; var obj = { x: 2, foo: { x: 1, bar: function () { return this.x; } } }; var func = obj.foo.bar; console.log(func()); console.log(obj.foo.bar());\rA: 3 1 B: undefined 1 C: 1 1 D: 2 1 Answer Option: A What will be the output ?\nvar foo = function foo() { console.log(foo === foo); }; foo();\rA: false B: true C: error Answer Option: B What will be the output ?\nfunction getAge() { \u0026#39;use strict\u0026#39;; age = 21; console.log(age); } getAge();\rA: 21 B: undefined C: ReferenceError D: TypeError Answer Option: C What will be the output ?\nconst obj = { 1: \u0026#39;a\u0026#39;, 2: \u0026#39;b\u0026#39;, 3: \u0026#39;c\u0026#39; }; const set = new Set([1, 2, 3, 4, 5]); obj.hasOwnProperty(\u0026#39;1\u0026#39;); obj.hasOwnProperty(1); set.has(\u0026#39;1\u0026#39;); set.has(1);\rA: false true false true B: false true true true C: true true false true D: true true true true Answer Option: C What will be the output ?\nvar num = \u0026#34;10\u0026#34;; (function () { console.log(num); var num = \u0026#34;50\u0026#34;; console.log(num);} )();\rA: undefined 50 B: 50 50 C: 10 10 Answer Option: A ","date":"0001-01-01","id":93,"permalink":"/code-snippets/functions/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eWhat will be the Output??\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-JS\" data-lang=\"JS\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003esetName\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e   \u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;devkode\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003esetName\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003ethis\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003e‘devkode’\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003eAn Error will be thrown\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eD: \u003ccode\u003enull\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-a\"\u003eOption: A\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"Functions"},{"content":" What will be the output ?\nconsole.log(typeof foo); function foo() { return \u0026#34;bar\u0026#34;; } var foo = \u0026#34;bar\u0026#34;;\rA: undefined B: string C: function Answer Option: C What will be the output ?\nfunction foo() { return \u0026#34;bar\u0026#34;; } var foo; console.log(typeof foo);\rA: undefined B: string C: function Answer Option: C What will be the output ?\nif (true) { function foo() { console.log(1); } } else { function foo() { console.log(2); } } foo();\rA: 1 B: 2 Answer Option: A What will be the output ?\nfunction foo() { bar(); return; function bar() { console.log(\u0026#34;bar\u0026#34;); } } foo();\rA: undefined B: bar C: Uncaught ReferenceError: bar is not defined Answer Option: B What will be the output ?\nfunction foo(x) { x(); function x() { console.log(\u0026#34;foo\u0026#34;); } } foo(function() { console.log(\u0026#34;bar\u0026#34;) });\rA: foo B: bar C: Uncaught ReferenceError: x is not defined Answer Option: A What will be the output ?\nfoo(); function foo() { console.log(1); } var foo = function() { console.log(2); }; function foo() { console.log(3); } foo();\rA: 3 3 B: 3 2 C: 1 2 D: 1 3 Answer Option: B What will be the output ?\nfunction animal(){ console.log(\u0026#34;Cat\u0026#34;); } var otherAnimal; animal(); otherAnimal(); otherAnimal = function() { console.log(\u0026#34;Dog\u0026#34;); }\rA: Cat Dog B: Cat undefined C: Cat TypeError: otherAnimal is not a function Answer Option: C What are the logged values of a and b ?\nb = function a(){}; var a = b = 6; a = function b(){}; function b() {}; function a() {}; console.log(a,b);\rA: ƒ b(){} 6 B: ƒ a(){} 6 C: ƒ b(){} ƒ a(){} D: ƒ a(){} ƒ b(){} E: 6 ƒ a(){} F: 6 ƒ b(){} Answer Option: A What are the logged values of a and b ?\nvar a = 10; console.log(\u0026#34;line number 2\u0026#34;, a); function fn() { console.log(\u0026#34;line number 4\u0026#34;, a); var a = 20; a++; console.log(\u0026#34;line number 7\u0026#34;, a); if (a) { var a = 30; a++; console.log(\u0026#34;line number 11\u0026#34;, a); } console.log(\u0026#34;line number 13\u0026#34;, a); } fn(); console.log(\u0026#34;line number 2\u0026#34;, a);\rA: line number 2 10 line number 4 10 line number 7 21 line number 7 31 line number 13 31 line number 2 31\rB: line number 2 10 line number 4 undefined line number 7 21 line number 11 31 line number 13 31 line number 2 10\rC: line number 2 10 line number 4 10 line number 7 21 line number 11 31 line number 13 31 line number 2 10\rAnswer Option: B What will be the output?\nfunction foo() { let a = b = 0; a++; return a; } foo(); console.log(typeof a); console.log(typeof b);\rA: number \\n number B: undefined \\n number C: undefined \\n undefined D: number \\n undefined Answer Option: B ","date":"0001-01-01","id":94,"permalink":"/code-snippets/hoisting/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eWhat will be the output ?\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-JS\" data-lang=\"JS\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003etypeof\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;bar\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003eundefined\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003estring\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003efunction\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-c\"\u003eOption: C\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"Hoisting"},{"content":"","date":"0001-01-01","id":95,"permalink":"/ikure-whims-usermanual/","summary":"","tags":[],"title":"ikure whims usermanual"},{"content":"A mostly reasonable collection of technical software development interview questions solved in Javascript in ES5 and ES6\nTable of Contents Array Strings Stacks and Queues Recursion Numbers Javascript Specific To Be Continued Array 1.1 Given an array of integers, find the largest product yielded from three of the integers\nvar unsortedArray = [-10, 7, 29, 30, 5, -10, -70]; computeProduct(unsortedArray); // 21000 function sortIntegers(a, b) { return a - b; } // Greatest product is either (min1 * min2 * max1 || max1 * max2 * max3) function computeProduct(unsorted) { var sortedArray = unsorted.sort(sortIntegers), product1 = 1, product2 = 1, array_n_element = sortedArray.length - 1; // Get the product of three largest integers in sorted array for (var x = array_n_element; x \u0026gt; array_n_element - 3; x--) { product1 = product1 * sortedArray[x]; } product2 = sortedArray[0] * sortedArray[1] * sortedArray[array_n_element]; if (product1 \u0026gt; product2) return product1; return product2; }\rView on Codepen: https://codepen.io/kennymkchan/pen/LxoMvm?editors=0012\n1.2 Being told that an unsorted array contains (n - 1) of n consecutive numbers (where the bounds are defined), find the missing number in O(n) time\n// The output of the function should be 8 var arrayOfIntegers = [2, 5, 1, 4, 9, 6, 3, 7]; var upperBound = 9; var lowerBound = 1; findMissingNumber(arrayOfIntegers, upperBound, lowerBound); // 8 function findMissingNumber(arrayOfIntegers, upperBound, lowerBound) { // Iterate through array to find the sum of the numbers var sumOfIntegers = 0; for (var i = 0; i \u0026lt; arrayOfIntegers.length; i++) { sumOfIntegers += arrayOfIntegers[i]; } // Find theoretical sum of the consecutive numbers using a variation of Gauss Sum. // Formula: [(N * (N + 1)) / 2] - [(M * (M - 1)) / 2]; // N is the upper bound and M is the lower bound upperLimitSum = (upperBound * (upperBound + 1)) / 2; lowerLimitSum = (lowerBound * (lowerBound - 1)) / 2; theoreticalSum = upperLimitSum - lowerLimitSum; return theoreticalSum - sumOfIntegers; }\rView on Codepen: http://codepen.io/kennymkchan/pen/rjgoXw?editors=0012\n1.3 Removing duplicates of an array and returning an array of only unique elements\n// ES6 Implementation var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8]; Array.from(new Set(array)); // [1, 2, 3, 5, 9, 8] // ES5 Implementation var array = [1, 2, 3, 5, 1, 5, 9, 1, 2, 8]; uniqueArray(array); // [1, 2, 3, 5, 9, 8] function uniqueArray(array) { var hashmap = {}; var unique = []; for (var i = 0; i \u0026lt; array.length; i++) { // If key returns undefined (unique), it is evaluated as false. if (!hashmap.hasOwnProperty(array[i])) { hashmap[array[i]] = 1; unique.push(array[i]); } } return unique; }\rView on Codepen: http://codepen.io/kennymkchan/pen/ZLNwze?editors=0012\n1.4 Given an array of integers, find the largest difference between two elements such that the element of lesser value must come before the greater element\nvar array = [7, 8, 4, 9, 9, 15, 3, 1, 10]; // [7, 8, 4, 9, 9, 15, 3, 1, 10] would return `11` based on the difference between `4` and `15` // Notice: It is not `14` from the difference between `15` and `1` because 15 comes before 1. findLargestDifference(array); function findLargestDifference(array) { // If there is only one element, there is no difference if (array.length \u0026lt;= 1) return -1; // currentMin will keep track of the current lowest var currentMin = array[0]; var currentMaxDifference = 0; // We will iterate through the array and keep track of the current max difference // If we find a greater max difference, we will set the current max difference to that variable // Keep track of the current min as we iterate through the array, since we know the greatest // difference is yield from `largest value in future` - `smallest value before it` for (var i = 1; i \u0026lt; array.length; i++) { if (array[i] \u0026gt; currentMin \u0026amp;\u0026amp; array[i] - currentMin \u0026gt; currentMaxDifference) { currentMaxDifference = array[i] - currentMin; } else if (array[i] \u0026lt;= currentMin) { currentMin = array[i]; } } // If negative or 0, there is no largest difference if (currentMaxDifference \u0026lt;= 0) return -1; return currentMaxDifference; }\rView on Codepen: http://codepen.io/kennymkchan/pen/MJdLWJ?editors=0012\n1.5 Given an array of integers, return an output array such that output[i] is equal to the product of all the elements in the array other than itself. (Solve this in O(n) without division)\nvar firstArray = [2, 2, 4, 1]; var secondArray = [0, 0, 0, 2]; var thirdArray = [-2, -2, -3, 2]; productExceptSelf(firstArray); // [8, 8, 4, 16] productExceptSelf(secondArray); // [0, 0, 0, 0] productExceptSelf(thirdArray); // [12, 12, 8, -12] function productExceptSelf(numArray) { var product = 1; var size = numArray.length; var output = []; // From first array: [1, 2, 4, 16] // The last number in this case is already in the right spot (allows for us) // to just multiply by 1 in the next step. // This step essentially gets the product to the left of the index at index + 1 for (var x = 0; x \u0026lt; size; x++) { output.push(product); product = product * numArray[x]; } // From the back, we multiply the current output element (which represents the product // on the left of the index, and multiplies it by the product on the right of the element) var product = 1; for (var i = size - 1; i \u0026gt; -1; i--) { output[i] = output[i] * product; product = product * numArray[i]; } return output; }\rView on Codepen: http://codepen.io/kennymkchan/pen/OWYdJK?editors=0012\n1.6 Find the intersection of two arrays. An intersection would be the common elements that exists within both arrays. In this case, these elements should be unique!\nvar firstArray = [2, 2, 4, 1]; var secondArray = [1, 2, 0, 2]; intersection(firstArray, secondArray); // [2, 1] function intersection(firstArray, secondArray) { // The logic here is to create a hashmap with the elements of the firstArray as the keys. // After that, you can use the hashmap\u0026#39;s O(1) look up time to check if the element exists in the hash // If it does exist, add that element to the new array. var hashmap = {}; var intersectionArray = []; firstArray.forEach(function (element) { hashmap[element] = 1; }); // Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added secondArray.forEach(function (element) { if (hashmap[element] === 1) { intersectionArray.push(element); hashmap[element]++; } }); return intersectionArray; // Time complexity O(n), Space complexity O(n) }\rView on Codepen: http://codepen.io/kennymkchan/pen/vgwbEb?editors=0012\n⬆ back to top\nStrings 2.1 Given a string, reverse each word in the sentence \u0026quot;Welcome to this Javascript Guide!\u0026quot; should be become \u0026quot;emocleW ot siht tpircsavaJ !ediuG\u0026quot;\nvar string = \u0026#34;Welcome to this Javascript Guide!\u0026#34;; // Output becomes !ediuG tpircsavaJ siht ot emocleW var reverseEntireSentence = reverseBySeparator(string, \u0026#34;\u0026#34;); // Output becomes emocleW ot siht tpircsavaJ !ediuG var reverseEachWord = reverseBySeparator(reverseEntireSentence, \u0026#34; \u0026#34;); function reverseBySeparator(string, separator) { return string.split(separator).reverse().join(separator); }\rView on Codepen: http://codepen.io/kennymkchan/pen/VPOONZ?editors=0012\n2.2 Given two strings, return true if they are anagrams of one another \u0026quot;Mary\u0026quot; is an anagram of \u0026quot;Army\u0026quot;\nvar firstWord = \u0026#34;Mary\u0026#34;; var secondWord = \u0026#34;Army\u0026#34;; isAnagram(firstWord, secondWord); // true function isAnagram(first, second) { // For case insensitivity, change both words to lowercase. var a = first.toLowerCase(); var b = second.toLowerCase(); // Sort the strings, and join the resulting array to a string. Compare the results a = a.split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); b = b.split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); return a === b; }\rView on Codepen: http://codepen.io/kennymkchan/pen/NdVVVj?editors=0012\n2.3 Check if a given string is a palindrome \u0026quot;racecar\u0026quot; is a palindrome. \u0026quot;race car\u0026quot; should also be considered a palindrome. Case sensitivity should be taken into account\nisPalindrome(\u0026#34;racecar\u0026#34;); // true isPalindrome(\u0026#34;race Car\u0026#34;); // true function isPalindrome(word) { // Replace all non-letter chars with \u0026#34;\u0026#34; and change to lowercase var lettersOnly = word.toLowerCase().replace(/\\s/g, \u0026#34;\u0026#34;); // Compare the string with the reversed version of the string return lettersOnly === lettersOnly.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;); }\rView on Codepen: http://codepen.io/kennymkchan/pen/xgNNNB?editors=0012\n2.3 Check if a given string is a isomorphic\nFor two strings to be isomorphic, all occurrences of a character in string A can be replaced with another character\rto get string B. The order of the characters must be preserved. There must be one-to-one mapping for ever char of\rstring A to every char of string B.\r`paper` and `title` would return true.\r`egg` and `sad` would return false.\r`dgg` and `add` would return true.\risIsomorphic(\u0026#34;egg\u0026#34;, \u0026#34;add\u0026#34;); // true isIsomorphic(\u0026#34;paper\u0026#34;, \u0026#34;title\u0026#34;); // true isIsomorphic(\u0026#34;kick\u0026#34;, \u0026#34;side\u0026#34;); // false function isIsomorphic(firstString, secondString) { // Check if the same lenght. If not, they cannot be isomorphic if (firstString.length !== secondString.length) return false; var letterMap = {}; for (var i = 0; i \u0026lt; firstString.length; i++) { var letterA = firstString[i], letterB = secondString[i]; // If the letter does not exist, create a map and map it to the value // of the second letter if (letterMap[letterA] === undefined) { // If letterB has already been added to letterMap, then we can say: they are not isomorphic. if (secondString.indexOf(letterB) \u0026lt; i) { return false; } else { letterMap[letterA] = letterB; } } else if (letterMap[letterA] !== letterB) { // Eles if letterA already exists in the map, but it does not map to // letterB, that means that A is mapping to more than one letter. return false; } } // If after iterating through and conditions are satisfied, return true. // They are isomorphic return true; }\rView on Codepen: http://codepen.io/kennymkchan/pen/mRZgaj?editors=0012\n⬆ back to top\nStacks and Queues 3.1 Implement enqueue and dequeue using only two stacks\nvar inputStack = []; // First stack var outputStack = []; // Second stack // For enqueue, just push the item into the first stack function enqueue(stackInput, item) { return stackInput.push(item); } function dequeue(stackInput, stackOutput) { // Reverse the stack such that the first element of the output stack is the // last element of the input stack. After that, pop the top of the output to // get the first element that was ever pushed into the input stack if (stackOutput.length \u0026lt;= 0) { while (stackInput.length \u0026gt; 0) { var elementToOutput = stackInput.pop(); stackOutput.push(elementToOutput); } } return stackOutput.pop(); }\rView on Codepen: http://codepen.io/kennymkchan/pen/mRYYZV?editors=0012\n3.2 Create a function that will evaluate if a given expression has balanced parentheses \u0026ndash; Using stacks In this example, we will only consider \u0026ldquo;{}\u0026rdquo; as valid parentheses {}{} would be considered balancing. {{{}} is not balanced\nvar expression = \u0026#34;{{}}{}{}\u0026#34;; var expressionFalse = \u0026#34;{}{{}\u0026#34;; isBalanced(expression); // true isBalanced(expressionFalse); // false isBalanced(\u0026#34;\u0026#34;); // true function isBalanced(expression) { var checkString = expression; var stack = []; // If empty, parentheses are technically balanced if (checkString.length \u0026lt;= 0) return true; for (var i = 0; i \u0026lt; checkString.length; i++) { if (checkString[i] === \u0026#34;{\u0026#34;) { stack.push(checkString[i]); } else if (checkString[i] === \u0026#34;}\u0026#34;) { // Pop on an empty array is undefined if (stack.length \u0026gt; 0) { stack.pop(); } else { return false; } } } // If the array is not empty, it is not balanced if (stack.pop()) return false; return true; }\rView on Codepen: http://codepen.io/kennymkchan/pen/egaawj?editors=0012\n⬆ back to top\nRecursion 4.1 Write a recursive function that returns the binary string of a given decimal number Given 4 as the decimal input, the function should return 100\ndecimalToBinary(3); // 11 decimalToBinary(8); // 1000 decimalToBinary(1000); // 1111101000 function decimalToBinary(digit) { if (digit \u0026gt;= 1) { // If digit is not divisible by 2 then recursively return proceeding // binary of the digit minus 1, 1 is added for the leftover 1 digit if (digit % 2) { return decimalToBinary((digit - 1) / 2) + 1; } else { // Recursively return proceeding binary digits return decimalToBinary(digit / 2) + 0; } } else { // Exit condition return \u0026#34;\u0026#34;; } }\rView on Codepen: http://codepen.io/kennymkchan/pen/OWYYKb?editors=0012\n4.2 Write a recursive function that performs a binary search\nfunction recursiveBinarySearch(array, value, leftPosition, rightPosition) { // Value DNE if (leftPosition \u0026gt; rightPosition) return -1; var middlePivot = Math.floor((leftPosition + rightPosition) / 2); if (array[middlePivot] === value) { return middlePivot; } else if (array[middlePivot] \u0026gt; value) { return recursiveBinarySearch(array, value, leftPosition, middlePivot - 1); } else { return recursiveBinarySearch(array, value, middlePivot + 1, rightPosition); } }\rView on Codepen: http://codepen.io/kennymkchan/pen/ygWWmK?editors=0012\n⬆ back to top\nNumbers 5.1 Given an integer, determine if it is a power of 2. If so, return that number, else return -1. (0 is not a power of two)\nisPowerOfTwo(4); // true isPowerOfTwo(64); // true isPowerOfTwo(1); // true isPowerOfTwo(0); // false isPowerOfTwo(-1); // false // For the non-zero case: function isPowerOfTwo(number) { // `\u0026amp;` uses the bitwise n. // In the case of number = 4; the expression would be identical to: // `return (4 \u0026amp; 3 === 0)` // In bitwise, 4 is 100, and 3 is 011. Using \u0026amp;, if two values at the same // spot is 1, then result is 1, else 0. In this case, it would return 000, // and thus, 4 satisfies are expression. // In turn, if the expression is `return (5 \u0026amp; 4 === 0)`, it would be false // since it returns 101 \u0026amp; 100 = 100 (NOT === 0) return number \u0026amp; (number - 1 === 0); } // For zero-case: function isPowerOfTwoZeroCase(number) { return number !== 0 \u0026amp;\u0026amp; (number \u0026amp; (number - 1)) === 0; }\rView on Codepen: http://codepen.io/kennymkchan/pen/qRGGeG?editors=0012\n⬆ back to top\nJavascript 6.1 Explain what is hoisting in Javascript\nHoisting is the concept in which Javascript, by default, moves all declarations to the top\rof the current scope. As such, a variable can be used before it has been declared. Note that\rJavascript only hoists declarations and not initializations\r6.2 Describe the functionality of the use strict; directive\nthe `use strict` directive defines that the Javascript should be executed in `strict mode`.\rOne major benefit that strict mode provides is that it prevents developers from using\rundeclared variables. Older versions of javascript would ignore this directive declaration\r// Example of strict mode \u0026#34;use strict\u0026#34;; catchThemAll(); function catchThemAll() { x = 3.14; // Error will be thrown return x * x; }\r6.3 Explain event bubbling and how one may prevent it\nEvent bubbling is the concept in which an event triggers at the deepest possible element,\rand triggers on parent elements in nesting order. As a result, when clicking on a child element\rone may exhibit the handler of the parent activating.\rOne way to prevent event bubbling is using `event.stopPropagation()` or `event.cancelBubble`\ron IE \u0026lt; 9\r6.4 What is the difference between == and === in JS?\n`===` is known as a strict operator. The key difference between `==` and `===` is that the\rstrict operator matches for both value and type, as opposed to just the value.\r// Example of comparators 0 == false; // true 0 === false; // false 2 == \u0026#34;2\u0026#34;; // true 2 === \u0026#34;2\u0026#34;; // false 6.5 What is the difference between null and undefined\nIn Javascript, null is an assignment value, and can be assigned to a variable representing that\rit has no value. Undefined, on the other hand, represents that a variable has been declared but\rthere is no value associated with it\r6.6 How does prototypal inheritance differ from classical inheritance\nIn classical inheritance, classes are immutable, may or may not support multiple\rinheritance, and may contain interfaces, final classes, and abstract classes. In contrast,\rprototypes are much more flexible in the sense that they may be mutable or immutable. The object\rmay inherit from multiple prototypes, and only contains objects.\r⬆ back to top\n","date":"0001-01-01","id":96,"permalink":"/others/others/interview-algorithm-questions-in-javascript/","summary":"\u003cp\u003e\u003cem\u003eA mostly reasonable collection of technical software development interview questions solved in Javascript in ES5 and ES6\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"table-of-contents\"\u003eTable of Contents\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"#array\"\u003eArray\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#strings\"\u003eStrings\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#stacks-and-queues\"\u003eStacks and Queues\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#recursion\"\u003eRecursion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#numbers\"\u003eNumbers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#javascript\"\u003eJavascript Specific\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eTo Be Continued\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"array\"\u003eArray\u003c/h2\u003e\n\u003cp\u003e\u003ca name=\"array--product\"\u003e\u003c/a\u003e\u003ca name=\"1.1\"\u003e\u003c/a\u003e\u003c/p\u003e","tags":[],"title":"Interview Algorithm Questions in Javascript"},{"content":"Documentation Repo link ikure-whims-usermanual\nTable of Contents What is the scope of this repo? Technical choices made Commands to run the project What is the scope of this repo It covers the end to end documentation of the features available in the whims 360 portal\nusefull for product walkthrough \u0026amp; present it to the stakeholders \u0026amp; potential customers\nTechnical choices made / NFR Save time and focus on text documents. Simply write docs and with MDX\nDocusaurus builds them into static HTML files ready to be served. You can even embed React components in your Markdown thanks to MDX.\nBuilt on top of React.\nCommands to run the project clone the repo git who git clone https:\u0026lt;\u0026gt;/ikure-whims-usermanual.git\rinstall all the required packages npm install\rrun the docusaurus app npm run start\r","date":"0001-01-01","id":97,"permalink":"/ikure-whims-usermanual/ikure-whims-usermanual/introduction/","summary":"\u003ch1 id=\"documentation\"\u003eDocumentation\u003c/h1\u003e\n\u003cp\u003eRepo link \u003ca href=\"https://github.com/ikuretechsoft/ikure-whims-usermanual\"\u003eikure-whims-usermanual\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"table-of-contents\"\u003eTable of Contents\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003e\u003ca href=\"#1\"\u003eWhat is the scope of this repo?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2\"\u003eTechnical choices made\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3\"\u003eCommands to run the project\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv id=\"1\"\u003e\u003c/div\u003e\r\n\u003ch2 id=\"what-is-the-scope-of-this-repo\"\u003eWhat is the scope of this repo\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIt covers the end to end documentation of the features available in the \u003ccode\u003ewhims 360\u003c/code\u003e portal\u003c/p\u003e","tags":[],"title":"Introduction"},{"content":"Code 1: Remove Duplicate characters from String function removeDuplicateCharacters() { var string = \u0026#34;priya riya supriya\u0026#34;; let result = string .split(\u0026#34;\u0026#34;) .filter((item, index, arr) =\u0026gt; { return arr.indexOf(item) == index; }) .join(\u0026#34;\u0026#34;); return result; } console.log(removeDuplicateCharacters());\rCode 2: Remove Duplicate characters from array of element and find the count of an elements using set object: var arr = [55, 44, 55, 67, 67, 67, 67, 8, 8, 8, 8, 8, 65, 1, 2, 3, 3, 34, 5]; var unique = [...new Set(arr)]; console.log(unique); //output: [55, 44, 67, 8, 65, 1, 2, 3, 34, 5] console.log(unique.length); //output: 10 Code 3: Remove Duplicate characters from array of element using filter var myArray = [\u0026#34;a\u0026#34;, 1, \u0026#34;a\u0026#34;, 2, \u0026#34;b\u0026#34;, \u0026#34;b\u0026#34;, 3, 3, \u0026#34;1\u0026#34;]; var unique = myArray.filter((value, index, arr) =\u0026gt; arr.indexOf(value) === index); console.log(unique);\rCode 4:String reverse without reversing of individual words (Array of elements can be reversed with the reverse() method but for string, it is won\u0026rsquo;t possible so required to split and then join().\nfunction removeDuplicates() { var string = \u0026#34;India is my country\u0026#34;; let result = string.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;).split(\u0026#34; \u0026#34;).reverse().join(\u0026#34; \u0026#34;); return result; } console.log(removeDuplicates()); output = \u0026#34;aidnI si ym yrtnuoc\u0026#34;; let arr = output.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;).split(\u0026#34; \u0026#34;).reverse().join(\u0026#34; \u0026#34;); console.log(arr);\rCode 5:String reverse with reversing of individual words function withoutReverse() { var string = \u0026#34;India is my country\u0026#34;; let result = string.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;); return result; } console.log(withoutReverse()); output = \u0026#34;yrtnuoc ym si aidnI\u0026#34;;\rCode 6:String reverse without using inbult function function Reverse() { var string = \u0026#34;India is my country\u0026#34;; var result = \u0026#34;\u0026#34;; for (var i = string.length - 1; i \u0026gt;= 0; i--) { result = result + string[i]; } return result; } console.log(Reverse()); output = \u0026#34;yrtnuoc ym si aidnI\u0026#34;;\rCode 7: Find factorial of user input number const number = parseInt(prompt(\u0026#39;Enter a positive integer: \u0026#39;)); if (number \u0026lt; 0) { console.log(\u0026#39;Error! Factorial for negative number does not exist.\u0026#39;)} else if (number === 0) { console.log(`The factorial is 1.`)} else { let fact = 1; for (i = 1; i \u0026lt;= number; i++) { fact \\*= i; } console. log(`The factorial is ${fact}.`); }\rCode 8:Anagram function checkStringsAnagram() { var a = \u0026#34;Army\u0026#34;; var b = \u0026#34;Mary\u0026#34;; let str1 = a.toLowerCase().split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); let str2 = b.toLowerCase().split(\u0026#34;\u0026#34;).sort().join(\u0026#34;\u0026#34;); if (str1 === str2) { console.log(\u0026#34;True\u0026#34;); } else { console.log(\u0026#34;False\u0026#34;); } } checkStringsAnagram();\rCode 9: Swapping of 2 numbers with third variable let a = 10; let b = 20; let c; c = a; a = b; b = c; console.log(a, b, c);\rCode 10: Swapping of 2 numbers without third variable let a = 10; let b = 20; a = a + b; //30 b = a - b; //10 a = a - b; //20 console.log(a, b);\rCode 11: To check the string or number is palindrome or not( ex: 121,madam,anna) using reverse method function checkPalindrome() { const string = \u0026#34;anmna\u0026#34;; let arr = string.split(\u0026#34;\u0026#34;).reverse().join(\u0026#34;\u0026#34;); //console.log(arr) if (string == arr) { console.log(\u0026#34;Palindrome\u0026#34;); } else { console.log(\u0026#34;Not Palindrome\u0026#34;); } } checkPalindrome();\rCode 12: To check the string or number is palindrome or not( ex: 121,madam,anna) using diving length by 2 and then comparing function checkPalindrome() { const string = \u0026#34;12321\u0026#34;; let len = string.length; for (i = 0; i \u0026lt; len / 2; i++) { if (string[i] !== string[len - 1 - i]) { console.log(\u0026#34;Not Palindrome\u0026#34;); } else { console.log(\u0026#34; Palindrome\u0026#34;); } } } checkPalindrome();\rCode 13: To find longest word from a string using (for of) /for(var i=0; i\u0026gt;=num; i++) means iterate by indexing/ /_for (var word of words) means iterate by an elements not by indexing_/ function longestWord() { let string = \u0026#34;supriya is a masooooom good girl\u0026#34;; var words = string.split(\u0026#34; \u0026#34;); var longest = \u0026#34; \u0026#34;; for (var word of words) { console.log(word); if (word.length \u0026gt; longest.length) { longest = word; } } return longest.length; } longestWord();\rfunction longestWord() { let string = \u0026#34;supriya is a hahahahaha good girl\u0026#34;; var arr = string.split(\u0026#34; \u0026#34;); var longest = \u0026#34; \u0026#34;; for (var i = 0; i \u0026lt; arr.length; i++) { if (arr[i].length \u0026gt; longest.length) { longest = arr[i]; } } return longest; } console.log(longestWord());\rCode 14: To find longest word from a string using functions function findLongestWord() { var str = \u0026#34;Priya is a goog girl and having hardworking skill\u0026#34;; var longestWord = str.split(\u0026#34; \u0026#34;).sort((a, b) =\u0026gt; { return b.length - a.length; }); //in desc order //from greater to smallest word console.log(longestWord[0]); console.log(longestWord[0].length); } findLongestWord();\rCode 15: To find longest word from a string using custom ### code function longest() { var str = \u0026#34;Priya is a good girl and having hardworking skills\u0026#34;; var words = str.split(\u0026#34; \u0026#34;); var longest = \u0026#34;\u0026#34;; for (var i = 0; i \u0026lt; words.length; i++) { if (words[i].length \u0026gt; longest.length) { longest = words[i]; } } console.log(longest); return longest; } longest();\rCode 16: To find longest common string from array of strings function longestCommonString() { array = [\u0026#34;go\u0026#34;, \u0026#34;google\u0026#34;, \u0026#34;gosh\u0026#34;]; var arr = array.sort(); var i = 0; while (arr[0].length \u0026gt; 0 \u0026amp;\u0026amp; arr[0].charAt(i) === arr[arr.length - 1].charAt(i)) { i++; } console.log(arr[0].substring(0, i)); // \u0026#34;go\u0026#34; return arr[0].substring(0, i); } longestCommonString();\rCode 17: To find vowels and its count in a given string function vowelCounts() { vowels = [\u0026#34;a\u0026#34;, \u0026#34;i\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;o\u0026#34;, \u0026#34;u\u0026#34;]; var str = \u0026#34;priya\u0026#34;; count = 0; for (var letter of str.toLowerCase()) { if (vowels.includes(letter)) { count++; console.log(letter); } } console.log(count); return count; } vowelCounts();\rCode 18:To find character occurance fro the string function characterOccurance(str, letter) { let count = 0; for (var i = 0; i \u0026lt; str.length - 1; i++) { if (str.charAt(i) === letter) { count++; } } console.log(count); return count; } characterOccurance(\u0026#34;priyapri\u0026#34;, \u0026#34;p\u0026#34;);\rCode 19: To find a first pair whose sum is zero\nfunction getSumPairZero(array) { for (let number of array) { for (let i = 1; i \u0026lt; array.length; i++) { if (number + array[i] === 0) { return [number, array[i]]; } } } } const result = getSumPairZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]); console.log(result);\rfunction getSumPairZero(array) { for (let j = 0; j \u0026lt; array.length; j++) { for (let i = 1; i \u0026lt; array.length; i++) { if (array[j] + array[i] === 0) { return [array[j], array[i]]; } } } } const result = getSumPairZero([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]); console.log(result);\rCode 20: To find a first pair whose sum is zero using indexing\nfunction getSumPairZero(array) { let left = 0; let right = array.length - 1; while (left \u0026lt; right) { sum = array[left] + array[right]; if (sum === 0) { return [array[left], array[right]]; } else if (sum \u0026gt; 0) { right--; } else { left++; } } } const result = getSumPairZero([-5, -4, -3, -2, -1, 0, 2, 4, 6, 8]); console.log(result);\rCode 21: To find the largest pair of the 2 elements using indexing with unsorted elements function largestPairSumofTwo(numbers) { const num = numbers.sort((a, b) =\u0026gt; b - a); console.log(num); return num[0] + num[1]; } const result = largestPairSumofTwo([9, 7, 8, 4, 5, 6, 1, 2, 3]); console.log(result);\rCode 22: To find the largest pair of the 2 elements using indexing with sorted elements function largestPairSumofTwo(num) { return num[num.length - 1] + num[num.length - 2]; } const result = largestPairSumofTwo([1, 2, 3, 4, 5, 6, 7, 8, 9]); console.log(result);\rCode 23: To find the index of an element from an array const letters = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;]; const index = letters.indexOf(\u0026#34;b\u0026#34;); console.log(index); // `1` Code 24: Fibonacci Series (0,1,1,2,3,5,8,13\u0026hellip;.) function fibonacciSeries() { const number = parseInt(prompt(\u0026#34;Enter the number of terms: \u0026#34;)); let n1 = 0, n2 = 1, nextTerm, arr = []; arr.push(n1); arr.push(n2); for (let i = 1; i \u0026lt;= number; i++) { console.log(n1); nextTerm = n1 + n2; n1 = n2; n2 = nextTerm; arr.push(nextTerm); } return arr; } console.log(fibonacciSeries());\rCode 25: Fibonacci Series (0,1,1,2,3,5,8,13\u0026hellip;.) where keeping in array function listFibonacci(n) { var arr = [0, 1]; for (var i = 1; i \u0026lt; n; i++) arr.push(arr[i] + arr[i - 1]); return arr; } console.log(listFibonacci(4));\rCode 26: Finding a missing elements in an array and then add with existing elements. (-1 means if elements not found then it will return always -1 as per rule) function missingElement() { var a = [1, 2, 5]; var missing = []; for (var i = 1; i \u0026lt;= 6; i++) { if (a.indexOf(i) == -1) { missing.push(i); } } console.log(missing); //missing array console.log(a.concat(missing).sort()); //actual+missing elements } missingElement();\rCode 27: Find the missing no. in an array function missing(arr) { var x = 0; for (var i = 0; i \u0026lt; arr.length; i++) { x = x + 1; if (arr[i] != x) { return x; //9 } } } missing([1, 2, 3, 4, 5, 6, 7, 8, 10]);\rfunction missing(arr) { for (var i = 0, x = 1; i \u0026lt; arr.length; x++, i++) { if (arr[i] != x) { //index value comparing with pointer return x; //9 } } } console.log(missing([1, 2, 3, 4, 5, 6, 7, 8, 10]));\rCode 28: Sorting of an string/character function sorting(arr) { return arr.sort(); } console.log(sorting([\u0026#34;d\u0026#34;, \u0026#34;g\u0026#34;, \u0026#34;y\u0026#34;, \u0026#34;e\u0026#34;, \u0026#34;r\u0026#34;, \u0026#34;p\u0026#34;]));\rCode 29: Sorting of an number function sorting(arr) { return arr.sort((a, b) =\u0026gt; { return a - b; }); } console.log(sorting([1, 23, 34, 2, 76, 78])); //[1, 2, 23, 34, 76, 78] Code 30: To check if given number is prime or not function isPrime(num) { if (num \u0026lt; 2) return false; for (let k = 2; k \u0026lt; num; k++) { if (num % k == 0) { return false; } } return true; } console.log(isPrime(17)); //true Code 31: To print all the numbers from 2 to 100\nfor (let i = 2; i \u0026lt;= 100; i++) { let flag = 0; for (let j = 2; j \u0026lt; i; j++) { if (i % j == 0) { flag = 1; break; } } if (i \u0026gt; 1 \u0026amp;\u0026amp; flag == 0) { console.log(i); } }\rfor (let i = 2; i \u0026lt;= 100; i++) { let flag = 0; for (let j = 2; j \u0026lt; i; j++) { //2\u0026lt;2 //2\u0026lt;3 //3\u0026lt;4 if (i % j == 0) { flag = 1; break; } } if (i \u0026gt; 1 \u0026amp;\u0026amp; flag == 0) { document.write(i + \u0026#34;\u0026lt;/br\u0026gt;\u0026#34;); } }\rCode 32: To find unique values from 2 arrays and keep into one array.\nfunction uniqueElements(arr1, arr2) { let arr = [...arr1, ...arr2]; let array = [...new Set(arr)]; console.log(array); } uniqueElements([1, 2, 3, 4, 4], [2, 3, 4, 5, 6]);\rCode 33: Find first duplicate element from an array\nfunction firstDuplicate() { let arr = [1, 2, 2, 5, 5]; let data = []; for (var item of arr) { if (data[item]) { return item; } else { data[item] = item; console.log(data[item]); } } return -1; } console.log(firstDuplicate());\rCode 34: Write a program that prints the numbers from 1 to 100. But for multiples of three, print \u0026ldquo;Fizz\u0026rdquo; instead of the number, and for the multiples of five, print \u0026ldquo;Buzz\u0026rdquo;. For numbers which are multiples of both three and five, print \u0026ldquo;FizzBuzz\u0026rdquo;\nfor (var i = 1; i \u0026lt;= 20; i++) { if (i % 15 == 0) console.log(\u0026#34;FizzBuzz\u0026#34;); else if (i % 3 == 0) console.log(\u0026#34;Fizz\u0026#34;); else if (i % 5 == 0) console.log(\u0026#34;Buzz\u0026#34;); else console.log(i); }\rCode 35: Uppercase of each first letter of a words\nfunction upperCaseFirsstLetter() { var string = \u0026#34;India is my country\u0026#34;; var words = string.toLowerCase().split(\u0026#34; \u0026#34;); for (var i = 0; i \u0026lt; words.length; i++) { words[i] = words[i][0].toUpperCase() + words[i].slice(1); //slice is used here to give all the letters except first letter. } return words.join(\u0026#34; \u0026#34;); } console.log(upperCaseFirsstLetter());\rCode 36: Uppercase of each first letter of a words using map function\nfunction upperCaseFirsstLetter() { var string = \u0026#34;India is my country\u0026#34;; var words = string .toLowerCase() .split(\u0026#34; \u0026#34;) .map((ele) =\u0026gt; { return ele[0].toUpperCase() + ele.slice(1); }); return words.join(\u0026#34; \u0026#34;); } console.log(upperCaseFirsstLetter());\rCode 37: To check ending of the string with given character/s using inbuild function\nfunction confirmEnding(str, target) { return str.endsWith(target); //true } console.log(confirmEnding(\u0026#34;priya\u0026#34;, \u0026#34;a\u0026#34;));\rCode 38: To check ending of the string with given character/s using custom function\nfunction confirmEnding(str, target) { return str.substr(-target.length) === target; } console.log(confirmEnding(\u0026#34;priya\u0026#34;, \u0026#34;a\u0026#34;));\rCode 39: To find the largest elements for the 2 dimensional array\nfunction largestFromArray(arr) { var max = []; for (var i = 0; i \u0026lt; arr.length; i++) { var tempMax = arr[i][0]; //first elements of the 4 internal arrays i,e(1,5,45,89 for (var j = 0; j \u0026lt; arr[i].length; j++) { var currElement = arr[i][j]; if (currElement \u0026gt;= tempMax) { tempMax = currElement; } } max.push(tempMax); } console.log(max); return max; } largestFromArray([ [1, 2, 3, 4], [5, 6, 7, 9], [45, 76, 2, 1], [89, 90, 87, 9] ]);\rCode 40: To find the largest elements for the 2 dimensional array in another way\nfunction largestFromArray(arr) { var max = [0, 0, 0, 0]; for (var i = 0; i \u0026lt; arr.length; i++) { for (var j = 0; j \u0026lt; arr[i].length; j++) { if (arr[i][j] \u0026gt;= max[i]) { max[i] = arr[i][j]; } } } console.log(max); return max; } largestFromArray([ [1, 2, 3, 4], [5, 6, 7, 9], [45, 76, 2, 1], [89, 90, 87, 9] ]);\rCode 41: Print string n times using inbuilt function\nfunction repeatStrinNumTimes(str, num) { if (num \u0026lt; 1) return \u0026#34;\u0026#34;; return str.repeat(num); } console.log(repeatStrinNumTimes(\u0026#34;priya\u0026#34;, 3));\rCode 42: Print string n times in custom way\nfunction repeatStrinNumTimes(str, num) { var final = \u0026#34;\u0026#34;; if (num \u0026lt; 0) return \u0026#34;\u0026#34;; for (var i = 0; i \u0026lt; num; i++) { final = final + str; } return final; } console.log(repeatStrinNumTimes(\u0026#34;priya\u0026#34;, 3));\rCode 43: Print string n times in custom way\nfunction repeatStrinNumTimes(str, num) { if (num \u0026lt; 0) return \u0026#34;\u0026#34;; if (num === 1) return str; return str + repeatStrinNumTimes(str, num - 1); } console.log(repeatStrinNumTimes(\u0026#34;priya\u0026#34;, 3));\rCode 44: Truncate the string\nfunction truncateString(str, num) { if (num \u0026lt;= 3) return str.slice(0, num); return str.slice(0, num - 3) + \u0026#34;...\u0026#34;; //retuen only 4 digits thats why subtracted from 3 } console.log(truncateString(\u0026#34;priyabagde\u0026#34;, 2)); //pr console.log(truncateString(\u0026#34;priyabagde\u0026#34;, 4)); //p... //retuen only 4 digits Code 45: Converting one dimensional array into n dimensional array using slice\nfunction chunkArrayInGroup(arr, size) { var group = []; while (arr.length \u0026gt; 0) { group.push(arr.slice(0, size)); arr = arr.slice(size); } return group; } console.log(chunkArrayInGroup([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;], 2)); //[[\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;], [\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;]] Code 46: Converting one dimensional array into n dimensional array using splice\nfunction chunkArrayInGroup(arr, size) { var group = []; while (arr.length \u0026gt; 0) { group.push(arr.splice(0, size)); } return group; } console.log(chunkArrayInGroup([\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;], 2)); //[[\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;], [\u0026#34;c\u0026#34;, \u0026#34;d\u0026#34;]] Code 47: To find only truthy values\nfunction removeFalseValue(arr) { var trueth = []; for (var item of arr) { if (item) { trueth.push(item); } } return trueth; } console.log(removeFalseValue([\u0026#34;priya\u0026#34;, 0, \u0026#34;\u0026#34;, false, null, undefined, \u0026#34;ate\u0026#34;, Nan, 9])); //[\u0026#34;priya\u0026#34;,\u0026#34;ate\u0026#34;,9] Code 49: To find only truthy values using filter\nfunction removeFalseValue(arr) { return arr.filter((item) =\u0026gt; { return item; }); } console.log(removeFalseValue([\u0026#34;priya\u0026#34;, 0, \u0026#34;\u0026#34;, false, null, undefined, \u0026#34;ate\u0026#34;, 9]));\rCode 50: Checking all letters of second words should present in first word, in the same order using include function\nfunction characterPresent(arr) { var first = arr[0].toLowerCase(); var second = arr[1].toLowerCase(); for (var letter of second) { if (!first.includes(letter)) { return false; } } return true; } console.log(characterPresent([\u0026#34;hello\u0026#34;, \u0026#34;hey\u0026#34;]));\rCode 51: Checking all letters of second words should present in first word, in the same order using indexOf without indexing i.e for-of loop\nfunction characterPresent(arr) { var first = arr[0].toLowerCase(); var second = arr[1].toLowerCase(); for (var letter of second) { if (first.indexOf(letter) == -1) { //-1 means not found in array return false; } } return true; } console.log(characterPresent([\u0026#34;hello\u0026#34;, \u0026#34;he\u0026#34;]));\rfunction characterPresent(arr) { var first = arr[0].toLowerCase(); var second = arr[1].toLowerCase(); for (var i = 0; i \u0026lt; second.length; i++) { if (!first.includes(second[i])) { //-1 means not found in array return false; } } return true; } console.log(characterPresent([\u0026#34;hello\u0026#34;, \u0026#34;he\u0026#34;]));\rCode 52: Checking all letters of second words should present in first word, in the same order using indexOf with indexing\nfunction characterPresent(arr) { var first = arr[0].toLowerCase(); var second = arr[1].toLowerCase(); for (var i = 0; i \u0026lt; second.length; i++) { if (first.indexOf(second) == -1) { //-1 means not found in array return false; } } return true; } console.log(characterPresent([\u0026#34;hello\u0026#34;, \u0026#34;he\u0026#34;]));\rCode 53: Unique values only from 2 arrays\nfunction diffArrayElement(arr1, arr2) { var result = []; for (var i = 0; i \u0026lt; arr1.length; i++) { if (arr2.indexOf(arr1[i]) === -1) { result.push(arr1[i]); } } for (var j = 0; j \u0026lt; arr2.length; j++) { if (arr1.indexOf(arr2[j]) === -1) { result.push(arr2[j]); } } return result; } console.log(diffArrayElement([1, 2, 3, 4], [2, 3, 4, 5])); //[1,5] Code 54: Unique values only from 2 arrays\nfunction diffArrayElement(arr1, arr2) { var combine = arr1.concat(arr2); return combine.filter((num) =\u0026gt; { if (arr1.indexOf(num) == -1 || arr2.indexOf(num) == -1) return num; }); } console.log(diffArrayElement([1, 2, 3, 4], [2, 3, 4, 5]))[(1, 5)];\rCode 55: Remove Duplicates from 2 arrays using Set\nfunction uniquefromArrays(arr1, arr2) { let arr = [...arr1, ...arr2]; let unique = [...new Set(arr)]; return unique; } console.log(uniquefromArrays([1, 2, 3, 4], [2, 3, 4, 5])); //[1,2,3,4,5] code 56: Sum of all numbers from start to end given number\nfunction sumFromStartToEnd(arr) { var start = Math.min(arr[0], arr[1]); var end = Math.max(arr[0], arr[1]); sum = 0; for (var i = start; i \u0026lt;= end; i++) { sum += i; } return sum; } console.log(sumFromStartToEnd([1, 4]));\rcode 57: Remove or Delete elements from an array using various ways\n// Way 1: Removing Elements from End of a JavaScript Array var ar = [1, 2, 3, 4, 5, 6]; ar.length = 4; // set length to remove elements console.log(ar); // [1, 2, 3, 4] // Way 2: Removing Elements from Beginning of a JavaScript Array var ar = [\u0026#34;zero\u0026#34;, \u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;]; ar.shift(); // returns \u0026#34;zero\u0026#34; console.log(ar); // [\u0026#34;one\u0026#34;, \u0026#34;two\u0026#34;, \u0026#34;three\u0026#34;] // Way 3: Using Splice to Remove Array Elements in JavaScript var list = [\u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;, \u0026#34;foo\u0026#34;, \u0026#34;qux\u0026#34;]; list.splice(0, 2); // Starting at index position 0, remove two elements [\u0026#34;bar\u0026#34;, \u0026#34;baz\u0026#34;] and retains [\u0026#34;foo\u0026#34;, \u0026#34;qux\u0026#34;]. // Way 4: Removing Array Items By Value Using Splice var arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]; for (var i = 0; i \u0026lt; arr.length; i++) { if (arr[i] === 5) { arr.splice(i, 1); } } // [1, 2, 3, 4, 6, 7, 8, 9, 0] // OR; var arr = [1, 2, 3, 4, 5, 5, 6, 7, 8, 5, 9, 0]; for (var i = 0; i \u0026lt; arr.length; i++) { if (arr[i] === 5) { arr.splice(i, 1); i--; } } // [1, 2, 3, 4, 6, 7, 8, 9, 0] // Way 5: Using the Array filter Method to Remove Items By Value var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]; var filtered = array.filter(function (value, index, arr) { return value \u0026gt; 5; }); //filtered =\u0026gt; [6, 7, 8, 9] // Way 6: Making a Remove Method function arrayRemove(arr, value) { return arr.filter(function (ele) { return ele != value; }); } var result = arrayRemove(array, 6); // result = [1, 2, 3, 4, 5, 7, 8, 9, 0] // Way 7: Explicitly Remove Array Elements Using the Delete Operator var ar = [1, 2, 3, 4, 5, 6]; delete ar[4]; // delete element with index 4 console.log(ar); // [1, 2, 3, 4, undefined, 6] Code 58 : Spiral Matrix Printing | Print the elements of a matrix in spiral form/\nvar input = [ [1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16] ]; function run(input, result) { // add the first row to result result = result.concat(input.shift()); console.log(\u0026#34;res1\u0026#34;, result); //[1, 2, 3, 4] //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7] console.log(\u0026#34;in1\u0026#34;, input); //[[5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]] // [[10, 11]] // add the last element of each remaining row input.forEach(function (rightEnd) { result.push(rightEnd.pop()); }); console.log(\u0026#34;res2\u0026#34;, result); //[1, 2, 3, 4, 8, 12, 16] //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11] console.log(\u0026#34;in2\u0026#34;, input); //[[5, 6, 7], [9, 10, 11], [13, 14, 15]] // [[10]] // add the last row in reverse order result = result.concat(input.pop().reverse()); console.log(\u0026#34;res3\u0026#34;, result); //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13] //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10] console.log(\u0026#34;in3\u0026#34;, input); //[[5, 6, 7], [9, 10, 11]] // add the first element in each remaining row (going upwards) var tmp = []; input.forEach(function (leftEnd) { tmp.push(leftEnd.shift()); }); console.log(\u0026#34;res4\u0026#34;, result); //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13] console.log(\u0026#34;in4\u0026#34;, input); //[[6, 7], [10, 11]] result = result.concat(tmp.reverse()); console.log(\u0026#34;temp\u0026#34;, temp); //[9, 5] console.log(\u0026#34;res5\u0026#34;, result); //[1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5] console.log(\u0026#34;in5\u0026#34;, input); //[[6, 7], [10, 11]] //again start the function return run(input, result); } console.log(\u0026#34;result\u0026#34;, run(input, [])); // [1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10] Code 59: Currying function i.e sum of multiple argument functions //inner function can access outer function variables but outer functions can\u0026rsquo;t able to acceess inner function.\nfunction sum(a) { return function sum(b) { return function sum(c) { return function sum(d) { return a + b + c + d; }; }; }; } console.log(sum(1)(2)(3)(4)); // OR const sum = (a) =\u0026gt; (b) =\u0026gt; (c) =\u0026gt; (d) =\u0026gt; a + b + c + d; // using ES6 console.log(sum(1)(2)(3)(4));\rCode 60: Find SUM, PRODUCT AND AVERAGE of the numbers //accumulation means collection let arr=[1,2,3,4,5] let sum = arr.reduce((accum, curr) =\u0026gt;{ return accum + curr; }) console.log(sum) //15\nOR\nlet sum = arr.reduce((accum, curr) =\u0026gt;{ return accum + curr; },5) // can set initial value as 5 also console.log(sum) //20\nlet product = arr.reduce((accum, curr) =\u0026gt;{ return accum * curr; }) console.log(product)//120\nlet average = arr.reduce((accum, curr, index, array) =\u0026gt;{ let total = accum + curr; if(index === array.length-1){ return total/array.length } return total }) console.log(average)//3\nCode 61: Convert 2D/3D array into 1D using reduce function and inbuilt function i.e flat const arr = [ [\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;], [\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;], [\u0026rsquo;e\u0026rsquo;,\u0026lsquo;f\u0026rsquo;], ] const flatArr = arr.reduce((accum, curr)=\u0026gt;{ return accum.concat(curr) }) console.log(flatArr) //[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;, \u0026ldquo;e\u0026rdquo;, \u0026ldquo;f\u0026rdquo;]\nOR\nconst arr = [ [\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;], [\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;], [\u0026rsquo;e\u0026rsquo;,[\u0026lsquo;f\u0026rsquo;,\u0026lsquo;g\u0026rsquo;]], ] console.log(arr.flat(2)) //[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;, \u0026ldquo;e\u0026rdquo;, \u0026ldquo;f\u0026rdquo;] //bydefault 1 hota h as a argument\nOR\nconst arr = [ [\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;], [\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;], [\u0026rsquo;e\u0026rsquo;,[\u0026lsquo;f\u0026rsquo;,[\u0026lsquo;g\u0026rsquo;,\u0026lsquo;h\u0026rsquo;]]], ] console.log(arr.flat(3)) //[\u0026ldquo;a\u0026rdquo;, \u0026ldquo;b\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;d\u0026rdquo;, \u0026ldquo;e\u0026rdquo;, \u0026ldquo;f\u0026rdquo;, \u0026ldquo;g\u0026rdquo;, \u0026ldquo;h\u0026rdquo;]\ncode 62: Reverse of a nuber using converting into string function reverseNumber(input){ return( parseFloat(input.toString().split(\u0026rsquo;\u0026rsquo;).reverse().join(\u0026rsquo;\u0026rsquo;))*Math.sign(input) ) } console.log(reverseNumber(123)) //321\ncode 63: Reverse of a nuber function reverseNumber(input){ var result=0; while(input!=0){ //123 //12 //1 result = result 10; //010=0 //310=30 // 3210 =320 result = result + (input%10) //give reminder // 0+3=3 // 30+2=32 //320+1=321 input = Math.floor(input/10) //12 //1 // console.log(\u0026ldquo;in\u0026rdquo;, input) }\nreturn result } console.log(reverseNumber(123)) //321\ncode 64: Check Armstrong Number function CheckArmstrongNum(num){ //153 var temp = num; var result =0; var a; while(temp\u0026gt;0){ //153 //15 //1 a= temp%10; //3 //5 //1 temp= parseInt(temp/10) //15 // 1 result= result+aaa //0+333 // 27+ 555 // 27+ 555 +111 } if(result==num){ return true } return false } console.log(CheckArmstrongNum(153)) //333 + 555 + 111\ncode 65: To find the closest number in an array const needle = 5; const numbers = [1, 10, 7, 2, 4, 9]; numbers.sort((a, b) =\u0026gt; { return Math.abs(needle - a) - Math.abs(needle - b); }) console.log(numbers[0]);\ncode 66: To find the second largest number function secondLargestNum(arr){ return arr.sort((a, b)=\u0026gt; b - a )[1] } console.log(secondLargestNum([\u0026lsquo;1\u0026rsquo;, \u0026lsquo;2\u0026rsquo;, \u0026lsquo;3\u0026rsquo;, \u0026lsquo;4\u0026rsquo;, \u0026lsquo;9\u0026rsquo;]))\ncode 67: To check whether particular word/number present in sentence or not using inbuilt function function wordInSentence(str){ return str.includes(\u0026ldquo;world\u0026rdquo;); //true } console.log(wordInSentence(\u0026ldquo;Hello world, welcome to the universe.\u0026rdquo;)) OR var nums =[0,1,3,5,6,7,8,9,7] console.log(nums.includes(9)) //true OR var item=3 console.log(nums.some(x =\u0026gt; x === item)) //true\ncode 68: To check whether particular word/number present in sentence or not using custom function function checkValueExist(arr, item){ var status = \u0026ldquo;Not Exist\u0026rdquo; for(var i=0; i\u0026lt;arr.length; i++){ if(arr[i]===item){ status = \u0026ldquo;Exist\u0026rdquo; break; } } return status } console.log(checkValueExist([\u0026lsquo;priya\u0026rsquo;, \u0026lsquo;riya\u0026rsquo;, \u0026lsquo;supriya\u0026rsquo;], \u0026lsquo;priya\u0026rsquo;))\ncode 69: To check wheather property exist or not in object let student ={ name : \u0026ldquo;priya\u0026rdquo;, age: 20 } console.log(\u0026rsquo;name\u0026rsquo; in student) OR console.log(student.hasOwnProperty(\u0026rsquo;name\u0026rsquo;))\ncode 70: To dlete the property of an object let student ={ name : \u0026ldquo;priya\u0026rdquo;, age: 20, city: \u0026ldquo;pune\u0026rdquo; } delete student.age; console.log(student) OR delete student[\u0026rsquo;name\u0026rsquo;] console.log(student)\ncode 71: To find the length of the array in custom way function findLength(arr){ var len =0; while(arr[len]!==undefined){ len++ } return len; } console.log(findLength([50,60,70,80,90])) OR function findLength(arr){ return arr.length; } console.log(findLength([50,60,70,80,90]))\ncode 72: Star Pattern for(var i=1; i\u0026lt;=5;i++){ //use to create new row for(var j=i; j\u0026lt;=5; j++){ //use to add in existing row document.write(\u0026quot;*\u0026quot;) } document.write(\u0026quot;\u0026quot;) }\n**\ncode 73: Star Pattern for(var i=1; i\u0026lt;=5;i++){ //use to create new row for(var j=1; j\u0026lt;=5; j++){ //use to add in existing row document.write(\u0026quot;*\u0026quot;) } document.write(\u0026quot;\u0026quot;) }\ncode 74: Star Pattern for(var i=1; i\u0026lt;=5;i++){ //use to create new row for(var j=i; j\u0026lt;=5; j++){ //use to add in existing row document.write(i) } document.write(\u0026quot;\u0026quot;) } 11111 2222 333 44 5\ncode 75: Star Pattern for(var i=1; i\u0026lt;=5;i++){ //use to create new row for(var j=i; j\u0026lt;=5; j++){ //use to add in existing row document.write(j) } document.write(\u0026quot;\u0026quot;) } 12345 2345 345 45 5\ncode 76: Star Pattern for(var i=1; i\u0026lt;=5;i++){ //use to create new row for(var j=1; j\u0026lt;=i; j++){ //use to add in existing row document.write(\u0026quot;*\u0026quot;) } document.write(\u0026quot;\u0026quot;) }\n**\ncode 77: To find the square root var num = [4, 9, 16, 25, 36] var result = num.map(Math.sqrt) console.log(result) //[2,3,4,5,6]\ncode 78: Make alternate character to upper case function alternateText(str){ var char = str.toLowerCase().split(\u0026rsquo;\u0026rsquo;) for(var i=0; i \u0026lt;char.length; i=i+2){ char[i]=char[i].toUpperCase() } return char.join(\u0026rsquo;\u0026rsquo;) } console.log(alternateText(\u0026ldquo;Priya Bagde\u0026rdquo;)) //\u0026ldquo;PrIyA BaGdE\u0026rdquo; OR let alt = \u0026ldquo;Priya Bagde\u0026rdquo; alt = alt.split(\u0026quot;\u0026quot;) .map((letter,index)=\u0026gt;(index%2)==0 ? letter.toUpperCase(): letter.toLowerCase()) .join(\u0026quot;\u0026quot;) console.log(alt) //\u0026ldquo;PrIyA BaGdE\u0026rdquo;\ncode 79: To find the negative values in an array or 2D Array function countNegative(arr){ let count = 0; for(let i=0;i\u0026lt;arr.length; i++){ for(let j=0; j\u0026lt;arr[i].length; j++){ if(arr[i][j]\u0026lt;0){ count++ } } } return count; } console.log(countNegative([[1,-1],[-1,-1]]))\ncode 80: Find first repeating character with its index from an array function firstRepeatingIndex(arr){ let count = {}; for(let i=0;i\u0026lt;arr.length; i++){ if(count[arr[i]]) { console.log(\u0026ldquo;character\u0026rdquo;, arr[i]) console.log(\u0026ldquo;index\u0026rdquo;, count[arr[i]]) return count[arr[i]] //if exist } else { count[arr[i]]=i //if not exist keep at count } console.log(\u0026ldquo;count\u0026rdquo;, count) } return count } firstRepeatingIndex([1,0,2,3,4,4,5,7,7])\ncode 81: To find all the subsets of the set function generateSubsets (arr) { //[1,2] let subsets = []; for (const item of arr) { const tempSubsets = [\u0026hellip;subsets]; console.log(\u0026ldquo;tempSubsets\u0026rdquo;,tempSubsets) //[]//[[1]] for (const currSubset of tempSubsets) { subsets.push([\u0026hellip;currSubset, item]); console.log(\u0026ldquo;subsets\u0026rdquo;,subsets) //not came//[[1], [1,2]] } subsets.push([item]); console.log(\u0026ldquo;subsets1\u0026rdquo;,subsets) //[[1]]//[[1], [1,2],[2]] } subsets.push([]); console.log(\u0026ldquo;subsets2\u0026rdquo;,subsets) //[[1], [1, 2], [2], []] return subsets; } generateSubsets([1, 2]); OR function generateSubsets (arr) { let subsets = []; for (const item of arr) //[1,2] { const tempSubsets = [\u0026hellip;subsets];//[]//[[1]] for (const currSubset of tempSubsets) { subsets.push([\u0026hellip;currSubset, item]);//not came//[[1], [1,2]] } subsets.push([item]); //[[1]]//[[1], [1,2],[2]] } subsets.push([]);//[[1], [1, 2], [2], []] return subsets; } generateSubsets([1, 2]); OR function findAllSubsetsoOfGivenSet(arr) { var result= arr.reduce((subsets, value) =\u0026gt; subsets.concat(subsets.map(set =\u0026gt; [value,\u0026hellip;set])), [[]]) //[[]] is used to pass initial value return result } console.log(findAllSubsetsoOfGivenSet([8,9]));\nCode 82: To find the maximum repetation of the character in a string function maxRepeating(str) { let count = 0; let character = str[0]; for (let i=0; i\u0026lt;str.length; i++) { let tempCount = 1; for (let j=i+1; j\u0026lt;str.length; j++) { if (str[i] == str[j]) //if a is equal to a tempCount++; //use to find out the counts of character i.e a } if (tempCount \u0026gt; count) { count = tempCount; character = str[i]; } } console.log(count, character) return character; } maxRepeating(\u0026ldquo;aaaabbaaccccccccccccccccccde\u0026rdquo;);\nCode 83: To find all the missing numbers from an array function MissingElements(arr) { for(let i = 0; i \u0026lt; arr.length; i++) { if (arr[i] - i != arr[0]) //1-0==1 //2-1==1 //6-2!=1 //checking for consecutive numbers { while (arr[0] \u0026lt; arr[i] - i)//1\u0026lt;4 //2\u0026lt;4 //3\u0026lt;4 //finding missing numbers { console.log(i + arr[0]);//2+1 //3+1 //3+1 arr[0]++; //2 //3 //4 } } } } MissingElements([1,2,6]); //3,4,5\nCode 84: Adding an elements to the array when elements are consecutive numbers const as = [1,2,3,4]; for (let index = 5; index \u0026lt;= 10; ++index) { as.push(index); } console.log(as); //[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nCode 85: Create a new array by adding one to each elements of the existing array function plusOne(arr){ var output=[] for (let i = 0; i \u0026lt; arr.length; ++i) { output.push(arr[i]+1); } return output } console.log(plusOne([1,2,3,4]));\nCode 86: To find kth smallest or largest element in an array function findKthSmallestOrLargest(arr, num) { arr.sort(function(a, b) { return a - b}); console.log(arr) console.log(\u0026ldquo;kth smallest\u0026rdquo;, arr[num- 1]) //kth smallest console.log(\u0026ldquo;kth largest\u0026rdquo;, arr[arr.length-num]) //kth smallest\n}; console.log(findKthSmallestOrLargest([2,1,4,3,6,5,7], 3)); //kth is 3rd //3,5 \u0026mdash;==== Code 87: sort by frequency of the letters function frequencySort(str) { let map = {} for (const letter of str) { map[letter] = (map[letter] || 0) + 1; //to count the occurance }; console.log(map) //{a: 2,A: 2,b: 3,B: 3,c: 1,C: 1} let res = \u0026ldquo;\u0026rdquo;; let sorted = Object.keys(map).sort((a, b) =\u0026gt; map[b] - map[a]) console.log(\u0026ldquo;sorted\u0026rdquo;, sorted)// [\u0026ldquo;b\u0026rdquo;, \u0026ldquo;B\u0026rdquo;, \u0026ldquo;a\u0026rdquo;, \u0026ldquo;A\u0026rdquo;, \u0026ldquo;c\u0026rdquo;, \u0026ldquo;C\u0026rdquo;] for (let letter of sorted) { for (let count = 0; count \u0026lt; map[letter]; count++) { res += letter console.log(res) } } return res; }; console.log(frequencySort(\u0026ldquo;cCaaAAbbbBBB\u0026rdquo;)); //\u0026ldquo;bbbBBBaaAAcC\u0026rdquo;\nCode 88: To find the OCCURANCE of the character function frequencySort(str) { let map = {} for (var i=0; i\u0026lt;str.length; i++) { map[str[i]] = map[str[i]] ? map[str[i]]+1 : 1; //Adding an element to the object, if already present then incrementing by 1 } console.log(map)////{\u0026ldquo;c\u0026rdquo;:1, \u0026ldquo;C:1\u0026rdquo;, \u0026ldquo;a\u0026rdquo;:2, \u0026ldquo;A\u0026rdquo;:2, \u0026ldquo;b\u0026rdquo;:3, \u0026ldquo;B\u0026rdquo;:3} }; frequencySort(\u0026ldquo;cCaaAAbbbBBB\u0026rdquo;); OR function frequencySortArr(arr) { let map = {} arr.forEach((element)=\u0026gt;{map[element] = map[element]+1 || 1 }) // will get occurance of the number return [\u0026hellip;arr].sort((a,b)=\u0026gt; map[b]-map[a]) }; console.log(frequencySortArr([2,5,67,89,2,3,4,4,4])); //[4,4,4,2,2,5,67,89,3]\nCode 89: Permutation // Need to debug let perm= (str, result)=\u0026gt; { if(str.length==0){console.log(\u0026ldquo;result\u0026rdquo;, result)} //let //lte //elt //etl //tle //tel\nfor(var i=0; i\u0026lt;str.length; i++){ let rest= str.substring(0,i)+ str.substring(i+1) // console.log(\u0026ldquo;rest\u0026rdquo;, rest) //et//t//\u0026quot;\u0026quot; //e//\u0026quot;\u0026quot; //lt//t//\u0026quot;\u0026quot; //l//\u0026quot;\u0026quot; //le//e//\u0026quot;\u0026quot; //l//\u0026quot;\u0026quot; console.log(\u0026ldquo;finalresult\u0026rdquo;,result+str[i]) //l//le//let //lt//lte //e//el//elt //et//etl //t//tl//tle //te//tel perm(rest, result+str[i]) } } perm(\u0026rsquo;let\u0026rsquo;,\u0026rsquo;\u0026rsquo;); //\u0026ldquo;result\u0026rdquo; \u0026ldquo;let\u0026rdquo; //\u0026ldquo;result\u0026rdquo; \u0026ldquo;lte\u0026rdquo; //\u0026ldquo;result\u0026rdquo; \u0026ldquo;elt\u0026rdquo; //\u0026ldquo;result\u0026rdquo; \u0026ldquo;etl\u0026rdquo; //\u0026ldquo;result\u0026rdquo; \u0026ldquo;tle\u0026rdquo; //\u0026ldquo;result\u0026rdquo; \u0026ldquo;tel\u0026rdquo;\nCode 90: To find the power of x var r = 1, i = 1; var b = 2;e =3 ; while(i \u0026lt;= e) //1\u0026lt;3//2\u0026lt;3//3=3 { r = b; //12//22//42 i++; } console.log(r) //8 OR let number = 2; let exponent = 3; console.log( number ** exponent); console.log( Math.pow(number, exponent));\nCode 91: To find even and odd number by user input const number = prompt(\u0026ldquo;Enter a number: \u0026ldquo;); if(number % 2 == 0) { console.log(\u0026ldquo;The number is even.\u0026rdquo;); } else { console.log(\u0026ldquo;The number is odd.\u0026rdquo;); }\nCode 92: Grouping of an Anagram let collectAnagrams = (words) =\u0026gt; { let anagrams = {} let collectedAnagrams = [] for (let word of words) { let sortedWord = word.split(\u0026rsquo;\u0026rsquo;).sort().join(\u0026rsquo;\u0026rsquo;) //arrange ervery word in alphabetical order anagrams[sortedWord] = anagrams[sortedWord] || [] //console.log(\u0026rdquo;.\u0026quot;,anagrams) //creating keys anagrams[sortedWord].push(word) // assigning exact values to keys //console.log(\u0026rdquo;..\u0026quot;, anagrams) } console.log(anagrams) for (let item in anagrams) { collectedAnagrams.push(anagrams[item]) // add their values as subarrays of the collectedAnagrams array } return collectedAnagrams } console.log(collectAnagrams([\u0026lsquo;bag\u0026rsquo;, \u0026lsquo;gab\u0026rsquo;, \u0026lsquo;foo\u0026rsquo;, \u0026lsquo;abg\u0026rsquo;, \u0026lsquo;oof\u0026rsquo;, \u0026lsquo;ofo\u0026rsquo;])) //[[\u0026ldquo;bag\u0026rdquo;, \u0026ldquo;gab\u0026rdquo;, \u0026ldquo;abg\u0026rdquo;], [\u0026ldquo;foo\u0026rdquo;, \u0026ldquo;oof\u0026rdquo;, \u0026ldquo;ofo\u0026rdquo;]]\nCode 93: Sort an array of an element by parity means even then odd elements function sortByParity(arr){ let even =[] let odd =[] let result=[] for(let i=0; i\u0026lt;arr.length; i++){ if(arr[i]%2 ===0 ) even.push(arr[i]) else odd.push(arr[i]) } result = even.concat(odd) return result } console.log(sortByParity([1,2,3,4,5,6,7,8,9]))\nCode 94: Move all the zeroes at the end of an elements var array = [1,0,2,0,0,9,0,6,7]; array.sort(function(a, b) { if(a==0 \u0026amp;\u0026amp; b!=0) return 1; else if (a!=0 \u0026amp;\u0026amp; b==0) return -1; else return 0; }); console.log(array) OR var moveZeroes = function(arr) { for ( var i = 0; i \u0026lt; arr.length-1; i++) { if(arr[i] === 0) { //if place x here then move x last to the array var temp = arr.splice(i, 1); console.log(temp[0]) arr.push(temp[0]); } } return arr; }; console.log(moveZeroes([1,0,4,8,6,0,8,3,39,0])) //[1,4,8,6,8,3,39,0,0,0]\nCode 95: Print consecutive numbers function range(num) { var result =[] for(var i =0; i\u0026lt;num; i++) { result.push(i) } return result }; console.log(range(10)); //[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nCode 96: 4 Ways to empty an array var arrayList = [\u0026lsquo;a\u0026rsquo;, \u0026lsquo;b\u0026rsquo;, \u0026lsquo;c\u0026rsquo;, \u0026rsquo;d\u0026rsquo;, \u0026rsquo;e\u0026rsquo;, \u0026lsquo;f\u0026rsquo;]; console.log(\u0026ldquo;1\u0026rdquo;, arrayList = []) console.log(\u0026ldquo;2\u0026rdquo;, arrayList.length = 0) console.log(\u0026ldquo;3\u0026rdquo;, arrayList.splice(0, arrayList.length)) var result= function(){while(arrayList.length) { arrayList.pop(); }} console.log(\u0026ldquo;4\u0026rdquo;, arrayList)\nCode 97: Create a function to calculate the sum of all the numbers in a jagged array function sumArray(ar) { var sum = 0; for(var el of ar) { if (Array.isArray(el)) { el = sumArray(el); //recursion } sum += el; } return sum; } console.log(sumArray([1, 2, [3, [4], [5, 6]], [7]])) //28\nCode 98: To check weather perfect number or not function is_perfect(number) { var temp = 0; for(var i=1;i\u0026lt;=number/2;i++) { if(number%i === 0) { console.log(i) //1,2,4,7,14 temp += i; } } if(temp === number \u0026amp;\u0026amp; temp !== 0) { console.log(\u0026ldquo;It is a perfect number.\u0026rdquo;); } else { console.log(\u0026ldquo;It is not a perfect number.\u0026rdquo;); } } is_perfect(28);\nCode 99: Number of days between 2 dates calculation date1 = \u0026ldquo;2020-01-01\u0026rdquo;, date2 = \u0026ldquo;2020-01-30\u0026rdquo; function daysBetweenDates (date1, date2) { const days = (new Date(date2) - new Date(date1)) / (1000 _ 60 _ 60 * 24) return days } console.log(daysBetweenDates(date1,date2))\nCode 100: To find todays date var today = new Date(); var date = today.getFullYear()+\u0026rsquo;-\u0026rsquo;+(today.getMonth()+1)+\u0026rsquo;-\u0026rsquo;+today.getDate(); console.log(date)\nCode 101: String Compression (Microsoft, Amazon etc) function stringCompression (str) { if (str.length ==0) { console.log(\u0026lsquo;Please enter valid string.\u0026rsquo;); return; } var output = \u0026lsquo;\u0026rsquo;; var count = 0; for (var i = 0; i \u0026lt; str.length; i++) { count++; if (str[i] != str[i+1]) //if a is not equal to b { output += str[i] + count; //a+4 count = 0; //for b it will start from zero } } console.log(output); } stringCompression(\u0026rsquo;\u0026rsquo;); //Please enter valid string. stringCompression(\u0026lsquo;aaaa\u0026rsquo;); //a4 stringCompression(\u0026lsquo;aaaabbc\u0026rsquo;); //a4b2c1 stringCompression(\u0026lsquo;aaaabbcaabb\u0026rsquo;); //a4b2c1a2b2\nCode 102: Given the roots of two binary trees root and subRoot, return true if there is a subtree of root with the same structure and node values of subRoot and false otherwise. A subtree of a binary tree tree is a tree that consists of a node in tree and all of this node\u0026rsquo;s descendants. The tree tree could also be considered as a subtree of itself. Given tree s: 3 / 4 5 / 1 2 Given tree t: 4 / 1 2\nclass Node { constructor(val) { this.data = val; this.left = null; this.right = null; }} var root1,root2; root1 = new Node(26); // TREE 1 root1.right = new Node(3); root1.right.right = new Node(3); root1.left = new Node(10); root1.left.left = new Node(4); root1.left.left.right = new Node(30); root1.left.right = new Node(6); root2 = new Node(10); // TREE 2 root2.right = new Node(6); root2.left = new Node(4); root2.left.right = new Node(30); function areIdentical(root1, root2) //to check for same { if (root1 == null \u0026amp;\u0026amp; root2 == null) return true; if (root1 == null || root2 == null) return false; return (root1.data == root2.data \u0026amp;\u0026amp; areIdentical(root1.left, root2.left) \u0026amp;\u0026amp; areIdentical(root1.right, root2.right)); } function isSubtree(T, S) //main function { if (S == null) return true; if (T == null) return false; if (areIdentical(T, S)) return true; return isSubtree(T.left, S) || isSubtree(T.right, S); } console.log(isSubtree(root1, root2))\nFind triplets whose sum is zero function findTriplets(arr, n) { arr.sort(); for (var i = 0; i \u0026lt; arr.length; i++) { var j = i + 1, k = arr.length - 1; while (j \u0026lt; k) { if (arr[i] + arr[j] + arr[k] \u0026lt; n) { j++; } else if (arr[i] + arr[j] + arr[k] \u0026gt; n) { k\u0026ndash;; } else { console.log(arr[i] + \u0026ldquo;,\u0026rdquo; + arr[j] + \u0026ldquo;,\u0026rdquo; + arr[k]); j++; k\u0026ndash;; } } } return true; } var arr = [-1, -4, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; findTriplets(arr, 0);\nConvert Array into object:- const arr = [\u0026ldquo;John\u0026rdquo;, \u0026ldquo;Peter\u0026rdquo;, \u0026ldquo;Sally\u0026rdquo;, \u0026ldquo;Jane\u0026rdquo;]; const updatedArr={\u0026hellip;arr}; console.log(updatedArr)//{0: \u0026lsquo;John\u0026rsquo;, 1: \u0026lsquo;Peter\u0026rsquo;, 2: \u0026lsquo;Sally\u0026rsquo;, 3: \u0026lsquo;Jane\u0026rsquo;}\n3 main use-cases of #map( ) function:- 1 . Used for rendering a list of data to the Dom in React 2. Used to modify an element in array depending on some requirement, which means calling a function on each item in Array 3. Used to convert String to Array\nJAVASCRIPTS Inbuilt Functions:\nCode : JAVASCRIPT substr concept var sentence =\u0026ldquo;I\u0026rsquo;m priya and having sounds kowledge.\u0026rdquo; console.log(sentence.substr(0,5)) //(startigIndex, NoOfCharatersWants\u0026ndash;\u0026gt;take 1 less)//I\u0026rsquo;m p console.log(sentence.substr(2,5)) //m pri console.log(sentence.substr(2)) //m priya and having sounds kowledge. console.log(sentence.substr(4)) //priya and having sounds kowledge. console.log(sentence.substr(-4)) //Negative goes From ending of the string //dge. console.log(sentence.substr(-5)) //edge.\nCode : JAVASCRIPT slice concept i.e, it doesn\u0026rsquo;t change the original array var sentence =\u0026ldquo;I\u0026rsquo;m priya and having sounds kowledge.\u0026rdquo; console.log(sentence.slice(0,5)) //\u0026ldquo;I\u0026rsquo;m p\u0026rdquo; console.log(sentence.slice(2,5)) //\u0026ldquo;m p\u0026rdquo; console.log(sentence.slice(2)) //\u0026ldquo;m priya and having sounds kowledge.\u0026rdquo; console.log(sentence.slice(4)) //\u0026ldquo;priya and having sounds kowledge.\u0026rdquo; console.log(sentence.slice(-4)) //\u0026ldquo;dge.\u0026rdquo; console.log(sentence.slice(-5)) //\u0026ldquo;edge.\u0026rdquo;\nvar sentence =[\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;,\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;] console.log(sentence.slice(0,2)) //[\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;] console.log(sentence) //[\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;,\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;]\nCode : JAVASCRIPT splice concept i.e, it changes the original array var sentence =[\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;,\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;] console.log(sentence.splice(0,2)) //[\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;] console.log(sentence) //[\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;]\nCode: JAVASCRIPT indexOf concept var greeting = \u0026ldquo;Hello\u0026rdquo; console.log(greeting.indexOf(\u0026ldquo;e\u0026rdquo;)) //1\nCode: JAVASCRIPT split concept var name =\u0026ldquo;Priya Bagde\u0026rdquo; console.log(name.split(\u0026quot;\u0026quot;)) //[\u0026ldquo;P\u0026rdquo;,\u0026ldquo;r\u0026rdquo;,\u0026ldquo;i\u0026rdquo;,\u0026ldquo;y\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026quot; \u0026ldquo;,\u0026ldquo;B\u0026rdquo;,\u0026ldquo;a\u0026rdquo;,\u0026ldquo;g\u0026rdquo;,\u0026ldquo;d\u0026rdquo;,\u0026ldquo;e\u0026rdquo;] console.log(name.split(\u0026rdquo; \u0026ldquo;)) //[\u0026ldquo;Priya\u0026rdquo;,\u0026ldquo;Bagde\u0026rdquo;]\nCode: JAVASCRIPT join concept var arr = [\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;,\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;,\u0026rsquo;e\u0026rsquo;] console.log(arr.join()) //\u0026ldquo;a,b,c,d,e\u0026rdquo;\nCode: JAVASCRIPT join concept var arr = [\u0026lsquo;a\u0026rsquo;,\u0026lsquo;b\u0026rsquo;,\u0026lsquo;c\u0026rsquo;,\u0026rsquo;d\u0026rsquo;,\u0026rsquo;e\u0026rsquo;] for(var i=0; i\u0026lt;arr.length; i++){ console.log(arr[i]) } \u0026ldquo;a\u0026rdquo; \u0026ldquo;b\u0026rdquo; \u0026ldquo;c\u0026rdquo; \u0026ldquo;d\u0026rdquo; \u0026ldquo;e\u0026rdquo;\nAdvance Interview Concepts\nClosures- A closure is the combination of a function and the lexical environment within which that function was declared. OR When inner function can have access to the outer function variables and parameter. The return statement does not execute the inner function - function is only executed only when followed by ()parathesis, but rather than returns the entire body of the function.\nUses/advantages of closures: -event handlers -callback functions -Encapsulation: can store data in separate store -Object data privacy -Module Design Pattern -Currying -Functions like once -memoize -setTimeouts -Iterators -maintaining state in async world\nDisadvantages of closures:\nCreating function inside a function leads to duplicate in memory and cause slowing down the application means use only when required privacy. As long as the clousers are active, the memory can\u0026rsquo;t be garbage collected means if we are using clousers in ten places then untill all the 10 process complete it hold the memory and can overcome to set closure to Null. const outerFunction =(a)=\u0026gt;{ let b=10; const innerFunction =()=\u0026gt;{ let sum = a+b; console.log(sum) } innerFunction() } outerFunction(5)// 15\nconst outerFunction =(a)=\u0026gt;{ let b=10; const innerFunction =()=\u0026gt;{ let sum = a+b; console.log(sum) } return innerFunction } outerFunction(5) //output : ()=\u0026gt;{ let sum = a+b; console.log(sum) }\nconst outerFunction =(a)=\u0026gt;{ let b=10; const innerFunction =()=\u0026gt;{ let sum = a+b; console.log(sum) } return innerFunction } let inner = outerFunction(5) console.log(inner) inner() //15\nPrototype:\nJavascript is a prototype based language, so, whenever we are creating a function using javascript, javascript engine adds a prototype property inside a function, Prototype property is basically an object (also known as Prototype object), where we can attach methods and properties in a prototype object, which enables all the other objects to inherit these methods and properties. We are creating prototype in constructor function. All the intances of objects can able to access properties and methods from constuctor function. The prototype is an object that is associated with every functions and objects by default in JavaScript, where function\u0026rsquo;s prototype property is accessible and modifiable and object\u0026rsquo;s prototype property (aka attribute) is not visible. object\u0026rsquo;s prototype property is invisible. Use Object.getPrototypeOf(obj) method instead of proto to access prototype object. prototype is useful in keeping only one copy of functions for all the objects (instances). An Object has a prototype. A prototype is also an object. Hence Even it may have its own prototype object. This is referred to as prototype chain. Several Types:\nObject.prototype- It is a prototype OBJECT of object(cunstruction function where it will inherit all properties of Object.protorype). Prototype Object of Object.prototype is NULL. Array.prototype-Prototype Object of Array.prototype is Object.prototype and Prototype Object of Object.prototype is NULL. Function.prototype Example- var person = function(name){ this.name = name; } person.prototype.age = 21; var piya = new person(\u0026ldquo;Piya\u0026rdquo;); var priya = new person(\u0026ldquo;Priya\u0026rdquo;); console.log(piya.age) //21 console.log(priya.age) //21 Purpose/Use of prototype:\nto find properties and methods of an object to implement inheritance in JavaScript Difference between Prototype and proto:\nIn reality, the only true difference between prototype and proto is that the former is a property of a class constructor, while the latter is a property of a class instance. Instances have proto, classes have prototype. Instances of a constructor function use proto to access the prototype property of its constructor function. proto is invisible property of an object. It returns prototype object of a function to which it links to. proto is Deprecated. Example: function Person(name){ this.name = name }; var eve = new Person(\u0026ldquo;Eve\u0026rdquo;); eve.proto == Person.prototype //true eve.prototype //undefined Example: function Person() { this.name = \u0026lsquo;John\u0026rsquo; } // adding property Person.prototype.name = \u0026lsquo;Peter\u0026rsquo;; Person.prototype.age = 23 const person1 = new Person(); console.log(person1.name); // John console.log(person1.age); // 23 CSS Positions:\nStatic: HTML elements are positioned static by default. Static positioned elements are not affected by the top, bottom, left, and right properties. Imapct of margin or padding. Object can\u0026rsquo;t move. it is always positioned according to the normal flow of the page. Relative: Object can move. It is positioned relative to its normal position. If want gap from its actual placed position then use it. It work with left, right, top, bottom properties. Fixed: Not allow to scroll up or down. is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element. The element is positioned relative to the browser window Absolute: it is work with relative i.e, w.r.t parent. It is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed). if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling. Sticky: An element with position: sticky; is positioned based on the user\u0026rsquo;s scroll position. Internet Explorer does not support sticky positioning. You must also specify at least one of top, right, bottom or left for sticky positioning to work. Use for to create menu. Time based Event:\nSetTimeout:\nallows us to run a FUNCTION ONCE, after the interval of time setTimeout() executes the passed function after given time. The id_value returned by setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer. Syntax- let timerId = setTimeout(function, milliseconds, [arg1], [arg2], \u0026hellip;) Don\u0026rsquo;t make a mistake by adding brackets () after the function otherwise gives undefined and nothing will scheduled. Example- let timerId = function sayHi(phrase, who) { console.log( phrase + who ); } setTimeout(sayHi, 1000, \u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;John\u0026rdquo;); SetInterval:\nallows us to run a function repeatedly, starting after the interval of time, then repeating continuously at that interval. setInterval() executes the passed function for the given time interval. The number id value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval. Syntax- Example let timerId = function sayHi(phrase, who) { console.log( phrase + who ); } setInterval(sayHi, 1000, \u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;John\u0026rdquo;); ClearTimeout:\nThis method is used to cancel a setTimeout(). Inside the method you have to reference the timeoutID. clearTimeout(timerId) ClearInterval:\nThis method is used to cancel a setInterval(). Inside the method you have to reference the intervalID. clearInterval(timerId) Debouncing and Throttling in JavaScript:\nCreate impact on performance of your website, but also prevent unnecessary API calls and load on the server. Debouncing and throttling techniques are used to limit the number of times a function can execute. ke button click, mouse move, search bar, window scrolling and window resize allow the user to decide when to execute. The main difference between throttling and debouncing is that throttling executes the function at a regular interval, while debouncing executes the function only after some cooling period. Example: If you\u0026rsquo;re scrolling, throttle will slowly call your function while you scroll (every X milliseconds). Debounce will wait until after you\u0026rsquo;re done scrolling to call your function. Throttling- Throttling is a technique in which, no matter how many times the user fires the event, the attached function will be executed only once in a given time interval.\nDebouncing- No matter how many times the user fires the event, the attached function will be executed only after the specified time once the user stops firing the event. The Debounce technique allow us to “group” multiple sequential calls in a single one. var debounced*version = *.debounce(doSomething, 200); $(window).on(\u0026lsquo;scroll\u0026rsquo;, debounced_version); debounced_version.cancel();\nCALL, APPLY and BIND method: These methods allow us to write a function once and invoke it in a different context. They all attach this into a function (or object) and the difference is in the function invocation. Call and apply are pretty interchangeable. Just decide whether it’s easier to send in an array or a comma separated list of arguments. I always remember which one is which by remembering that Call is for comma (separated list) and Apply is for Array. Bind is a bit different. It returns a new function. Call and Apply execute the current function immediately. The main concept behind all this methods is Function burrowing.\nCALL:\nIt is predefined javascript method. An object can use a method belonging to another object. Call invokes the function and allows you to pass in arguments one by one. APPLY: Apply invokes the function and allows you to pass in arguments as an array. BIND: We can bind an object to a common function, so that the function gives different results when its need. It takes an object as an first argument and creates a new function. Example1: const people={ fullName: function(){ return this.firstName+\u0026rdquo; \u0026ldquo;+this.lastName; } } const person1={ firstName: \u0026ldquo;Priya\u0026rdquo;, lastName:\u0026ldquo;Bagde\u0026rdquo; } console.log(people.fullName.call(person1)); //Priya Bagde console.log(people.fullName.apply(person1)); //Priya Bagde let bound = people.fullName.bind(person1) console.log(bound()) //Priya Bagde\nExample2: const obj = {name:\u0026ldquo;Priya\u0026rdquo;} let greeting = function(a,b){ return a+\u0026rdquo; \u0026ldquo;+this.name+\u0026rdquo; \u0026ldquo;+b; } console.log(greeting.call(obj, \u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;How are you?\u0026rdquo;)); console.log(greeting.apply(obj, [\u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;How are you?\u0026rdquo;])); let test=greeting.bind(obj); console.log(test(\u0026ldquo;Hello\u0026rdquo;, \u0026ldquo;How are you?\u0026rdquo;))\nHoisting:\nTo move all of the variable and function declarations at the top of the current scope. Hoisting is JavaScript\u0026rsquo;s default behavior of moving declarations to the top. A variable can be used before it has been declared. Note: JavaScript only hoists declarations, not the initializations. JavaScript allocates memory for all variables and functions defined in the program before execution. Due to the concept of hoisting in JavaScript, we can call a function even before we define the function definition in our program\u0026rsquo;s code. Variables defined with let and const are hoisted to the top of the block, but not initialized. Examples:\nHoisting Function: If i write below code then JS compiler auto move declaration first then call of a function. hello() //call function hello(){ //declaration console.log(\u0026ldquo;Hello world\u0026rdquo;) }\nHoisting Var keyword: var x; //declaration console.log(x) //call //output will be undefined because if value is not assigned before call then always assign a \u0026ldquo;undefined\u0026rdquo; value. whereas it doesn\u0026rsquo;t provide undefined for const and let keywords x=7; //assignment\nvar x=7; //declaration and assignment console.log(x) //call //7\nx=7; //assignment console.log(x) //call //7 var x; //declaration\nconsole.log(x) //call //undefined x=7; //assignment var x; //declaration\nconsole.log(x) //call //undefined var x=7; //declaration\nLet/const Hoising: let x=7; //declaration and assignment console.log(x) //call //7 const x; //declaration console.log(x) //call //Missing initializer in const declaration x=7; //assignment\nWindow and This:\nWindow:\nJavascript engine create global context execution and allocate some memory space. It is a big object with lot of methods and functions which is created in global space by JS engine. Window is the main JavaScript object root, aka the global object in a browser, and it can also be treated as the root of the document object model. You can access it as window. window.document or just document is the main object of the potentially visible (or better yet: rendered) document object model/DOM. window is the global object, you can reference any properties of it with just the property name - so you do not have to write down window. - it will be figured out by the runtime. window.document.getElementById(\u0026ldquo;header\u0026rdquo;) is the same as document.getElementById(\u0026ldquo;header\u0026rdquo;). This:\nAt global level THIS points to the window. With Window object THIS variable is created by default. This === window //true Example: var a=10; function b(){ var x=10; } console.log(window.a); //10 console.log(a); //10 console.log(this.a); //10\nEven Propogation an STOP Propogation: Bydefault event capturing happen first and then even bubbling happen.\nEvent Bubbling:\nWhen an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors. With bubbling, the event is first captured and handled by the innermost element and then propagated to outer elements. Bydefault event bubbling execute. To run event bubbling required to mention 3rd argument as FALSE or nothing. \u0026ldquo;child clicked\u0026rdquo; \u0026ldquo;parent clicked\u0026rdquo; \u0026ldquo;grandparent clicked\u0026rdquo; Drawback: Bubbling not occur at blur, focus, resizing of window etc. Event Capturing or Event Trickling:\nWith capturing, the event is first captured by the outermost element and propagated to the inner elements. To run event capturing required to mention 3rd argument as TRUE. \u0026ldquo;grandparent clicked\u0026rdquo; \u0026ldquo;parent clicked\u0026rdquo; \u0026ldquo;child clicked\u0026rdquo; Example: html-\ncss- div{ min-width: 10px; min-height: 10px; border: 1px solid red; padding: 30px; }\njs- for bubbling: document.querySelector(\u0026quot;#grandparent\u0026rdquo;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;grandparent clicked\u0026rdquo;)}, false); or document.querySelector(\u0026quot;#grandparent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;grandparent clicked\u0026rdquo;)}); document.querySelector(\u0026quot;#parent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;parent clicked\u0026rdquo;)}, false); or document.querySelector(\u0026quot;#parent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;parent clicked\u0026rdquo;)}); document.querySelector(\u0026quot;#child\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;child clicked\u0026rdquo;)}, false); or document.querySelector(\u0026quot;#child\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;child clicked\u0026rdquo;)}) for capturing: document.querySelector(\u0026quot;#grandparent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;grandparent clicked\u0026rdquo;)}, true); document.querySelector(\u0026quot;#parent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;parent clicked\u0026rdquo;)},true); document.querySelector(\u0026quot;#child\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;child clicked\u0026rdquo;)},true); stopPropogation: document.querySelector(\u0026quot;#grandparent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;grandparent clicked\u0026rdquo;)}, false);\ndocument.querySelector(\u0026quot;#parent\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,(e)=\u0026gt; {console.log(\u0026ldquo;parent clicked\u0026rdquo;); e.stopPropogation()},false);\ndocument.querySelector(\u0026quot;#child\u0026quot;).addEventListener(\u0026ldquo;click\u0026rdquo;,()=\u0026gt; {console.log(\u0026ldquo;child clicked\u0026rdquo;)},false);\nEvent Delegation:\nEvent delegation makes use of one of the Event Propagation techniques called Event Bubbling if we have a lot of elements handled in a similar way, then instead of assigning a handler to each of them – we put a single handler on their common ancestor. In the handler we get event.target to see where the event actually happened and handle it. Less memory usage, better performance. Less time required to set up event handlers on the page. Event delegation is a pattern to handle events efficiently in JavaScript. The main idea is to reduce the number of event handlers on a webpage and thus improving the performance of the website. When there are multiple DOM elements present, instead of adding event handlers on each one of them, you can just add one event handler (on the parent/common ancestor element) which can do the exact same work which all those multiple event handlers were supposed to do. Example:\nhtml- Counter: One more counter: Polyfill:\nWith the help of polyfill can write own implementation of BIND function. Polyfills is a way to use modern features (usually JS) on browsers where it is currently unsupported. We do this by mimicking the functionality using supported methods along with our own logic. A polyfill is a piece of code (usually JavaScript on the Web) used to provide modern functionality on older browsers that do not natively support it. Example for bind: With Bind- let name ={ first: \u0026ldquo;Priya\u0026rdquo;, last: \u0026ldquo;Bagde\u0026rdquo; } let printName = function(){ console.log(this.first+this.last) } let printNameFinal= printName.bind(name) printNameFinal()\nWithout Bind- let name ={ first: \u0026ldquo;Priya\u0026rdquo;, last: \u0026ldquo;Bagde\u0026rdquo;} let printName = function(town, state){ console.log(this.first+\u0026quot; \u0026ldquo;+this.last+\u0026rdquo; \u0026ldquo;+town+\u0026rdquo; \u0026ldquo;+state)} Function.prototype.mybind= function(\u0026hellip;args){ //printName arguments let obj = this; //printName params = args.slice(1) return function(\u0026hellip;args2){ //printNameFinal arguments obj.apply(args[0], [\u0026hellip;params, \u0026hellip;args2]) } } let printNameFinal= printName.mybind(name, \u0026ldquo;chhindwara\u0026rdquo;) printNameFinal(\u0026ldquo;MadyaPradesh\u0026rdquo;)\nPromises:-\n👉Why do you need a promise? ✌🏼Promises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.\n👉What are the three states of promise ? ✌🏼Promises have three states: Pending: This is an initial state of the Promise before an operation begins Fulfilled: This state indicates that the specified operation was completed. Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.\n👉What is promise chaining ? ✌🏼The process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining.\n👉What is promise.all ? ✌🏼Promise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below, Promise.all([Promise1, Promise2, Promise3]) .then(result) =\u0026gt; { console.log(result) }) .catch(error =\u0026gt; console.log(Error in promises ${error}))\n👉What are the pros and cons of promises over callbacks ? ✌🏼Pros: It avoids callback hell which is unreadable Easy to write sequential asynchronous code with .then() Easy to write parallel asynchronous code with Promise.all() Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions) Cons: It makes little complex code You need to load a polyfill if ES6 is not supported\n👉How to cancel a fetch request ? ✌🏼One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls.\n👉What are default parameters? ✌🏼In E5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let\u0026rsquo;s compare the behavior with an examples, //ES5 var calculateArea = function(height, width) { height = height || 50; width = width || 60; return width _ height; } console.log(calculateArea()); //300 //ES6 var calculateArea = function(height = 50, width = 60) { return width _ height; } console.log(calculateArea()); //300\n✌🏼After default parameters you should not have parameters without default value- function printValue(a=1, b) { console.log(\u0026ldquo;a = \u0026quot; + a + \u0026quot; and b = \u0026quot; + b); } printValue(); // Logs: a = 1 and b = undefined printValue(7); // Logs: a = 7 and b = undefined printValue(7, 3); // Logs: a = 7 and b = 3\n✌🏼Default values for parameters and calling it without arguments- function add(a=10, b=20) { return a+b; } console.log(\u0026rdquo; Sum is : \u0026quot; + add()); // No argument //30 console.log(\u0026rdquo; Sum is : \u0026quot; + add(1)); // with one argument //21 console.log(\u0026quot; Sum is : \u0026quot; + add(5,6)); // with both argument //11\n✌🏼JavaScript Default Parameters with null or empty Argument- function test(a = 1) { console.log(typeof a); console.log(\u0026ldquo;Value of a: \u0026quot; + a); } test(); // number, Value of a: 1 test(undefined); // number, Value of a: 1 test(\u0026rsquo;\u0026rsquo;); // string, Value of a: test(null); // object, Value of a: null\n✌🏼Default Parameters are evaluated at Call time- function append(value, array = []) { array.push(value) return array } append(1) // [1] append(2) // [2], not [1, 2]\nJWT Token:\nJSON Web Token (JWT) is an open standard (RFC 7519) that defines a compact and self-contained way for securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed. JWTs can be signed using a public/private key pair using RSA. ================================================================================================================================================================\n","date":"0001-01-01","id":98,"permalink":"/others/others/javascript-leetcode/","summary":"\u003ch3 id=\"code-1-remove-duplicate-characters-from-string\"\u003eCode 1: Remove Duplicate characters from String\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003eremoveDuplicateCharacters\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;priya riya supriya\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003estring\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eindexOf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eitem\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003ejoin\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003eresult\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eremoveDuplicateCharacters\u003c/span\u003e\u003cspan class=\"p\"\u003e());\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"code-2-remove-duplicate-characters-from-array-of-element-and-find-the-count-of-an-elements-using-set-object\"\u003eCode 2: Remove Duplicate characters from array of element and find the count of an elements using set object:\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e55\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e44\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e55\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e67\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e67\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e67\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e67\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e65\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e34\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[...\u003c/span\u003e\u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nx\"\u003eSet\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//output: [55, 44, 67, 8, 65, 1, 2, 3, 34, 5]\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elength\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e//output: 10\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"code-3-remove-duplicate-characters-from-array-of-element-using-filter\"\u003eCode 3: Remove Duplicate characters from array of element using filter\u003c/h3\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-js\" data-lang=\"js\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eunique\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003emyArray\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003efilter\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eindexOf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nx\"\u003econsole\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003elog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003eunique\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003chr\u003e\n\u003ch3 id=\"code-4string-reverse-without-reversing-of-individual-words-array-of-elements-can-be-reversed-with-the-reverse-method-but-for-string\"\u003eCode 4:String reverse without reversing of individual words (Array of elements can be reversed with the reverse() method but for string,\u003c/h3\u003e\n\u003cp\u003eit is won\u0026rsquo;t possible so required to split and then join().\u003c/p\u003e","tags":[],"title":"Javascript-leetcode"},{"content":"MultiQuestion Component Documentation Description The MultiQuestion component dynamically manages a list of questions within a section of a form using Formik\u0026rsquo;s FieldArray. It allows users to add, remove, and edit questions through child components. It provides flexibility for question management inside each section and integrates error handling.\nProps Prop Type Description sectionIndex any Index of the section in which questions are managed. State Variables State Type Description editMode boolean Tracks whether the questions are in edit mode. Functionality handleEdit() Toggles the editMode state to enable or disable question editing.\nconst handleEdit = () =\u0026gt; { setEditMode(!editMode); };\rFormik Integration: FieldArray The FieldArray component allows users to add, remove, and manage multiple questions within the form\u0026rsquo;s section.\nFieldArray Usage name: Points to the questions array inside a specific section (e.g., sections[0].questions). push: Adds a new question to the array. remove: Removes an existing question by index. form: Provides access to Formik\u0026rsquo;s form state, including values and setFieldValue. \u0026lt;FieldArray name={`sections[${sectionIndex}].questions`}\u0026gt; {(QuestionProps) =\u0026gt; { const { push, remove, form } = QuestionProps; const { values, setFieldValue } = form; const { sections } = values; }} \u0026lt;/FieldArray\u0026gt;\rRendering Logic Question Array Generation: A question array is created dynamically based on the current number of questions. const totalNumberOfQuestions = sections[sectionIndex]?.questions?.length + 1; let questionArray: any[] = []; for (let i = 1; i \u0026lt; totalNumberOfQuestions; i++) { questionArray.push(i); }\rMapping Questions: Each question is passed to the Questions component along with essential props (e.g., push, remove, setFieldValue, and values). { sections[sectionIndex]?.questions?.map((multiQuestion: any, index: any) =\u0026gt; ( \u0026lt;Questions sectionIndex={sectionIndex} index={index} push={push} remove={remove} values={values} questionArray={questionArray} setFieldValue={setFieldValue} sections={sections} /\u0026gt; )); }\rError Message Handling: If any errors occur with the questions field, they are displayed via Formik’s ErrorMessage component. \u0026lt;div className=\u0026#34;text-danger mt-5 bg-danger\u0026#34;\u0026gt; \u0026lt;ErrorMessage name=\u0026#34;questions\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt;\rComponent Hierarchy MultiQuestion Renders a list of questions for the given section. Contains FieldArray to manage the question list. Questions (Child Component) Manages individual question details and interactions. Code Example const MultiQuestion = ({ sectionIndex }: any) =\u0026gt; { const [editMode, setEditMode] = useState(false); const handleEdit = () =\u0026gt; setEditMode(!editMode); return ( \u0026lt;div className=\u0026#34;fv-row col-lg-12\u0026#34;\u0026gt; \u0026lt;FieldArray name={`sections[${sectionIndex}].questions`}\u0026gt; {(QuestionProps) =\u0026gt; { const { push, remove, form } = QuestionProps; const { values, setFieldValue } = form; const { sections } = values; const totalNumberOfQuestions = sections[sectionIndex]?.questions?.length + 1; let questionArray: any[] = []; for (let i = 1; i \u0026lt; totalNumberOfQuestions; i++) { questionArray.push(i); } return ( \u0026lt;div className=\u0026#34;d-flex flex-column\u0026#34;\u0026gt; {sections[sectionIndex]?.questions?.map( (multiQuestion: any, index: any) =\u0026gt; ( \u0026lt;Questions sectionIndex={sectionIndex} index={index} push={push} remove={remove} values={values} questionArray={questionArray} setFieldValue={setFieldValue} sections={sections} /\u0026gt; ) )} \u0026lt;/div\u0026gt; ); }} \u0026lt;/FieldArray\u0026gt; \u0026lt;div className=\u0026#34;text-danger mt-5 bg-danger\u0026#34;\u0026gt; \u0026lt;ErrorMessage name=\u0026#34;questions\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }; export default MultiQuestion;\rConclusion The MultiQuestion component is an essential part of managing dynamic forms. It allows for flexible question handling with the help of Formik’s FieldArray and ensures that users can seamlessly interact with multiple questions within a section. This component offers a solid foundation for building dynamic, interactive forms that require complex nested inputs.\n","date":"0001-01-01","id":99,"permalink":"/360-whims/360-whims/formbuilder/multiquestion/","summary":"\u003ch2 id=\"multiquestion-component-documentation\"\u003eMultiQuestion Component Documentation\u003c/h2\u003e\n\u003ch3 id=\"description\"\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eMultiQuestion\u003c/code\u003e component dynamically manages a list of questions within a section of a form using \u003cstrong\u003eFormik\u0026rsquo;s \u003ccode\u003eFieldArray\u003c/code\u003e\u003c/strong\u003e. It allows users to add, remove, and edit questions through child components. It provides flexibility for question management inside each section and integrates error handling.\u003c/p\u003e","tags":[],"title":"MultiQuestion"},{"content":"Code Documentation: MultiSection Component The MultiSection component is a React functional component that leverages formik\u0026rsquo;s FieldArray to dynamically render multiple sections and manage form fields. The component supports adding and removing sections with custom logic for each section. It also features a modal toggle mechanism using the React useState hook.\nDependencies formik: Provides FieldArray for managing dynamic form fields. react: Hooks used: useState, useEffect, useRef. Sections: A child component responsible for rendering individual section details. Code Breakdown 1. Component Definition const MultiSection = () =\u0026gt; { const [isModalOpen, setIsModalOpen] = useState\u0026lt;boolean\u0026gt;(false);\risModalOpen: A state variable to manage the visibility of a modal. setIsModalOpen: Updates the modal state to open/close. 2. handleModal Function const handleModal = () =\u0026gt; { setIsModalOpen(!isModalOpen); };\rhandleModal: Toggles the isModalOpen state, switching the modal\u0026rsquo;s visibility. Rendering the UI 3. Top-level Container \u0026lt;div className=\u0026#34;d-flex flex-column\u0026#34;\u0026gt;\rRenders a flex container for vertical alignment. FieldArray Usage 4. FieldArray Implementation \u0026lt;FieldArray name=\u0026#34;sections\u0026#34;\u0026gt; {(fieldArrayProps) =\u0026gt; { const { push, remove, form } = fieldArrayProps; const { values, setFieldValue } = form; const { sections } = values;\rFieldArray: Manages an array of sections. push: Adds a new section to the array. remove: Removes a section at the specified index. form: Provides access to the form\u0026rsquo;s values and methods, such as setFieldValue. 5. Mapping Through Sections {sections?.map((section: any, index: any) =\u0026gt; {\rIterates over the sections array to render each section using the Sections component. Rendering Individual Sections 6. Sections Component \u0026lt;Sections remove={remove} values={values} index={index} setFieldValue={setFieldValue} /\u0026gt;\rSections Component: Renders each section and provides functions for removing and updating section data. Add Section Button 7. Conditional Rendering of Add Button {values?.sections.length - 1 === index \u0026amp;\u0026amp; ( \u0026lt;div style={{ border: \u0026#34;1.5px solid black\u0026#34;, borderStyle: \u0026#34;dashed\u0026#34; }} className=\u0026#34;h-200px mt-15 d-flex align-items-center justify-content-center\u0026#34; \u0026gt; \u0026lt;i title=\u0026#34;Add new section\u0026#34; className=\u0026#34;fs-5x fas fa-plus-circle text-hover-primary cursor-pointer\u0026#34; onClick={() =\u0026gt; push({...})} \u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; )}\rAdd Button Logic: Displays the Add New Section button only for the last section to avoid duplicate buttons. Button Action: When clicked, it triggers the push function to add a new section with default values. 8. Default Section Structure push({ secId: index + 1, sectionName: \u0026#34;\u0026#34;, nextPage: true, questions: [ { questionName: \u0026#34;\u0026#34;, questionType: \u0026#34;TextField\u0026#34;, validations: { dataType: \u0026#34;Text\u0026#34;, minValue: \u0026#34;\u0026#34;, maxValue: \u0026#34;\u0026#34;, minLength: \u0026#34;\u0026#34;, maxLength: \u0026#34;\u0026#34; }, description: \u0026#34;\u0026#34;, options: [{ option: \u0026#34;\u0026#34; }], questionRequired: false, descriptionRequired: false, validateTextField: false, isConditionalQuestion: false, conditions: [ { textCondition: \u0026#34;\u0026#34;, numberCondition: \u0026#34;\u0026#34;, conditionValue: \u0026#34;\u0026#34;, questionNumber: \u0026#34;\u0026#34; } ] } ], isDraft: true });\rSection Data Structure: secId: Unique identifier for each section. sectionName: Name of the section. questions: An array of question objects. validations: Defines validation rules for each question. conditions: Conditional logic for displaying questions. Component Export export default MultiSection;\rExports the MultiSection component for use in other parts of the application. Summary The MultiSection component offers a dynamic, user-friendly way to manage form sections using formik\u0026rsquo;s FieldArray. It provides flexibility by allowing users to add and remove sections, each with a predefined data structure. The modular use of the Sections component ensures clean code and separation of concerns.\n","date":"0001-01-01","id":100,"permalink":"/360-whims/360-whims/formbuilder/multisection/","summary":"\u003ch3 id=\"code-documentation-multisection-component\"\u003e\u003cstrong\u003eCode Documentation: MultiSection Component\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eMultiSection\u003c/code\u003e component is a React functional component that leverages \u003ccode\u003eformik\u003c/code\u003e\u0026rsquo;s \u003ccode\u003eFieldArray\u003c/code\u003e to dynamically render multiple sections and manage form fields. The component supports adding and removing sections with custom logic for each section. It also features a modal toggle mechanism using the React \u003ccode\u003euseState\u003c/code\u003e hook.\u003c/p\u003e","tags":[],"title":"MultiSection"},{"content":" let a=3; let b = new Number(3); let c=3;\nconsole.log(a == b); console.log(a === b); console.log(b === c);\nA: true false true B: false false true C: true false false D: false true true Answer Option: C What will be the output of the following code?\nconst telegramGroup = { name: \u0026#39;TeamDevkode\u0026#39; } const { name: TDK } = telegramGroup; console.log(TDK);\rA: null B: Error will be thrown C: TeamDevkode D: undefined Answer Option: C What will be the output?\nlet myName = \u0026#39;Sunny\u0026#39;; let groupName = myName; myName = \u0026#39;DevKode\u0026#39;; console.log(groupName); const obj1 = { id:1, name:\u0026#34;Sunny\u0026#34;, } const obj2 = obj1; obj2.name = \u0026#39;DevKode\u0026#39;; console.log(obj1);\rA: Sunny , { id: 1, name: 'Sunny' } B: DevKode,{ id: 1, name: 'Sunny' } C: DevKode,{ id: 1, name: 'DevKode' } D: Sunny,{ id: 1, name: 'DevKode' } Answer Option: D What will be the output?\nfunction greet(person) { if (person == { name: \u0026#39;Narendra Modi\u0026#39; }) { return \u0026#39;hey Narendra Modi\u0026#39; } else { return \u0026#39;hey Donald Trump\u0026#39; } } console.log(greet({ name: \u0026#39;Narendra Modi\u0026#39; }))\rA: hey Narendra Modi B: hey Donald Trump Answer Option: B What will be the output?\nconst sample = [\u0026#34;xyz\u0026#34;, \u0026#34;abc\u0026#34;, \u0026#34;test\u0026#34;, \u0026#34;ryan\u0026#34;, \u0026#34;apple\u0026#34;]; delete sample[3]; console.log(sample.length);\rA: 4 B: 5 C: Error updating the constant variable. Answer Option: B What will be the output?\nconst fruits_obj = { 0 : \u0026#34;apple\u0026#34; , 1 : \u0026#34;mango\u0026#34; , 2:\u0026#34;banana\u0026#34;}; const fruits_arr = [\u0026#34;apple\u0026#34;,\u0026#34;mango\u0026#34;, \u0026#34;banana\u0026#34;]; console.log(typeof fruits_obj); console.log(typeof fruits_arr); console.log(fruits_obj == fruits_arr);\rA: Object , Array , False B: Object , Array , True C: Object , Object , False D: Object , Object , True Answer Option: C ","date":"0001-01-01","id":101,"permalink":"/code-snippets/objects/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003elet a=3;\u003c/strong\u003e\n\u003cstrong\u003elet b = new Number(3);\u003c/strong\u003e\n\u003cstrong\u003elet c=3;\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003econsole.log(a == b);\u003c/strong\u003e\n\u003cstrong\u003econsole.log(a === b);\u003c/strong\u003e\n\u003cstrong\u003econsole.log(b === c);\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003etrue false true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003efalse false true\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003etrue false false\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eD: \u003ccode\u003efalse true true\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-c\"\u003eOption: C\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"Objects"},{"content":"","date":"0001-01-01","id":102,"permalink":"/others/","summary":"","tags":[],"title":"Others"},{"content":"Table of contents Newsletters Books Courses Papers YouTube Podcasts Communities LinkedIn Platforms Other catalogs Newsletters General software engineer growth High Growth Engineer The Developing Dev Level up software engineering Engineer’s Codex Coding Challenges EcZachly Data Engineering Newsletter Techlead Mentor The Caring Techie Refactoring Strategize Your Career Saiyan Growth Letter Software Design: Tidy First? Dev Interrupted Exaltitude Career Growth A Life Engineered Staying up-to-date The Pragmatic Engineer TLDR Pointer.io Changelog News Hungry Minds Frameworks and smart thinking Wes Kao\u0026rsquo;s Newsletter Operator\u0026rsquo;s Handbook Alex Brogan frameworks System design System Design Newsletter Quastor ByteByteGo Newsletter Byte-Sized Design The Polymathic Engineer Reliability engineering SRE Weekly Platform Engineering Weekly Alex Ewerlöf Notes/SRE Leadership The Hybrid Hacker Leading Developers Engineering Leadership Addy Osmani (RSS Link) Irrational Exuberance Leadership Letters Web-dev specific TLDR Web Dev Frontend Focus Frontend Engineering Smashing Magazine Kent C Dodds Josh Comeau (RSS Link) Friday Front-end CSS Weekly Bytes.dev Books Communication, writing, relationships Crucial conversations Smart Brevity The Fine Art of Small Talk 92 ways to talk to anyone Connect: Building exceptional relationships with family, friends, and colleagues What got you here won’t get you there Communication for Engineers Thanks for the Feedback Just Listen: Discover the secret to getting through to absolutely anyone Simply Said: Communicating better at work and beyond Crucial influence Radical candor Engineering management for the rest of us Crucial accountability It was the best of sentences, it was the worst of sentences On writing well The Insider\u0026rsquo;s Guide to Technical Writing Storytelling Storyworthy Career growth and promotions Omar Halabieh 90-day career blueprint Get Promoted StaffEng.com – Stories of reaching Staff-plus engineering roles Engineering A philosophy of software design Web scalability for startup engineers Collection - Grady Booch, Software architecture/design books Software engineer overall Software Engineer\u0026rsquo;s Guidebook Engineers Survival Guide The Coding Career Handbook Coders at Work: Reflections on the Craft of Programming System design Front End System Design Guidebook Awesome Front End System Design The System Design Primer Leadership The Manager’s Path Staff Engineer: Leadership beyond the management track The Staff Engineer’s Path The Coaching Habit The Advice Trap The making of a manager Become an Effective Software Engineering Manager: How to Be the Leader Your Development Team Need Persuasion and influence Influence: The psychology of persuasion Yes - 50 scientifically proven ways to be persuasive Productivity The productivity project Make time User experience Don’t make me think Refactoring UI Thinking smarter Clear thinking Thinking fast and slow Super thinking: The big book of mental models The art of thinking clearly Thinking in systems Courses Top courses Mid-level to Senior Course by Jordan Cutler Career growth courses on JoinTaro Speedrun to Promotion by Steve Huynh Become a go-to expert on your team by Jordan Cutler Frontend System Design by Maxi Ferreira - Free Josh Comeau CSS course Josh Comeau React course Kent C Dodds Epic React Kent C Dodds Epic Web Bob Ziroll Learn React for Free Google Technical Writing Recommended websites Frontendmasters subscription Udemy courses Educative subscription Pluralsight courses Udacity courses Coursera courses LinkedIn Learning Future Learn edX Microsoft Learn GreatFrontEnd Scrimba interactive courses KodeKloud Hyperskill LabEx Papers Dynamo: Amazon\u0026rsquo;s Highly Available Key-value Store MapReduce: Simplified Data Processing on Large Clusters The Google File System Bigtable: A Distributed Storage System for Structured Data Spanner: Google\u0026rsquo;s Globally Distributed Database Cassandra - A Decentralized Structured Storage System YouTube Broad news and opinions in tech Theo - t3.gg Fireship ThePrimeTime / Primeagen Senior+ soft skills A Life Engineered - Steve Huynh Exaltitude Career Growth LeadDev Lenny’s Podcast Charisma on Command Frontend/CSS tips and tricks Kevin Powell Web Dev Simplified Matt Pocock (Typescript) Sam Selikoff Productivity, side income, and personal growth Ali Abdaal Jeff Su Thomas Frank Matt D’Avella Clark Kegley Podcasts Soft skills Podcast Staff Eng Podcast Frontend First Podcast The Changelog Podcast The Scrimba Podcast Developing Leadership John Maxwell Leadership Podcast Communities Taro Exaltitude Engineering Leadership Community Small Bets Community GreatFrontend Theo - T3 Frontend Mentor Kent C. Dodds Discord Community Tiger Abrodi\u0026rsquo;s Little Software Planet Changelog Community Scrimba Discord Community ladderly.io Rands Leadership Community (Slack) LinkedIn Jordan Cutler Gregor Ojstersek Gergely Orosz Nicola Ballotta Alex Chiou Rahul Pandey Caleb Mellas John Crickett Ryan Peterman Alex Xu Zach Wilson Wes Kao Omar Halabieh Raviraj Achar Irina Stanescu Richard Donovan Luca Rossi Anton Zaides Neo Kim Dallon Asnes Tiger Abrodi Daniel Moka Mads Brodt James Willett Anemari Fiser Mike Thornton Dariusz Sadowski Adrian Stanek Steven Syrek Doug Howard Casey Dai Petar Ivanov Alex Kliotzkin Nordine Hadi Yangshun Tay David Anderson Alexandre Zajac Jean Lee Akash Mukherjee Platforms General leveling up Codecrafters: Practice writing complex software (affiliate - 40% off) non-affiliate link version Interview prep Coding interview LeetCode NeetCode PyPup Codemia Mock interviews Pramp Hello Interview Interviewing IO IGotAnOffer MeetAPro Other catalogs Software Engineer\u0026rsquo;s Library 16x Engineer ","date":"0001-01-01","id":103,"permalink":"/resources/handbook/","summary":"\u003ch2 id=\"table-of-contents\"\u003eTable of contents\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#newsletters\"\u003eNewsletters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#books\"\u003eBooks\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#courses\"\u003eCourses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#papers\"\u003ePapers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#youtube\"\u003eYouTube\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#podcasts\"\u003ePodcasts\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#communities\"\u003eCommunities\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#linkedin\"\u003eLinkedIn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#platforms\"\u003ePlatforms\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#other-catalogs\"\u003eOther catalogs\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"newsletters\"\u003eNewsletters\u003c/h2\u003e\n\u003ch3 id=\"general-software-engineer-growth\"\u003eGeneral software engineer growth\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://read.highgrowthengineer.com/\"\u003eHigh Growth Engineer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/ryanlpeterman\"\u003eThe Developing Dev\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/levelupsoftwareengineering\"\u003eLevel up software engineering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/engineercodex\"\u003eEngineer’s Codex\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/codingchallenges\"\u003eCoding Challenges\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/eczachly\"\u003eEcZachly Data Engineering Newsletter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/ravirajachar\"\u003eTechlead Mentor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/thecaringtechie\"\u003eThe Caring Techie\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/refactoring\"\u003eRefactoring\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/strategizeyourcareer\"\u003eStrategize Your Career\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/tigerabrodi\"\u003eSaiyan Growth Letter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/tidyfirst\"\u003eSoftware Design: Tidy First?\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/users/89759436-dev-interrupted\"\u003eDev Interrupted\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.exaltitude.io/newsletter\"\u003eExaltitude Career Growth\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://newsletter.alifeengineered.com/\"\u003eA Life Engineered\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"staying-up-to-date\"\u003eStaying up-to-date\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/pragmaticengineer\"\u003eThe Pragmatic Engineer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://tldr.tech/\"\u003eTLDR\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.pointer.io/\"\u003ePointer.io\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://changelog.com/news\"\u003eChangelog News\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hungryminds.dev/\"\u003eHungry Minds\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"frameworks-and-smart-thinking\"\u003eFrameworks and smart thinking\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/weskao\"\u003eWes Kao\u0026rsquo;s Newsletter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.operatorshandbook.com/\"\u003eOperator\u0026rsquo;s Handbook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.alexbrogan.com/\"\u003eAlex Brogan frameworks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"system-design\"\u003eSystem design\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/systemdesignone\"\u003eSystem Design Newsletter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.quastor.org/\"\u003eQuastor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/bytebytego\"\u003eByteByteGo Newsletter\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/users/134878169-byte-sized-design?utm_source=mentions\"\u003eByte-Sized Design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/francofernando\"\u003eThe Polymathic Engineer\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"reliability-engineering\"\u003eReliability engineering\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://sreweekly.com/\"\u003eSRE Weekly\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.platformengineeringweekly.com/\"\u003ePlatform Engineering Weekly\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://blog.alexewerlof.com/s/sre\"\u003eAlex Ewerlöf Notes/SRE\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"leadership\"\u003eLeadership\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/hybridhacker\"\u003eThe Hybrid Hacker\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/zaidesanton\"\u003eLeading Developers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://open.substack.com/pub/gregorojstersek\"\u003eEngineering Leadership\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://addyosmani.com/blog/\"\u003eAddy Osmani\u003c/a\u003e (\u003ca href=\"https://addyosmani.com/feed.xml\"\u003eRSS Link\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://lethain.com/newsletter/\"\u003eIrrational Exuberance\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.leadership-letters.com\"\u003eLeadership Letters\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"web-dev-specific\"\u003eWeb-dev specific\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://tldr.tech/webdev\"\u003eTLDR Web Dev\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://frontendfocus.substack.com/\"\u003eFrontend Focus\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://frontendengineering.substack.com/\"\u003eFrontend Engineering\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.smashingmagazine.com/the-smashing-newsletter/\"\u003eSmashing Magazine\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://kentcdodds.com/blog\"\u003eKent C Dodds\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.joshwcomeau.com/tutorials/\"\u003eJosh Comeau\u003c/a\u003e (\u003ca href=\"https://www.joshwcomeau.com/rss.xml\"\u003eRSS Link\u003c/a\u003e)\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://fridayfrontend.curated.co/\"\u003eFriday Front-end\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://css-weekly.com/\"\u003eCSS Weekly\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://bytes.dev/\"\u003eBytes.dev\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"books\"\u003eBooks\u003c/h2\u003e\n\u003ch3 id=\"communication-writing-relationships\"\u003eCommunication, writing, relationships\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Crucial-Conversations-Tools-Talking-Stakes-ebook/dp/B093Y3N433\"\u003eCrucial conversations\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Smart-Brevity-Power-Saying-More-ebook/dp/B09TGMK8G6\"\u003eSmart Brevity\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Fine-Art-Small-Talk-Conversation-ebook/dp/B0BY2K9KL2\"\u003eThe Fine Art of Small Talk\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/How-Talk-Anyone-Success-Relationships-ebook/dp/B000SEI4V0\"\u003e92 ways to talk to anyone\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Connect-Building-Exceptional-Relationships-Colleagues-ebook/dp/B0894279WZ\"\u003eConnect: Building exceptional relationships with family, friends, and colleagues\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/What-Here-There-Marshall-Goldsmith/dp/B09Z2YY2BX\"\u003eWhat got you here won’t get you there\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Communication-Engineers-developers-communicators-productivity-ebook/dp/B08W8MJNF8\"\u003eCommunication for Engineers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Thanks-Feedback-Science-Receiving-Well-ebook/dp/B00DMCV0XE\"\u003eThanks for the Feedback\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Just-Listen-Discover-Getting-Absolutely-ebook/dp/B00TRF2LJW\"\u003eJust Listen: Discover the secret to getting through to absolutely anyone\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Simply-Said-Communicating-Better-Beyond-ebook/dp/B01M7SGOHF\"\u003eSimply Said: Communicating better at work and beyond\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Crucial-Influence-Third-Leadership-Behavior-ebook/dp/B0BNW8Y18Z\"\u003eCrucial influence\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Radical-Candor-Revised-Kick-Ass-Humanity-ebook/dp/B07P9LPXPT\"\u003eRadical candor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Engineering-Management-Rest-Sarah-Drasner-ebook/dp/B0BGYVDX35\"\u003eEngineering management for the rest of us\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Crucial-Accountability-Resolving-Expectations-Commitments-ebook/dp/B00C4BDRW6\"\u003eCrucial accountability\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Was-Best-Sentences-Worst-Crafting-ebook/dp/B0036S4AX6\"\u003eIt was the best of sentences, it was the worst of sentences\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Writing-Well-Classic-Guide-Nonfiction/dp/0060891548\"\u003eOn writing well\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Insiders-Guide-Technical-Writing-ebook/dp/B09X2CHHB1\"\u003eThe Insider\u0026rsquo;s Guide to Technical Writing\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"storytelling\"\u003eStorytelling\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Storyworthy-Engage-Persuade-through-Storytelling-ebook/dp/B07CV2PFYJ\"\u003eStoryworthy\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"career-growth-and-promotions\"\u003eCareer growth and promotions\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.omarhalabieh.com/90-day-career-blueprint/\"\u003eOmar Halabieh 90-day career blueprint\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Get-Promoted-Really-Missing-Holding-ebook/dp/B09WGJVR4Z\"\u003eGet Promoted\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://staffeng.com/\"\u003eStaffEng.com – Stories of reaching Staff-plus engineering roles\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"engineering\"\u003eEngineering\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Philosophy-Software-Design-2nd-ebook/dp/B09B8LFKQL\"\u003eA philosophy of software design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Scalability-Startup-Engineers-Artur-Ejsmont/dp/0071843655\"\u003eWeb scalability for startup engineers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://handbookofsoftwarearchitecture.com/books/\"\u003eCollection - Grady Booch, Software architecture/design books\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"software-engineer-overall\"\u003eSoftware engineer overall\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Software-Engineers-Guidebook-Navigating-positions/dp/908338182X\"\u003eSoftware Engineer\u0026rsquo;s Guidebook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Engineers-Survival-Guide-Facebook-Microsoft/dp/B09MBZBGFK\"\u003eEngineers Survival Guide\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learninpublic.org/\"\u003eThe Coding Career Handbook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/gp/product/1430219483\"\u003eCoders at Work: Reflections on the Craft of Programming\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"system-design-1\"\u003eSystem design\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.greatfrontend.com/system-design\"\u003eFront End System Design Guidebook\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/greatfrontend/awesome-front-end-system-design\"\u003eAwesome Front End System Design\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/donnemartin/system-design-primer\"\u003eThe System Design Primer\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"leadership-1\"\u003eLeadership\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth-ebook/dp/B06XP3GJ7F\"\u003eThe Manager’s Path\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Staff-Engineer-Leadership-beyond-management-ebook/dp/B08RMSHYGG\"\u003eStaff Engineer: Leadership beyond the management track\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Staff-Engineers-Path-Individual-Contributors/dp/1098118731\"\u003eThe Staff Engineer’s Path\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Coaching-Habit-Less-Change-Forever-ebook/dp/B01BUIBBZI\"\u003eThe Coaching Habit\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Advice-Trap-Humble-Curious-Forever-ebook/dp/B083YZTW4B\"\u003eThe Advice Trap\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Making-Manager-What-Everyone-Looks-ebook/dp/B079WNPRL2\"\u003eThe making of a manager\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Become-Effective-Software-Engineering-Manager/dp/1680507249\"\u003eBecome an Effective Software Engineering Manager: How to Be the Leader Your Development Team Need\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"persuasion-and-influence\"\u003ePersuasion and influence\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Influence-New-Expanded-Psychology-Persuasion-ebook/dp/B08HZ57WYN\"\u003eInfluence: The psychology of persuasion\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Yes-Scientifically-Proven-Ways-Persuasive-ebook/dp/B001F51X64\"\u003eYes - 50 scientifically proven ways to be persuasive\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"productivity\"\u003eProductivity\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Productivity-Project-Accomplishing-Managing-Attention-ebook/dp/B00Z3G239W\"\u003eThe productivity project\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Make-Time-Focus-Matters-Every-ebook/dp/B078QSCM3V\"\u003eMake time\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"user-experience\"\u003eUser experience\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Dont-Make-Think-Revisited-Usability/dp/0321965515\"\u003eDon’t make me think\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.refactoringui.com/\"\u003eRefactoring UI\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"thinking-smarter\"\u003eThinking smarter\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Clear-Thinking-Turning-Ordinary-Extraordinary-ebook/dp/B0BRMPJ8DR\"\u003eClear thinking\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Thinking-Fast-Slow-Daniel-Kahneman-ebook/dp/B00555X8OA\"\u003eThinking fast and slow\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Super-Thinking-Book-Mental-Models-ebook/dp/B07P8J83WR\"\u003eSuper thinking: The big book of mental models\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Art-Thinking-Clearly-Rolf-Dobelli-ebook/dp/B00IZP6EVQ\"\u003eThe art of thinking clearly\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.amazon.com/Thinking-Systems-Donella-H-Meadows-ebook/dp/B005VSRFEA\"\u003eThinking in systems\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"courses\"\u003eCourses\u003c/h2\u003e\n\u003ch3 id=\"top-courses\"\u003eTop courses\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://maven.com/jordan-cutler/mid-level-to-senior?promoCode=PATHTOSENIORHANDBOOK\"\u003eMid-level to Senior Course by Jordan Cutler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.jointaro.com/courses/\"\u003eCareer growth courses on JoinTaro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://speedruntopromotion.com/\"\u003eSpeedrun to Promotion by Steve Huynh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.jointaro.com/course/become-the-go-to-expert-as-a-software-engineer/\"\u003eBecome a go-to expert on your team by Jordan Cutler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://frontendatscale.com/courses/frontend-architecture\"\u003eFrontend System Design by Maxi Ferreira - Free\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://css-for-js.dev/\"\u003eJosh Comeau CSS course\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.joyofreact.com/\"\u003eJosh Comeau React course\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://epicreact.dev/\"\u003eKent C Dodds Epic React\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.epicweb.dev/\"\u003eKent C Dodds Epic Web\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://scrimba.com/learn/learnreact\"\u003eBob Ziroll Learn React for Free\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://developers.google.com/tech-writing/overview\"\u003eGoogle Technical Writing\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"recommended-websites\"\u003eRecommended websites\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://frontendmasters.com/\"\u003eFrontendmasters subscription\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.udemy.com/\"\u003eUdemy courses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.educative.io/\"\u003eEducative subscription\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.pluralsight.com/\"\u003ePluralsight courses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.udacity.com/\"\u003eUdacity courses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.coursera.org/\"\u003eCoursera courses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/learning/\"\u003eLinkedIn Learning\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.futurelearn.com/subjects/it-and-computer-science-courses\"\u003eFuture Learn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.edx.org/\"\u003eedX\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://learn.microsoft.com/en-us/\"\u003eMicrosoft Learn\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.greatfrontend.com/\"\u003eGreatFrontEnd\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://scrimba.com\"\u003eScrimba interactive courses\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.kodekloud.com\"\u003eKodeKloud\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hyperskill.org/tracks\"\u003eHyperskill\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://labex.io/\"\u003eLabEx\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"papers\"\u003ePapers\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf\"\u003eDynamo: Amazon\u0026rsquo;s Highly Available Key-value Store\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\"\u003eMapReduce: Simplified Data Processing on Large Clusters\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\"\u003eThe Google File System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf\"\u003eBigtable: A Distributed Storage System for Structured Data\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.usenix.org/system/files/conference/osdi12/osdi12-final-16.pdf\"\u003eSpanner: Google\u0026rsquo;s Globally Distributed Database\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf\"\u003eCassandra - A Decentralized Structured Storage System\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"youtube\"\u003eYouTube\u003c/h2\u003e\n\u003ch3 id=\"broad-news-and-opinions-in-tech\"\u003eBroad news and opinions in tech\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@t3dotgg\"\u003eTheo - t3.gg\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@Fireship\"\u003eFireship\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@ThePrimeTimeagen\"\u003eThePrimeTime / Primeagen\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"senior-soft-skills\"\u003eSenior+ soft skills\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@ALifeEngineered\"\u003eA Life Engineered - Steve Huynh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@exaltitude\"\u003eExaltitude Career Growth\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@LeadDev/videos\"\u003eLeadDev\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@LennysPodcast\"\u003eLenny’s Podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@Charismaoncommand\"\u003eCharisma on Command\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"frontendcss-tips-and-tricks\"\u003eFrontend/CSS tips and tricks\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@KevinPowell\"\u003eKevin Powell\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@WebDevSimplified\"\u003eWeb Dev Simplified\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@mattpocockuk\"\u003eMatt Pocock (Typescript)\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@samselikoff\"\u003eSam Selikoff\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"productivity-side-income-and-personal-growth\"\u003eProductivity, side income, and personal growth\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@aliabdaal\"\u003eAli Abdaal\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@JeffSu\"\u003eJeff Su\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@Thomasfrank\"\u003eThomas Frank\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@mattdavella\"\u003eMatt D’Avella\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@clarkkegley\"\u003eClark Kegley\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"podcasts\"\u003ePodcasts\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://softskills.audio/\"\u003eSoft skills Podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://podcast.staffeng.com/\"\u003eStaff Eng Podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.youtube.com/@frontendfirst\"\u003eFrontend First Podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://changelog.fm\"\u003eThe Changelog Podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://scrimba.com/podcast/\"\u003eThe Scrimba Podcast\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.developingleadership.co/\"\u003eDeveloping Leadership\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://johnmaxwellleadershippodcast.com/\"\u003eJohn Maxwell Leadership Podcast\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"communities\"\u003eCommunities\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.jointaro.com/\"\u003eTaro\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.exaltitude.io/\"\u003eExaltitude Engineering Leadership Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://dvassallo.gumroad.com/l/small-bets\"\u003eSmall Bets Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.gg/NDFx8f6P6B\"\u003eGreatFrontend\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://discord.com/invite/xHdCpcPHRE\"\u003eTheo - T3\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.frontendmentor.io/\"\u003eFrontend Mentor\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://kentcdodds.com/discord\"\u003eKent C. Dodds Discord Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://littlesoftwareplanet.com/community\"\u003eTiger Abrodi\u0026rsquo;s Little Software Planet\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://changelog.com/community\"\u003eChangelog Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://scrimba.com/community\"\u003eScrimba Discord Community\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://ladderly.io/\"\u003eladderly.io\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://randsinrepose.com/welcome-to-rands-leadership-slack/\"\u003eRands Leadership Community (Slack)\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"linkedin\"\u003eLinkedIn\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/jordancutler1/\"\u003eJordan Cutler\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/gregorojstersek/\"\u003eGregor Ojstersek\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/gergelyorosz/\"\u003eGergely Orosz\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/nicolaballotta/\"\u003eNicola Ballotta\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/alexander-chiou/\"\u003eAlex Chiou\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/rpandey1234/\"\u003eRahul Pandey\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/calebmellas/\"\u003eCaleb Mellas\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/johncrickett/\"\u003eJohn Crickett\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/ryanlpeterman/\"\u003eRyan Peterman\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/alexxubyte/\"\u003eAlex Xu\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/eczachly/\"\u003eZach Wilson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/weskao/\"\u003eWes Kao\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/omarhalabieh/\"\u003eOmar Halabieh\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/ravirajachar/\"\u003eRaviraj Achar\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/irinastanescu/\"\u003eIrina Stanescu\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/rich-donovan/\"\u003eRichard Donovan\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/lucaronin/\"\u003eLuca Rossi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/anton-zaides/\"\u003eAnton Zaides\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/nk-systemdesign-one/\"\u003eNeo Kim\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/dallonasnes/\"\u003eDallon Asnes\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/tiger-abrodi/\"\u003eTiger Abrodi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/danielmoka/\"\u003eDaniel Moka\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/madsbrodt/\"\u003eMads Brodt\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/willettjames/\"\u003eJames Willett\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/anemari-fiser/\"\u003eAnemari Fiser\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/devdetails/\"\u003eMike Thornton\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/darsadowski/\"\u003eDariusz Sadowski\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/adrianstanek/\"\u003eAdrian Stanek\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/steven-syrek/\"\u003eSteven Syrek\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/doughowardcoaching/\"\u003eDoug Howard\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/caseydai/\"\u003eCasey Dai\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/petarivanovv9/\"\u003ePetar Ivanov\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/alex-kliotzkin/\"\u003eAlex Kliotzkin\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/nordinehadi/\"\u003eNordine Hadi\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/yangshun/\"\u003eYangshun Tay\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/scarletink/\"\u003eDavid Anderson\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/alexandre-zajac/\"\u003eAlexandre Zajac\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/jeanklee/\"\u003eJean Lee\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.linkedin.com/in/akashmuk/\"\u003eAkash Mukherjee\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"platforms\"\u003ePlatforms\u003c/h2\u003e\n\u003ch3 id=\"general-leveling-up\"\u003eGeneral leveling up\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://app.codecrafters.io/join?via=jordan-cutler\"\u003eCodecrafters: Practice writing complex software (affiliate - 40% off)\u003c/a\u003e \u003ca href=\"https://app.codecrafters.io\"\u003enon-affiliate link version\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"interview-prep\"\u003eInterview prep\u003c/h3\u003e\n\u003ch4 id=\"coding-interview\"\u003eCoding interview\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.leetcode.com\"\u003eLeetCode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.neetcode.io\"\u003eNeetCode\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.pypup.com\"\u003ePyPup\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://codemia.io\"\u003eCodemia\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"mock-interviews\"\u003eMock interviews\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.pramp.com\"\u003ePramp\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.hellointerview.com\"\u003eHello Interview\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.interviewing.io\"\u003eInterviewing IO\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.igotanoffer.com\"\u003eIGotAnOffer\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://www.meetapro.com\"\u003eMeetAPro\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"other-catalogs\"\u003eOther catalogs\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://kevinsmith.io/library/\"\u003eSoftware Engineer\u0026rsquo;s Library\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://16x.engineer/\"\u003e16x Engineer\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e","tags":[],"title":"Path to Senior Engineer Handbook"},{"content":"","date":"0001-01-01","id":104,"permalink":"/prep-1/","summary":"","tags":[],"title":"prep-1"},{"content":" Promise is introduced in which version of JavaScript?\nA: ES5 B: ES6 C: ES8 D: ES8 Answer Option: B When do we say that a promise is \u0026lsquo;settled\u0026rsquo;?\nA: If it is fulfilled B: If it is rejected C: If it is pending D: If it is either fulfilled or rejected Answer Option: D What will be the output?\nconst validateUsernamePassword = (username, password) =\u0026gt; { return new Promise((resolve, reject) =\u0026gt; { if (username == \u0026#34;ABC\u0026#34; \u0026amp;\u0026amp; password == \u0026#34;123\u0026#34;) { resolve(\u0026#34;SUCCESS!\u0026#34;); } else { reject(\u0026#34;FAILURE!\u0026#34;); } }); }; validateUsernamePassword(\u0026#34;ABC\u0026#34;, \u0026#34;123\u0026#34;) .then((msg) =\u0026gt; { console.log(msg); }) .catch((err) =\u0026gt; { console.log(err); });\rA: SUCCESS! B: FAILURE! Answer Option: A What will be the output?\nlet setTimeoutResolveReject = new Promise((resolve, reject) =\u0026gt; { setTimeout(() =\u0026gt; { resolve(\u0026#34;YES\u0026#34;); }, 3000); setTimeout(() =\u0026gt; { reject(\u0026#34;NO\u0026#34;) }, 2000); }); setTimeoutResolveReject .then((msg) =\u0026gt; { console.log(msg); }) .catch((err) =\u0026gt; { console.log(err); })\rA: YES B: NO C: NO\\nYES D: YES\\nNO Answer Option: B While execution, the random value of randomWaitTime generated was 3800. What will be the output?\nlet examplePromise = new Promise((resolve, reject) =\u0026gt; { let timeout = 3000; let randomWaitTime = Math.floor(Math.random() * 5000) + 1; console.log(randomWaitTime); if (randomWaitTime \u0026lt;= timeout) { setTimeout(() =\u0026gt; { resolve(); }, randomWaitTime); } else { setTimeout(() =\u0026gt; { reject(); }, randomWaitTime); } }); examplePromise .then(() =\u0026gt; { console.log(\u0026#34;RESOLVED!\u0026#34;); }) .catch(() =\u0026gt; { console.log(\u0026#34;REJECTED!\u0026#34;); });\rA: RESOLVED! B: REJECTED! Answer Option: B Which of the following isn’t a method of Javascript Promise?\nA: Promise.then() B: Promise.all() C: Promise.error() D: Promise.catch() Answer Option: C Which of the following isn’t a state of Javascript Promise?\nA: fulfilled B: awaited C: pending D: rejected Answer Option: B What is the output?\nnew Promise((resolve, reject) =\u0026gt; { console.log(4) resolve(5) console.log(6) }).then(() =\u0026gt; console.log(7)) .catch(() =\u0026gt; console.log(8)) .then(() =\u0026gt; console.log(9)) .catch(() =\u0026gt; console.log(10)) .then(() =\u0026gt; console.log(11)) .then(console.log) .finally(() =\u0026gt; console.log(12))\rA: 4 6 7 9 11 12 B: 4 6 7 9 11 undefined 12 C: 4 6 8 12 Answer Option: B What\u0026rsquo;s the output of the following Promise Operation?\nconst promise_1 = Promise.resolve(\u0026#39;First\u0026#39;); const promise_2 = Promise.resolve(\u0026#39;Second\u0026#39;); const promise_3 = Promise.reject(\u0026#39;Third\u0026#39;); const promise_4 = Promise.resolve(\u0026#39;Fourth\u0026#39;); const runPromises = async () =\u0026gt; { const res1 = await Promise.all([promise_1, promise_2]) const res2 = await Promise.all([promise_3, promise_4]) return [res1, res2]; } runPromises() .then(res =\u0026gt; console.log(res)) .catch(err =\u0026gt; console.log(err))\rA: [['First', 'Second'], ['Third']] B: [['First', 'Second'], ['Third', 'Fourth']] C: [['First', 'Second']] D: 'Third' Answer Option: D Promise.all[...promises] method wait for an array of promises to resolve. Promise.all() will reject immediately upon any of the input promises being rejected. In our case, During runPromises() function invocation, promise_3 gets rejected with the value \u0026lsquo;Third\u0026rsquo;. The value gets logged to the console, via error handling Promise Instance Method catch(). As a result, \u0026lsquo;Third\u0026rsquo; gets printed.\nWhat\u0026rsquo;s the output of the following Promise operation?\nvar p = new Promise((resolve, reject) =\u0026gt; { reject(Error(\u0026#39;The Fails!\u0026#39;)) }) p.catch(error =\u0026gt; console.log(error.message)) p.catch(error =\u0026gt; console.log(error.message))\rA: print error message once B: print error message twice C: Unhandled Promise Rejection warning D: process exits Answer Option: B The promise p gets rejected due to reject callback in Promise Constructor and the error message gets attached to the .catch() method. In this case, .catch() works like the DOM .addEventListener('event', callback) method. Both catch method will be called separately with the same arguments. Hence, the error message gets printed twice.\nWhat\u0026rsquo;s the order of output of the following Promise operation?\nconsole.log(\u0026#39;initial\u0026#39;); setTimeout(function() { console.log(\u0026#39;setTimeout\u0026#39;); }, 0); var promise = new Promise(function(resolve, reject) { resolve(); }); promise.then(function(resolve) { console.log(\u0026#39;1st Promise\u0026#39;); }) .then(function(resolve) { console.log(\u0026#39;2nd Promise\u0026#39;); }); console.log(\u0026#39;final\u0026#39;);\rA: initial \\n 1st Promise \\n 2nd Promise \\n setTimeout \\n final B: initial \\n final \\n 1st Promise \\n 2nd Promise \\n setTimeout C: initial \\n setTimeout \\n 1st Promise \\n 2nd Promise \\n final D: initial \\n final \\n 1st Promise \\n setTimeout \\n 2nd Promise Answer Option: B ","date":"0001-01-01","id":105,"permalink":"/code-snippets/promises/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003ePromise is introduced in which version of JavaScript?\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003eES5\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003eES6\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003eES8\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eD: \u003ccode\u003eES8\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-b\"\u003eOption: B\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"Promises"},{"content":"Code Documentation: Question Component Key Components and Structure 1. Question Header Section \u0026lt;div className=\u0026#34;d-flex w-100\u0026#34;\u0026gt; \u0026lt;div className={`fs-2 form-label mb-5 ${values.sections[`${sectionIndex}`].questions[`${index}`].questionRequired === true ? \u0026#34;required\u0026#34; : null}`}\u0026gt;Question {index + 1}\u0026lt;/div\u0026gt; \u0026lt;div style={{ position: \u0026#34;relative\u0026#34; }} {...provided.dragHandleProps}\u0026gt; \u0026lt;i style={{ position: \u0026#34;absolute\u0026#34;, left: \u0026#34;400px\u0026#34;, cursor: \u0026#34;move\u0026#34; }} className=\u0026#34;fs-2 fas fa-grip-lines text-muted\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\rPurpose: Displays the question header along with a drag icon for rearranging questions. className Handling: Conditionally applies the required class if the question is marked as required. Drag and Drop: Uses provided.dragHandleProps to enable draggable functionality. The icon (fa-grip-lines) helps users visually identify draggable items. 2. Question Input Section \u0026lt;div className=\u0026#34;d-flex fv-row h-60px\u0026#34;\u0026gt; {/* Question Name */} \u0026lt;div className=\u0026#34;fv-row col-lg-8\u0026#34;\u0026gt; \u0026lt;Field name={`sections[${sectionIndex}].questions[${index}].questionName`} placeholder=\u0026#34;Enter the question\u0026#34; className=\u0026#34;form-control form-control-lg form-control-solid\u0026#34; /\u0026gt; \u0026lt;div className=\u0026#34;text-danger mb-5\u0026#34;\u0026gt; \u0026lt;ErrorMessage name={`sections[${sectionIndex}].questions[${index}].questionName`} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\rQuestion Input: Renders a text field using Formik\u0026rsquo;s \u0026lt;Field\u0026gt; component for entering the question. If validation fails, ErrorMessage displays error messages in red (text-danger). 3. Question Type Selector \u0026lt;div className=\u0026#34;fv-row w-450px ms-5\u0026#34;\u0026gt; \u0026lt;Field as=\u0026#34;select\u0026#34; name={`sections[${sectionIndex}].questions[${index}].questionType`} className=\u0026#34;form-select form-select-lg form-select-solid cursor-pointer\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;TextField\u0026#34;\u0026gt;TextField\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Date\u0026#34;\u0026gt;Date\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Image\u0026#34;\u0026gt;Image\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Dropdown\u0026#34;\u0026gt;Dropdown\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Checkbox\u0026#34;\u0026gt;Checkbox\u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Radio\u0026#34;\u0026gt;Radio\u0026lt;/option\u0026gt; \u0026lt;/Field\u0026gt; \u0026lt;div className=\u0026#34;text-danger mt-2\u0026#34;\u0026gt; \u0026lt;ErrorMessage name={`sections[${sectionIndex}].questions[${index}].questionType`} /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt;\rDropdown Menu: Allows users to select a question type (e.g., TextField, Date, Image). Uses Formik\u0026rsquo;s \u0026lt;Field\u0026gt; with as=\u0026quot;select\u0026quot; to create a dropdown. If validation errors occur, the error message is displayed below the dropdown. 4. Hover-based Action Button { hoverEffect \u0026amp;\u0026amp; ( \u0026lt;div style={{ position: \u0026#34;absolute\u0026#34;, top: \u0026#34;40%\u0026#34;, right: \u0026#34;-25px\u0026#34; }} className=\u0026#34;card p-5 d-flex align-items-center justify-content-center\u0026#34;\u0026gt; \u0026lt;i onClick={() =\u0026gt; push({ questionName: \u0026#34;\u0026#34;, questionType: \u0026#34;TextField\u0026#34;, validations: { dataType: \u0026#34;Text\u0026#34;, minValue: \u0026#34;\u0026#34;, maxValue: \u0026#34;\u0026#34;, minLength: \u0026#34;\u0026#34;, maxLength: \u0026#34;\u0026#34; }, options: [{ option: \u0026#34;\u0026#34; }], questionRequired: false, descriptionRequired: false }) } className=\u0026#34;fs-2 fas fa-plus text-hover-primary cursor-pointer\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;/div\u0026gt; ); }\rHover Button: Displays an add button (fa-plus icon) on hover, allowing users to add a new question with default configurations. The push function from Formik\u0026rsquo;s FieldArray is used to append a new question object. 5. Options Management Section { values.sections[`${sectionIndex}`].questions[`${index}`].questionType !== \u0026#34;TextField\u0026#34; \u0026amp;\u0026amp; values.sections[`${sectionIndex}`].questions[`${index}`].questionType !== \u0026#34;Date\u0026#34; \u0026amp;\u0026amp; values.sections[`${sectionIndex}`].questions[`${index}`].questionType !== \u0026#34;Image\u0026#34; \u0026amp;\u0026amp; ( \u0026lt;FieldArray name={`sections[${sectionIndex}].questions[${index}].options`}\u0026gt; {(fieldArrayProps) =\u0026gt; { const { push, remove, form } = fieldArrayProps; const { values } = form; return ( \u0026lt;div className=\u0026#34;d-flex flex-column\u0026#34;\u0026gt; {values.sections[`${sectionIndex}`].questions[`${index}`].options.map((category, valueIndex) =\u0026gt; ( \u0026lt;div className=\u0026#34;d-flex mb-5 align-items-center\u0026#34;\u0026gt; \u0026lt;Field name={`sections[${sectionIndex}].questions[${index}].options[${valueIndex}].option`} placeholder=\u0026#34;Enter the value\u0026#34; className=\u0026#34;form-control form-control-lg form-control-solid w-500px\u0026#34; /\u0026gt; \u0026lt;button className=\u0026#34;ms-5 btn btn-primary\u0026#34; type=\u0026#34;button\u0026#34; onClick={() =\u0026gt; push(\u0026#34;\u0026#34;)}\u0026gt; Add Option \u0026lt;/button\u0026gt; {valueIndex \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;button className=\u0026#34;ms-5 btn btn-danger\u0026#34; type=\u0026#34;button\u0026#34; onClick={() =\u0026gt; remove(valueIndex)}\u0026gt; Cancel Option \u0026lt;/button\u0026gt; )} \u0026lt;/div\u0026gt; ))} \u0026lt;/div\u0026gt; ); }} \u0026lt;/FieldArray\u0026gt; ); }\rDynamic Options Handling: FieldArray from Formik manages dynamic options for non-text-based question types (e.g., Dropdown, Checkbox). Add/Remove Buttons: Users can add or remove options using the push and remove methods. 6. Description Field (Conditional Rendering) { values.sections[`${sectionIndex}`].questions[`${index}`].descriptionRequired \u0026amp;\u0026amp; ( \u0026lt;div className=\u0026#34;d-flex align-items-center mb-5\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;fv-row col-lg-12\u0026#34;\u0026gt; \u0026lt;Field name={`sections[${sectionIndex}].questions[${index}].description`} placeholder=\u0026#34;Description for the question\u0026#34; className=\u0026#34;form-control form-control-lg form-control-solid\u0026#34; /\u0026gt; \u0026lt;div className=\u0026#34;text-danger mt-2\u0026#34;\u0026gt; \u0026lt;ErrorMessage name=\u0026#34;description\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); }\rConditional Description Field: If descriptionRequired is set to true, a description field is rendered. Error Handling: Displays error messages if validation fails. Dynamic form built using Formik with features like validation skip logic conditional rendering. Dynamic Validation based on Question Type:\nChecks if a question is of type TextField and applies validation with minimum and maximum constraints. Uses Field and ErrorMessage components from Formik. \u0026lt;Field as=\u0026#34;select\u0026#34; name={`sections[${sectionIndex}].questions[${index}].validations.dataType`} className=\u0026#34;form-select form-select-lg form-select-solid\u0026#34;\u0026gt; \u0026lt;option value=\u0026#34;Text\u0026#34; selected\u0026gt; Text \u0026lt;/option\u0026gt; \u0026lt;option value=\u0026#34;Number\u0026#34;\u0026gt;Number\u0026lt;/option\u0026gt; \u0026lt;/Field\u0026gt;\rSkip Logic with FieldArray:\nUses FieldArray to handle conditional questions dynamically. The user can add or remove conditions based on another question\u0026rsquo;s response. \u0026lt;FieldArray name={`sections[${sectionIndex}].questions[${index}].conditions`}\u0026gt; {({ push, remove, form }) =\u0026gt; sections[sectionIndex].questions[index].conditions.map((condition, conditionIndex) =\u0026gt; ( \u0026lt;div className=\u0026#34;d-flex mb-5\u0026#34;\u0026gt; \u0026lt;Field as=\u0026#34;select\u0026#34; name={`sections[${sectionIndex}].questions[${index}].conditions[${conditionIndex}].questionNumber`} className=\u0026#34;form-select\u0026#34;\u0026gt; \u0026lt;option\u0026gt;Select Question Number\u0026lt;/option\u0026gt; {questionArray.map((qA) =\u0026gt; ( \u0026lt;option value={qA}\u0026gt;Question {qA}\u0026lt;/option\u0026gt; ))} \u0026lt;/Field\u0026gt; \u0026lt;/div\u0026gt; )) } \u0026lt;/FieldArray\u0026gt;\rTip: Consider extracting repetitive logic, like the select options, into separate components.\nSwitches for Control Flags:\nMultiple Switch components manage different flags (like Required, Conditional, Validate). \u0026lt;Switch id={`sections[${sectionIndex}].questions[${index}].questionRequired`} name={`sections[${sectionIndex}].questions[${index}].questionRequired`} checked={values.sections[sectionIndex].questions[index].questionRequired} onChange={(e, checked) =\u0026gt; setFieldValue(`sections[${sectionIndex}].questions[${index}].questionRequired`, checked)} /\u0026gt;\rTip: Using a controlled component like Switch ensures that the form state is synchronized with user input.\nDynamic Deletion:\nUsers can delete individual questions or conditions dynamically. This feature is managed through FieldArray\u0026rsquo;s remove() function. { index \u0026gt; 0 \u0026amp;\u0026amp; ( \u0026lt;span onClick={() =\u0026gt; remove(index)}\u0026gt; \u0026lt;i className=\u0026#34;fs-2 fas fa-trash-alt text-hover-danger cursor-pointer\u0026#34;\u0026gt;\u0026lt;/i\u0026gt; \u0026lt;label className=\u0026#34;fs-4 fw-bolder w-100px\u0026#34;\u0026gt;Delete\u0026lt;/label\u0026gt; \u0026lt;/span\u0026gt; ); }\r","date":"0001-01-01","id":106,"permalink":"/360-whims/360-whims/formbuilder/question/","summary":"\u003ch3 id=\"code-documentation-question-component\"\u003e\u003cstrong\u003eCode Documentation: Question Component\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eKey Components and Structure\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"1-question-header-section\"\u003e1. \u003cstrong\u003eQuestion Header Section\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;d-flex w-100\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`fs-2 form-label mb-5 \u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esections\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestionRequired\u003c/span\u003e \u003cspan class=\"o\"\u003e===\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e \u003cspan class=\"o\"\u003e?\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;required\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eQuestion\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"na\"\u003estyle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;relative\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"na\"\u003e...provided.dragHandleProps\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003estyle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;absolute\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eleft\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;400px\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003ecursor\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;move\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fs-2 fas fa-grip-lines text-muted\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003ePurpose:\u003c/strong\u003e Displays the question header along with a drag icon for rearranging questions.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e\u003ccode\u003eclassName\u003c/code\u003e Handling:\u003c/strong\u003e Conditionally applies the \u003ccode\u003erequired\u003c/code\u003e class if the question is marked as required.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eDrag and Drop:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eUses \u003ccode\u003eprovided.dragHandleProps\u003c/code\u003e to enable draggable functionality.\u003c/li\u003e\n\u003cli\u003eThe \u003cstrong\u003eicon\u003c/strong\u003e (\u003ccode\u003efa-grip-lines\u003c/code\u003e) helps users visually identify draggable items.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"2-question-input-section\"\u003e2. \u003cstrong\u003eQuestion Input Section\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;d-flex fv-row h-60px\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"cm\"\u003e/* Question Name */\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fv-row col-lg-8\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eField\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questionName`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003eplaceholder\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Enter the question\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;form-control form-control-lg form-control-solid\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;text-danger mb-5\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eErrorMessage\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questionName`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eQuestion Input:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eRenders a text field using \u003ccode\u003eFormik\u003c/code\u003e\u0026rsquo;s \u003ccode\u003e\u0026lt;Field\u0026gt;\u003c/code\u003e component for entering the question.\u003c/li\u003e\n\u003cli\u003eIf validation fails, \u003cstrong\u003e\u003ccode\u003eErrorMessage\u003c/code\u003e\u003c/strong\u003e displays error messages in red (\u003ccode\u003etext-danger\u003c/code\u003e).\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"3-question-type-selector\"\u003e3. \u003cstrong\u003eQuestion Type Selector\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fv-row w-450px ms-5\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eField\u003c/span\u003e \u003cspan class=\"na\"\u003eas\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;select\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questionType`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;form-select form-select-lg form-select-solid cursor-pointer\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;TextField\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eTextField\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Date\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nb\"\u003eDate\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Image\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eImage\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Dropdown\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eDropdown\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Checkbox\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eCheckbox\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e \u003cspan class=\"na\"\u003evalue\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Radio\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"nx\"\u003eRadio\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eoption\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eField\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;text-danger mt-2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eErrorMessage\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questionType`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDropdown Menu:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eAllows users to select a question type (e.g., TextField, Date, Image).\u003c/li\u003e\n\u003cli\u003eUses \u003ccode\u003eFormik\u003c/code\u003e\u0026rsquo;s \u003ccode\u003e\u0026lt;Field\u0026gt;\u003c/code\u003e with \u003ccode\u003eas=\u0026quot;select\u0026quot;\u003c/code\u003e to create a dropdown.\u003c/li\u003e\n\u003cli\u003eIf validation errors occur, the \u003cstrong\u003eerror message\u003c/strong\u003e is displayed below the dropdown.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"4-hover-based-action-button\"\u003e4. \u003cstrong\u003eHover-based Action Button\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003ehoverEffect\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003estyle\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eposition\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;absolute\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003etop\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;40%\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"nx\"\u003eright\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;-25px\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;card p-5 d-flex align-items-center justify-content-center\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ei\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"na\"\u003eonClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003equestionName\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003equestionType\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;TextField\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003evalidations\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nx\"\u003edataType\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Text\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nx\"\u003eminValue\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nx\"\u003emaxValue\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nx\"\u003eminLength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"nx\"\u003emaxLength\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[{\u003c/span\u003e \u003cspan class=\"nx\"\u003eoption\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}],\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003equestionRequired\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"nx\"\u003edescriptionRequired\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"p\"\u003e})\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fs-2 fas fa-plus text-hover-primary cursor-pointer\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eHover Button:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eDisplays an \u003cstrong\u003eadd button\u003c/strong\u003e (\u003ccode\u003efa-plus icon\u003c/code\u003e) on hover, allowing users to add a new question with default configurations.\u003c/li\u003e\n\u003cli\u003eThe \u003ccode\u003epush\u003c/code\u003e function from \u003ccode\u003eFormik\u003c/code\u003e\u0026rsquo;s \u003ccode\u003eFieldArray\u003c/code\u003e is used to append a new question object.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"5-options-management-section\"\u003e5. \u003cstrong\u003eOptions Management Section\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esections\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestionType\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;TextField\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esections\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestionType\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Date\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esections\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestionType\u003c/span\u003e \u003cspan class=\"o\"\u003e!==\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Image\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eFieldArray\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].options`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e{(\u003c/span\u003e\u003cspan class=\"nx\"\u003efieldArrayProps\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003eform\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efieldArrayProps\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003eform\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;d-flex flex-column\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esections\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003eoptions\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003emap\u003c/span\u003e\u003cspan class=\"p\"\u003e((\u003c/span\u003e\u003cspan class=\"nx\"\u003ecategory\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nx\"\u003evalueIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;d-flex mb-5 align-items-center\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eField\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].options[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003evalueIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].option`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"na\"\u003eplaceholder\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Enter the value\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;form-control form-control-lg form-control-solid w-500px\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ms-5 btn btn-primary\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;button\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003epush\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"nx\"\u003eAdd\u003c/span\u003e \u003cspan class=\"nx\"\u003eOption\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"nx\"\u003evalueIndex\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;ms-5 btn btn-danger\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003etype\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;button\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eonClick\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{()\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u0026gt;\u003c/span\u003e \u003cspan class=\"nx\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003evalueIndex\u003c/span\u003e\u003cspan class=\"p\"\u003e)}\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                    \u003cspan class=\"nx\"\u003eCancel\u003c/span\u003e \u003cspan class=\"nx\"\u003eOption\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                  \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ebutton\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e                \u003cspan class=\"p\"\u003e)}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e              \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e            \u003cspan class=\"p\"\u003e))}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e}}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003eFieldArray\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDynamic Options Handling:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eFieldArray\u003c/strong\u003e from Formik manages dynamic options for non-text-based question types (e.g., Dropdown, Checkbox).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eAdd/Remove Buttons:\u003c/strong\u003e Users can add or remove options using the \u003ccode\u003epush\u003c/code\u003e and \u003ccode\u003eremove\u003c/code\u003e methods.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch4 id=\"6-description-field-conditional-rendering\"\u003e6. \u003cstrong\u003eDescription Field (Conditional Rendering)\u003c/strong\u003e\u003c/h4\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-jsx\" data-lang=\"jsx\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nx\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003esections\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003equestions\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e`\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"nx\"\u003edescriptionRequired\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;d-flex align-items-center mb-5\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;fv-row col-lg-12\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eField\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"sb\"\u003e`sections[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003esectionIndex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].questions[\u003c/span\u003e\u003cspan class=\"si\"\u003e${\u003c/span\u003e\u003cspan class=\"nx\"\u003eindex\u003c/span\u003e\u003cspan class=\"si\"\u003e}\u003c/span\u003e\u003cspan class=\"sb\"\u003e].description`\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"na\"\u003eplaceholder\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Description for the question\u0026#34;\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;form-control form-control-lg form-control-solid\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e \u003cspan class=\"na\"\u003eclassName\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;text-danger mt-2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e          \u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"nt\"\u003eErrorMessage\u003c/span\u003e \u003cspan class=\"na\"\u003ename\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;description\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e/\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e      \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e\u0026lt;/\u003c/span\u003e\u003cspan class=\"nt\"\u003ediv\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eConditional Description Field:\u003c/strong\u003e\n\u003cul\u003e\n\u003cli\u003eIf \u003ccode\u003edescriptionRequired\u003c/code\u003e is set to true, a description field is rendered.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eError Handling:\u003c/strong\u003e Displays error messages if validation fails.\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003chr\u003e\n\u003ch3 id=\"dynamic-form-built-using-formik-with-features-like-validation\"\u003eDynamic form built using \u003cstrong\u003eFormik\u003c/strong\u003e with features like \u003cstrong\u003evalidation\u003c/strong\u003e\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eskip logic\u003c/strong\u003e\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003econditional rendering\u003c/strong\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDynamic Validation based on Question Type:\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"Question"},{"content":"","date":"0001-01-01","id":107,"permalink":"/360-whims/rbac/","summary":"","tags":[],"title":"RBAC"},{"content":"","date":"0001-01-01","id":108,"permalink":"/resources/","summary":"","tags":[],"title":"resources"},{"content":"This is a list of questions which may be interesting to a tech job applicant. The points are not ordered and many may not apply to a given position or work type. It was started as my personal list of questions, which grew over time to include both things I\u0026rsquo;d like to see more of and red flags which I\u0026rsquo;d like to avoid. I\u0026rsquo;ve also noticed how few questions were asked by people I interviewed and I think those were missed opportunities.\nIf you asked something not listed here, send in a PR.\nExpected usage Check which questions are interesting for you specifically Check which answers you can find yourself online Otherwise ask Definitely don\u0026rsquo;t try to ask everything from the list. (Respect the interviewer\u0026rsquo;s time and show initiative by finding answers on your own if they\u0026rsquo;re already published)\nRemember that things tend to be fluid, re-organizations happens often. Having a bug tracking system doesn\u0026rsquo;t make bug handling efficient and CI/CD doesn\u0026rsquo;t mean your time to deliver is necessarily short.\nThe Role What\u0026rsquo;s the on-call plan/schedule? (what\u0026rsquo;s the pay for standby and call-out) What are the tasks I would do on a usual day? Are there any specific goals for me? What\u0026rsquo;s the junior/senior balance of the team? (and are there plans to change it) What does the onboarding look like? How much freedom for decision making do individual developers have? What are the expected/core work hours? What is your definition of success for this role? What do you expect me to accomplish in the first 1 month/3 months? How will you evaluate my performance at the end of the trial period? What does a typical day/week look like in this role? Do you have any concerns about my application? Tell me about who I would be working most closely with. What management style does my immediate manager and their manager have? (from micro- to macro-) How can I develop in my new role / what opportunities are offered? Tech What are the usual stacks used at the company? How do you use source control? How do you test code? How do you track bugs? How do you monitor projects? How do you integrate and deploy changes? Is it CI/CD? Is your infrastructure setup under version control / available as code? What\u0026rsquo;s the workflow from the planning to the finished task? How do you prepare for disaster recovery? Is there a standardised development environment? Is it enforced? How quickly can you setup a new local test environment for the product? (minutes / hours / days) How quickly can you respond to security issues in the code or dependencies? Are all developers allowed to have local admin access of their computers? Tell me about your technical principles or vision. Do you have a developer documentation for your code? Do you have a separate documentation for customers? Do you have some higher level documentation? (ER diagrams, database schema) Do you employ static code analysis? How do you manage internal / external artifacts? How do you manage dependencies? The Team How is the work organised? How does the intra/inter-team communication typically work? Do you use any tools for project organization? What is your experience with them? How are differences of opinions resolved? Who sets the priorities / schedule? What happens after pushback? (\u0026ldquo;this can\u0026rsquo;t be done in the projected time\u0026rdquo;) What happens when the team misses a release target? What kind of meetings happen every week? Would there be a regular 1-on-1 with my manager? What\u0026rsquo;s the product/service schedule? (n-weekly releases / continuous deployment / multiple release streams / \u0026hellip;) What happens after production incidents? Is there a culture of blameless analysis? What are some ongoing challenges the team is experiencing that you are yet to resolve? How do you track progress? How are expectations and goals set, and who does the setting? What does a code review look like here? Walk me through a typical sprint on this team How do you balance technical vs business goals? How do you share knowledge? How big is each team? How are services and projects delegated to each team? Your Potential Coworkers Who do developers tend to learn from? What do you like best about working there? What do you like least? What would you change if you could? How long has the longest team member been there? If it\u0026rsquo;s a small team, has there been experiences of conflicting personalities and how was this dealt with? The Company Why is the company hiring? (product growth / new product / fluctuation / \u0026hellip;) Is there a conference/travel budget and what are the rules to use it? What\u0026rsquo;s the promotion process? How are requirements / expectations communicated? What is the performance review process like? Is there a separate tech and management career path? Are there any company-wide resources for learning available, like ebooks subscriptions or online courses? Is there a budget for getting certifications? What\u0026rsquo;s the maturity stage? (early finding direction / feature work / maintenance / \u0026hellip;) Can I contribute to FOSS projects? Are there any approvals needed? Are there any non-compete or non-disclosure agreements I\u0026rsquo;ll be asked to sign? Where do you see the company in the next 5/10 years? What does clean code mean to the majority of developers here? When is the last time you noticed someone growing here, and in what way were they growing? What does it mean to be successful here, and how do you measure success? Is there a Sports / Team building Activity? Are there any Hackathons conducted internally? Does the company support open-source projects? What kind of social events does the team/company host and are these attended by everyone? Why did the company decide to hire an outsider over promoting an internal employee? Is the company willing to assist overseas job applicants in applying for work visas? Social issues What\u0026rsquo;s the status of / view on diverse hiring? What do you think are the gaps in the company culture? (and what is the company culture?) What does work-life balance mean here? Does the company have a stance regarding climate change? Conflict How are differences of opinions resolved? What happens after pushback? (\u0026ldquo;this can\u0026rsquo;t be done in the projected time\u0026rdquo;) What happens when the team is under pressure and commits to work over their capacity / velocity? If someone identifies areas of improvement in process / technology / etc, what happens? When there is a gap between expectations from management and performance of an engineer or team, what happens? Could you tell me a story about a toxic situation and how the company dealt with it? The Business Are you profitable? If not, how long is your runway? Where does the funding come from and who influences the high level plan/direction? How do you make money? What\u0026rsquo;s preventing you from making more money? What is the company\u0026rsquo;s growth plan for the next 1 year? 5 years? What are the big challenges you see coming up? What have you identified as your competitive advantage? Remote Work What\u0026rsquo;s the ratio of remote to office workers? Does the company provide hardware and what\u0026rsquo;s the refresh schedule? How do you feel about BYOD? Are there any policies around it already? Are extra accessories/furniture possible to buy through the company? Is there a budget for them? Is there a budget for co-working space or internet access? How often are office visits expected? Are the office meeting rooms always prepared for video conferences? Building Layout What\u0026rsquo;s the office layout? (open plan / cubicles / offices) Is there a support / marketing / other call-heavy team close to my new team? Catch all What\u0026rsquo;s the best and what\u0026rsquo;s the worst aspect of working in this role / team / company? What got you to choose to work for the company initially? What keeps you at the company? Compensation If you have a bonus scheme, then how are bonuses determined? If you have a bonus scheme, then what have been the typical bonus percentages over the past few years? Do you have a 401k or other retirement plan? If so, does the company match additional plan contributions? Are there medical benefits and if so, when do they start? Do you pay for relocation? Time Off How much Paid Time Off (PTO) is offered? Are sick time and vacation time separate or do they come from the same pool? Can I use vacation time before it\u0026rsquo;s accrued, effectively going into a negative PTO balance? What is the roll over policy is there for PTO? What is the parental leave policy? What is the policy on unpaid leave? What is the policy for sabbatical leave? Other resources Find more inspiration for questions in:\nThe Joel Test: 12 Steps to Better Code by Joel Spolsky Questions I\u0026rsquo;m asking in interviews by Julia Evans Curated list of salary negotiation advices by Peter Mekhaeil ","date":"0001-01-01","id":109,"permalink":"/others/others/reverse-interview-questions/","summary":"\u003cp\u003eThis is a list of questions which may be interesting to a tech job applicant.\nThe points are not ordered and many may not apply to a given position or work type.\nIt was started as my personal list of questions, which grew over time to include both things I\u0026rsquo;d like to see more of and red flags which I\u0026rsquo;d like to avoid.\nI\u0026rsquo;ve also noticed how few questions were asked by people I interviewed and I think those were missed opportunities.\u003c/p\u003e","tags":[],"title":"Reverse Interview Questions"},{"content":" Which variables end up being part of func's closure ?\nvar c = 10; function foo(a){ let b = 8; const d = 10; return function bar(){ return a + d + c; } } const func = foo(7);\rA: a and d B: a,b and d C: a,b,c and d D: a,d and c Answer Option: A What will be the output ?\nconst fn = () =\u0026gt; { a = 2; console.log(a); } fn();\rA: undefined B: 2 C: Uncaught ReferenceError: a is not defined Answer Option: B What will be the output ?\nfor (var i = 0; i \u0026lt; 4; i++) { setTimeout(() =\u0026gt; console.log(i), 0) }\rA: 0 1 2 3 B: 4 4 4 4 Answer Option: B What will be the output?\nfor(let i = 0; i \u0026lt; 5; i++){ setTimeout(() =\u0026gt; console.log(i), 1); }\rA: 0 0 0 0 0 B: 1 2 3 4 5 C: 5 5 5 5 5 D: 0 1 2 3 4 Answer Option: D What will be the output?\nlet count = 0; (function immediate() { if (count === 0) { let count = 1; console.log(count); } console.log(count); })();\rA: 0 0 B: 1 1 C: 1 0 D: 0 1 Answer Option: C what would be the typeof a and typeof b\nfunction foo() { let a = b = 0; a++; return a; } foo(); console.log(typeof a) console.log(typeof b)\rA: Number Number B: Number undefined C: undefined Number D: not define not define Answer Option: C ","date":"0001-01-01","id":110,"permalink":"/code-snippets/scopesclosures/","summary":"\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eWhich variables end up being part of \u003ccode\u003efunc's\u003c/code\u003e closure ?\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-JS\" data-lang=\"JS\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nx\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kd\"\u003elet\u003c/span\u003e \u003cspan class=\"nx\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e8\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"kd\"\u003efunction\u003c/span\u003e \u003cspan class=\"nx\"\u003ebar\u003c/span\u003e\u003cspan class=\"p\"\u003e(){\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"nx\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kr\"\u003econst\u003c/span\u003e \u003cspan class=\"nx\"\u003efunc\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nx\"\u003efoo\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cul\u003e\n\u003cli\u003eA: \u003ccode\u003ea and d\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eB: \u003ccode\u003ea,b and d\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eC: \u003ccode\u003ea,b,c and d\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eD: \u003ccode\u003ea,d and c\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cbr/\u003e\n\u003cdetails\u003e\n\u003csummary\u003e\u003cb\u003eAnswer\u003c/b\u003e\u003c/summary\u003e\n\u003cp\u003e\n\u003ch4 id=\"option-a\"\u003eOption: A\u003c/h4\u003e\n\u003c/p\u003e","tags":[],"title":"Scopes \u0026 Closures"},{"content":"Sections Component Documentation Description The Sections component renders a dynamic section within a form using Formik with drag-and-drop functionality. It allows users to create, edit, reorder, and remove sections, as well as toggle pagination options between sections.\nIt integrates:\nDrag and Drop (react-beautiful-dnd) Formik\u0026rsquo;s FieldArray to manage multiple sections MUI Collapse for expandable sections A modal for confirming deletions Props Prop Type Description values any Contains the form values including section data. index number Index of the current section in the sections array. setFieldValue Function Formik\u0026rsquo;s function to programmatically update field values. remove Function Function to remove a section from the array. State Variables State Type Description open boolean Controls whether the section is collapsed or expanded. saveState boolean Tracks if the section name is saved. editSectionTitle boolean Determines whether the section title is editable. hoverEffect boolean Enables hover-based UI enhancements for icons. isModalOpen boolean Toggles the modal for section deletion confirmation. clickedIndex number Stores the index of the section being interacted with. Functionality handleModal() Toggles the modal\u0026rsquo;s open state to confirm section deletion.\nhandleSectionTitle(index) Enables title editing for the section corresponding to the provided index. If the clicked section matches the active one, it toggles edit mode.\nhandleSaveButton() Saves the section title and exits edit mode if the clicked index matches the active section.\nhandleCancelButton(setFieldValue) Cancels title editing and resets the section name to an empty string.\nDrag-and-Drop Configuration DragDropContext: Wraps the entire section to enable drag-and-drop. onDragEnd(params): Handles the reordering of questions within a section. When a question is moved, the source and destination indices are swapped. [cloneArr[sourceIndex], cloneArr[destinationIndex]] = [cloneArr[destinationIndex], cloneArr[sourceIndex]];\rRendering Logic Section Header Displays section name with optional hover controls to edit or delete. Toggles pagination between \u0026ldquo;New Page\u0026rdquo; or \u0026ldquo;Previous Page\u0026rdquo; with a switch. Editing Section Title Users can enter a section name when the edit mode is enabled. Contains Save and Cancel icons for managing title changes. Delete Button \u0026amp; Modal A delete icon triggers the Modal to confirm section removal. DeleteDialog inside the modal provides further deletion logic. MUI Collapse Integration Uses Collapse to hide or show section content. When the section is expanded, it renders a MultiQuestion component. Code Snippet Example Usage \u0026lt;DragDropContext onDragEnd={(params) =\u0026gt; { const sourceIndex = params.source.index; const destinationIndex = params.destination?.index; const questions = values.sections[index].questions; if (destinationIndex !== undefined) { [questions[sourceIndex], questions[destinationIndex]] = [questions[destinationIndex], questions[sourceIndex]]; } }}\u0026gt; \u0026lt;Droppable droppableId={`drop-${index}`}\u0026gt; {(provided) =\u0026gt; ( \u0026lt;div ref={provided.innerRef} {...provided.droppableProps}\u0026gt; \u0026lt;Collapse in={open \u0026amp;\u0026amp; clickedIndex === index}\u0026gt; \u0026lt;MultiQuestion sectionIndex={index} /\u0026gt; {provided.placeholder} \u0026lt;/Collapse\u0026gt; \u0026lt;/div\u0026gt; )} \u0026lt;/Droppable\u0026gt; \u0026lt;/DragDropContext\u0026gt;\rComponent Hierarchy DragDropContext → Wraps the section to enable drag-and-drop. Droppable → Defines a droppable area for questions. Draggable → Makes each question reorderable. Modal → Confirms section deletion. Dependencies Formik: For form handling. react-beautiful-dnd: For drag-and-drop functionality. MUI Collapse \u0026amp; Switch: For UI elements. DeleteDialog: A custom modal for confirming section deletion. Conclusion The Sections component offers a powerful and user-friendly interface for managing multiple sections within a form. It provides intuitive controls for reordering, editing, and deleting sections, while ensuring a seamless user experience with drag-and-drop and collapsible sections.\n","date":"0001-01-01","id":111,"permalink":"/360-whims/360-whims/formbuilder/sections/","summary":"\u003ch2 id=\"sections-component-documentation\"\u003e\u003ccode\u003eSections\u003c/code\u003e Component Documentation\u003c/h2\u003e\n\u003ch3 id=\"description\"\u003e\u003cstrong\u003eDescription\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eSections\u003c/code\u003e component renders a dynamic section within a form using \u003ccode\u003eFormik\u003c/code\u003e with drag-and-drop functionality. It allows users to create, edit, reorder, and remove sections, as well as toggle pagination options between sections.\u003c/p\u003e","tags":[],"title":"Sections"},{"content":"","date":"0001-01-01","id":112,"permalink":"/prep-1/1-to-10/","summary":"","tags":[],"title":"Set of 10 Questions"},{"content":"","date":"0001-01-01","id":113,"permalink":"/prep-1/11-to-20/","summary":"","tags":[],"title":"Set of 11 to 20 Questions"},{"content":"","date":"0001-01-01","id":114,"permalink":"/prep-1/21-to-30/","summary":"","tags":[],"title":"Set of 21 to 30 Questions"},{"content":"","date":"0001-01-01","id":115,"permalink":"/prep-1/31-to-40/","summary":"","tags":[],"title":"Set of 31 to 40 Questions"},{"content":"","date":"0001-01-01","id":116,"permalink":"/prep-1/41-to-50/","summary":"","tags":[],"title":"Set of 41 to 50 Questions"},{"content":"","date":"0001-01-01","id":117,"permalink":"/360-whims/state-management/","summary":"","tags":[],"title":"State Management in WHIMS 360 portal"},{"content":"A curation of code examples and in depth technical implementation approaches to solve the common frontend system design issues in React.\nTarget Audience advanced beginner/intermediate developers wishing to get better technical understanding developers exploring how to do handle technical things in their own projects. for my own reference as I need something like this for my own learning. Philosophy The philosophy behind this endeavour is to document as much as possible a practical guide for someone looking to level-up fast/ implement things.\n“Talk is cheap. Show me the code.” — Linus Torvalds\nEngineering Design High Level Design Low level Design Architecture Deep dive Rebuilding our tech stack for the new Facebook.com Front-End Performance Optimization with Accelerated Compositing Part 1 Front-End Performance Optimization with Accelerated Compositing Part 2 SSR-based Optimization of Double 11 Virtual Venue – A More Complex Rendering Architecture React Philosophies idiomatic.js Client-Side Architecture Basics CSS Triggers - what forces layout/reflow The Web Browser Internals A (Mostly) Complete Guide to React Rendering Behavior Engineering Design Team size User base Knowledge base Compliance/Governance User/Client expectations Open source vs proprietary Documentation / PRD Future Roadmaps High Level Design Platform identification SPA vs MPA SSR, SSG, CSR Tech stack Search Engine Optimization CI/CD User Experience A/B testing MVP planning Server Side Architecture Security State Management Internationalization - example E2E testing Tools Integration Authentication \u0026amp; Authorization Quality Assurance \u0026amp; Control User role management - example Low Level Design Code/Folder architecture Example - #2 in this blogpost Desktop/Mobile first approach System breakdown Atomic Design Component Design Form development Example using react-hook-form Storage management Using localForage redux-persist - code API Design Example pattern- code Another example - code Instrumentation Design system Routing management Example pattern - code CSS optimizations - Code-splitting Lazy loading of modules Accessibility Image optimizations Pagination, Debouncing, Throttling Performance: FCP, LCP, TTI, CLS Versioning - example - code Unit testing Authentication and authorization Management Example using Sagas High Level Design details Product Requirement Document (PRD) / Design Document\nIdentify Scope/Requirement Review your understanding with stakeholders Discuss about Design/Wireframe\nThink like an architect. We should not consider team bandwidth, capacity and time. Discuss about Edge cases. Robustness: Handle SPOF (Single Point of Failure) ex: Monitoring, Logging Identify Business\nIs it B2B (business-to-business)? Is it B2C (business-to-consumer)? Is it Internal Product? Is it Customer facing product? Identify Platform\nDesktop Mobile Tablet Identify Users (Know your audience)\nConduct surveys Discuss about Location and Devices Internet speed End Users knowledge base (ex: Technical user) Pilot Product (sometimes to understand audience) Identify Design Approach\nResponsive vs Adaptive design Desktop first vs Mobile first Identify APIs\nRest APIs / Graph APIs / RPC JSON / Protocol buffers Role based management\nLarge system needs roles based access and permissions Authentication and Authorization Read/Write/View Permissions Discuss about Routes/Component access Identify Right Platform (compare frameworks based on the use case)\nSingle Page Applications (Unsuitable for Blogs/News based products) No reloading of a page at navigation No SEO Multi Page Applications Reloading of a page at every page navigation. Progressive Web Applications Provides offline support and native like functionality. Examples of PWA Server Side Rendering SSR Better SEO Important points to discuss: Are users on mobile? Is SEO needed? Is SPA enough? Is PWA enough? (Service worker, Web Worker) Compare SSR / SSG / CSR Any Pricing model? (optional) - Subscriptions based, Paid APIs Will my app be Frontend heavy? (or backend heavy) Do I have resources for this skill? Is your application Canvas (or SVG) heavy? (Figma, Draw.io) - example Is your application webRTC heavy? (Video streaming) - example Identify User Flow\nDiscuss vision of a product. Do we need to build from scratch or we can leverage some existing functionalities Discuss about authentication and authorization (Google auth / OAuth) Interact with the Product manager to understand the scope before designing the application. Discuss happy scenarios. Discuss edge cases. Discuss failing scenarios Identify MVP (Minimum Viable Product)\nProblem -\u0026gt; Solution -\u0026gt; Build MVP -\u0026gt; MVP to Customers Discuss MVP phase with product manager Discuss roadmaps and divide product in milestones After MVP release there can be a slight change in design/approach to make the product better Volume of Operations\nDiscuss about the end users of the product Observe the data in something like Google Analytics for split by device/location/OS etc in production later. Identify QPS (Queries per second) Monitor throughput of the web server/ web application server - benchmark for reference Discuss about Load testing/Stress testing Use something like Locust/boomer Inject analytics in application (ex: Google analytics, Sentry, NewRelic) For cost-effectiveness instead of using ready-made solution, can define our events, using Kafka to stream the events to a backend server and use a Grafana dashboard if required. Analytics data helps us to scale the system SEO (Search Engine Optimization)\nCrawling Use of Heading tags Semantic tags - HTML Reference - Example Site Ranking Sitemap Meta Keywords - Example Organic approach vs Inorganic approach Use of alt tags 301 Redirects (bad for SEO) Robots.txt - Example Open graph protocol for social graph - Example Component Based Design\nComponent wise deployment cycle (CI/CD) Monolith vs Microservice architecture Microservice example - live - code Micro Frontend (independent dev \u0026amp; deployment for scalability) Topcoder Platform Microfront Earn App - code Topcode Profile micro app - code Static components vs Dynamic components IFrame/Shell approach AppShell approach IFrame approach State Management\nHow to maintain state through the application? How to manage users\u0026rsquo; data? State management Libraries (Redux, Flux, NgRX) Redux Architecture Scalable Redux architecture for React Projects with Redux-Saga and Typescript 10 Tips for Better Redux Architecture React/Redux: pitfalls and best practices Redux-saga Example Codebase -react-crwn-cothing-ecom Example Codebase -fakeflix RxJS Example recipes Basic example using redux-observable Better example Sample application with a bit of outdated code Redux Thunk Handling APIs\nPolling (Short and Long) library Web Sockets (Real-time) (ex: chat, shared editors) Displaying live orderbook using websocket - code Tic-tac-toe game with socket.io - code Batch requests GraphQL Caching GET APIs (Middleware concepts to cache response) - guide Server-Sent Events (SSE) - guide Graceful handling(eg. X number of retries before giving up(linear, exponential backoff etc) Error Handling error handling with async/await pattern - See the section Async Logic and Side Effects Others Handle API calls using async await with the useEffect hook How to use async function in React hooks useEffect Optimizing Images\nAdd alt attributes (Images should be descriptive for SEO) Load images based on screen size (img srcset) Image compression (ex: JPEG 2000) Webpack guide Image sitemaps Use SVGs for generic dimensions (in case of stretching of images) Discuss about image Sprites for icons Discuss about progressive images (ex: Medium.com) Using blurhash Instrumentation\nMeasurement and tracking are key for a stable system Monitoring - code Error logging (for tracing)] - Using Google Analytics Debugging - Custom Tracking Logs/Track all events happened in the application - code Implement Analytics (GA) - this Sentry (to capture errors) - example - code Newrelic (to detect failures) - doc Versioning of artifacts\nArtifacts tracking (ex: Confluence) Rollback \u0026amp; backup mechanisms Performance Optimization Techniques\nWebpack to optimized/compressed pages (Code splitting)\nCode splitting Gzip Compression Brotli Compression Using Web workers\nReact and Web Workers Example - code Another example - code Using worker with Webpack 4 / Using worker with Webpack 5 Web Vitals (FP, LCP, CLS, etc)\nLighthouse / PageSpeed Insights - website having 100 score\nFast Loading (Initial load should be fast)\nList of things to consider for fast load times Smooth Operations (Loading indicators / Light/Smooth/Meaningful animations (to avoid jerks in transitions) / Splash screens) - (dialog with light animations)\nExample using react-spring - code Going jank free - Achieving 60 FPS smooth websites Animation directions should be the same (dialog coming from bottom should close in bottom) - (smooth animation should be added in sidebars for better UX)\nExample using react-spring - code How To Implement Smooth Scrolling in React Animation between data fetching(APIs request)\nSkeletal loaders Example Example - Live - code Using blurhash Discuss about Caching - ex: API, resource cache (Browser cache / Memory / CDN / Disk Cache)\nGuide Pagination vs Infinite Scroll\nImplementing pagination Implementing infinite scroll Meaningful animation\nFakeflix - example - code Using framer motion - live- code Micro interactions\nReact specific issues\nFixing Wasterd Rendering, Caching expensive operation results, Reducing bundle sizes, Lazy loading components - video code Checking Extra Renders - code Optimizing React Performance - 12 Tools and Tips Render Performance Optimization With React Internationalization (i18n) / Localization (i10n)\nLocalization - example live - code Numeric, date and time formats - date-fns library Singular \u0026amp; Plurals Use of currency Keyboard usage - example Symbols, icons and colors Text and graphics vary with different languages and religions, may be subject to misinterpretation or viewed as insensitive Varying legal requirements Accessibility\nAlt attributes Aria-labels - example code Multi-device support, slow network speed Adaptive Loading - live - Code Color contrast, semantics tags - See this Security\nMITM\nXSS\nCSRF\nContent-Security-Policy in Express apps Clickjacking\nContent Security Policy (CSP)\nCORS\nSSL Testing\nDeep analysis of the configuration of any SSL web server on the public Internet -Testing your SSL web server Security Headers\nAnalyzing HTTP response headers for sanity(https://securityheaders.com) - Example of good report badssl - https://badssl.com/ Other Tools\nHTTP/2 test HTTP Header Checker Website Speed Test Performance Test Check Font type What Does My Site Cost? HTML5 Security Cheat Sheet Production Best Practices: Security Web Application Vulnerabilities Index Quality assurance and control\nStable products are successful\nSpecify standards - Code level / Artifacts level / Asset level\nCode level - Git Artifacts level - Artifactory Asset level - Git/ Blob storage(S3 etc)/CDN Git Hooks (pre commit hooks, husky)\nExample - code Example - code Linters / Static Analyzers\nExample - code Example - code Unit testing\nMocking React Hooks - Example - blog - code React Hooks Testing Library - https://github.com/testing-library/react-hooks-testing-library React Testing Library example - code Code accompanying \u0026ldquo;Testing React with Jest and Testing Library\u0026rdquo; course on Udemy - Code Testing Library - thenewboston website - live - code React Jest example - code Async testing - code Workflow testing (User level flows) (Tools - Cypress)\nCypress has a demo real world app that uses best practices - code Artsy.net - code Integration testing\ne2e integration test using Mocha and Pupppeteer - code Automation Suite\nUsing webdriver IO that allows using sauce,browserstack etc - code Cross browsers testing\nCypress demo app - code Here is how you detect the browser using both JavaScript and CSS Automated cross browser unit testing Cross platform testing\nCypress demo app - code Governance\nControlling the workflows and protecting the assets UX Design -\u0026gt; Developers -\u0026gt; Product Managers -\u0026gt; UX Designing -\u0026gt; QA Code level governance - like PRs approval (sets standard in your team) Gitflow Artifacts/Assets level governance (before go live) like Product Manager approval, Stakeholders approvals Experiment based release cycle\nExperiment flag, which can help in the release cycle\nExample : In a recent codebase I worked, we had a flag in the frontend codebase that was enabled/disabled based on the response received from API(in turn , API routes in node.js server were handled in 2 ways : 1) the server code read the values based on the server configuration(ENV values) for that particular deployment 2)actual backend that had its configuration as well) affecting the user experience and user journey.\nNFR (Non Functional Requirement)\nDiscuss about CI/CD (Docker, Pipeline) Alexander Kachkaev\u0026rsquo;s personal website has a good pipeline setup - see code Codebases + Guides Worth Mentioning Here Artsy.net - (https://github.com/artsy/force/) What to look for : completed production app, integrations/tooling thenewboston - (https://github.com/thenewboston-developers/Website) what to look for : complete production app, significant unit tests fakeflix - (https://github.com/Th3Wall/Fakeflix) what to look for : significant codebase that has more complete implementation than usual blogposts/articles CRWN Clothing - (https://github.com/Th3Wall/react-crwn-cothing-ecom) algorithm-visualizer - (https://github.com/algorithm-visualizer/algorithm-visualizer) What to look for - abstraction for components spotify-clone-client - (https://github.com/JL978/spotify-clone-client) What to look for : simple app with clean modern Hooks implementation The Front-End Checklist - (https://github.com/thedaviddias/Front-End-Checklist) What to look for : missing points from this document spoken at more detailed length Engineering Best Practices - (https://10up.github.io/Engineering-Best-Practices/) What to look for - many sections here serve as a good reference on their own Zero to production web apps - code What to look for - independent end to end simple setup that can be used as a base template Bulletproof react -code What to look for - readymade opinionated guide For adding Typescript to web app React Redux Typescript Guide - (https://github.com/piotrwitek/react-redux-typescript-guide) Typescript cheatsheet - (https://github.com/typescript-cheatsheets/react) Boilerplate Code Setup with Node.js web application server acting as a Backend for Frontend Next.js setup React, Redux, Redux-saga,Styled components boilerplate SSR boilerplate Boilerplate (seed) project for creating web apps with React.js, GraphQL.js and Relay Boilerplate and tooling for web application development based on React (ReactJS), Redux, Babel, Webpack, CSS Modules, PostCSS, Browsersync, React Hot Loader and optimized for CDN hosting in Firebase Universal React Starter New York Times kyt based starterkit Create React App - Simple Redux Typescript Boilerplate Create React App - react redux redux-saga ant-design tailwind-css boilerplate Setting up Development Environment Git and SSH Keys Code to deploy an EC2 instance for development purposes. HTTPS on local dev env Using Prettier and husky to make your commits safe git cheatsheet License This repository is MIT licensed. Read more\n","date":"0001-01-01","id":118,"permalink":"/others/others/system-design-react-code-examples/","summary":"\u003cp\u003eA curation of code examples and in depth technical implementation approaches to solve the common frontend system design issues in React.\u003c/p\u003e","tags":[],"title":"system-design-react-code-examples"},{"content":"","date":"0001-01-01","id":119,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"},{"content":" File Path: src/common/utils/TokenService.ts\nDescription The TokenService module provides functionality for managing user authentication tokens in the browser\u0026rsquo;s local storage. It primarily includes a method to remove user-related data upon logout or session expiration.\nFunctions removeUser const removeUser = () =\u0026gt; { localStorage.removeItem(\u0026#34;access_token\u0026#34;); localStorage.removeItem(\u0026#34;refresh_token\u0026#34;); localStorage.removeItem(\u0026#34;status\u0026#34;); localStorage.removeItem(\u0026#34;logginSession\u0026#34;); localStorage.removeItem(\u0026#34;facilityName\u0026#34;); localStorage.removeItem(\u0026#34;facilityCode\u0026#34;); localStorage.removeItem(\u0026#34;photo\u0026#34;); localStorage.removeItem(\u0026#34;userRole\u0026#34;); localStorage.removeItem(\u0026#34;facilityStatus\u0026#34;); };\rDescription: Removes all user-related data from local storage. This is typically called during user logout or when the session is no longer valid. Local Storage Items Removed: access_token: The user\u0026rsquo;s access token used for authenticating API requests. refresh_token: The token used to obtain new access tokens when the current one expires. status: The current status of the user session. logginSession: Information related to the user\u0026rsquo;s login session. facilityName: The name of the facility associated with the user. facilityCode: The code identifying the user\u0026rsquo;s facility. photo: The URL or path to the user\u0026rsquo;s profile photo. userRole: The role assigned to the user, which may determine access rights. facilityStatus: The operational status of the facility. Exported Components const TokenService = { removeUser };\rDescription: Exports the TokenService object, which includes the removeUser function for use in other parts of the application. Default Export export default TokenService;\rDescription: Exports the TokenService module as the default export, allowing easy integration into other components that require token management functionality. ","date":"0001-01-01","id":120,"permalink":"/360-whims/360-whims/auth/token-management/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eFile Path\u003c/strong\u003e: \u003ccode\u003esrc/common/utils/TokenService.ts\u003c/code\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch3 id=\"description\"\u003eDescription\u003c/h3\u003e\n\u003cp\u003eThe \u003ccode\u003eTokenService\u003c/code\u003e module provides functionality for managing user authentication tokens in the browser\u0026rsquo;s local storage. It primarily includes a method to remove user-related data upon logout or session expiration.\u003c/p\u003e","tags":[],"title":"Token Management"},{"content":"Table of Contents What is TypeScript Working of TypeScript Difference between JavaScript and TypeScript Type System Declaring primitives Type literals Any and Unknown Objects Object property modifiers Type aliases Arrays Tuples Enums ℹ️ More coming soon 1. What is TypeScript TypeScript is JavaScript with syntax for types TypeScript is a superset of JavaScript i.e any JavaScript code is a TypeScript (not vice-versa) TypeScript is a language which compiles and gives JavaScript as output 👉 As TypeScript is a superset, existing JS codebase can be gradually migrated to TS without requiring a complete migration at once\n2. Working of TypeScript TypeScript compiles the code JavaScript TypeScript converts the code to AST (Abstract Syntax Tree) AST is checked by typechecker AST is then converted to JavaScript code TypeChecker is a special program that verifies that your code is typesafe Type safety means using types to prevent programs from doing invalid/unexpected things\n👉 Browsers cannot understand the typescript code. So TypeScript code has to be converted to JavaScript to run in browser or other JavaScript host platforms\n3. Difference between JavaScript and TypeScript Feature Syntax Description type binding dynamic static auto type conversion yes no (mostly) type check runtime compile error detection runtime (mostly) compile (mostly) 👉 Adding //@ts-check in your JS file helps editor to detect errors and show type hints\n4. Type System A set of rules that a typechecker uses to assign types to your program 2 kinds of type systems are present on TypeScript\nExplicit type system Explicitly annotate the types. Ex: const value: number = 10; Infered type system Let TypeScript decide the type by assigned value. Ex: const value = 10; 👉 Best practice is to let TypeScript infer types as it can, keeping explicitly typed code to a minimum whenver needed\n5. Declaring primitives let myNum: number; // myNum has the type \u0026#39;number\u0026#39; \u0026amp; can hold only number value myNum = 10; myNum = 45.98; let myStr: string; // myStr has the type \u0026#39;string\u0026#39; \u0026amp; can hold only string value myStr = \u0026#34;TypeScript\u0026#34;; myStr = `sdafsfda`; let myBool: boolean; // myBool has the type \u0026#39;boolean\u0026#39; \u0026amp; can hold only boolean value myBool = true; myBool = 10 \u0026lt; 1; let myUndefined: undefined; // myUndefined has the type \u0026#39;undefined\u0026#39; \u0026amp; can hold only undefined value myUndefined = undefined; let myNull: null; // myNull has the type \u0026#39;null\u0026#39; \u0026amp; can hold only null value myNull = null; let myBigint: bigint; // myBigint has the type \u0026#39;bigint\u0026#39; \u0026amp; can hold only bigint value myBigint = 1234n; let mySymbol: symbol; // mySymbol has the type \u0026#39;symbol\u0026#39; \u0026amp; can hold only symbol value mySymbol = Symbol(\u0026#34;a\u0026#34;);\r👉 It is best to use \u0026ldquo;const\u0026rdquo; and assign the value to the variable wherever reassignment is not needed\n6. Type literals A type that represents a single value and nothing else Type literal narrowed version of a type let myBoolean: false; // myBoolean has type false and not \u0026#39;boolean\u0026#39; let myNum: 100 = 100; // myNum has type \u0026#39;100\u0026#39; and not \u0026#39;number\u0026#39; const myStr = \u0026#34;hello\u0026#34;; // myStr has type \u0026#39;hello\u0026#39; and not \u0026#39;string\u0026#39; 👉 TypeScript knows that once a primitive is assigned with const its value will never change, it infers the most narrow type it can for that variable\n7. Any and Unknown any \u0026lsquo;any\u0026rsquo; can be used as a type of variable when we do not have information of the type the variable has \u0026lsquo;any\u0026rsquo; is a type that can assigned to any variable It can be considered as a supertype (parent) of all types i.e \u0026lsquo;any\u0026rsquo; typed variable can behave like all the types we know in TypeScript Any should be used as the last resort and must be avoided in almost all the cases as it makes TypeScript purposeless let myVar: any = someUnknownReturnTypeFunction(); myvar.someFunction(); // no restriction as myVar is of type any myVar = myVar + 10; myVar = \u0026#34;myVar can be a string also\u0026#34;;\runknown \u0026lsquo;unknown\u0026rsquo; can be used as a type of variable when we do not have information of the type the variable has \u0026lsquo;unknown\u0026rsquo; is a type that can assigned to any variable, but that variable can be used only after confirmation of its type Variable assigned with unknown type can have a definite type when it is assinged with definite type value which is not the case with \u0026lsquo;any\u0026rsquo; let myVar: unknown = someRandomFunctionFunction(); if (typeof myVar === \u0026#34;number\u0026#34;) { // confirm before usage, unlike \u0026#39;any\u0026#39; const myVarInc = 1 + myVar; } else if (typeof myVar === \u0026#34;string\u0026#34;) { const myVarSmall = myVar.toLowerCase(); // allowed to call string methods as we know myVar is of string type } myVar = \u0026#34;string\u0026#34;; // myVar is now \u0026#39;string\u0026#39; type and not \u0026#39;unknown\u0026#39; anymore 👉 Any is best suited for migration projects from JavaScript to TypeScript or as a temporary measure\n👉 Unknown can be used in the scenarios where you definitely do not know the type and may not know even in future\n8. Objects Objects in TypeScript are JavaScript object structures which can be explicitly or inference typed Object can have definite shape and the type structure declaration may look like { key1: string; key2: number; key3: boolean; ... }\rObject declared with \u0026lsquo;Definite Assignment\u0026rsquo; will not allow accessing or assigning non existing keys const obj: { // object structure is explictly declared also know as \u0026#39;object literal\u0026#39; key: \u0026#34;value\u0026#34;; }; obj = { key: \u0026#34;hello\u0026#34; }; /** Or object structure is infered as { key: string } when assigned directly */ // const obj = { // key: \u0026#34;hello\u0026#34;, // }; obj.key; obj.someProperty; // ERROR: not allowed as it is not present on object type structure obj.key2 = \u0026#34;new key value\u0026#34;; // ERROR: not allowed as it is not present on object type structure The object type to which allows any which key access can be created using \u0026lsquo;Index Signature\u0026rsquo; and \u0026lsquo;optional key\u0026rsquo; if needed let obj: { key1: number; [key: string]: boolean; // Index Signature indicates object can have any string type key with any value to it }; obj = { key1: 100 }; obj = { key1: 100, key2: false }; obj = { key1: 100, greeting: true }; obj = { key1: 100, 10: true }; // as all the keys in object are stored as string 10 is considered as string \u0026#39;10\u0026#39; 👉 Index Signature [key: string]: boolean; where \u0026lsquo;key\u0026rsquo; is just used for semantic purpose\n9. Object property modifiers Property declared as an optional one in object, may or may not have that key in the value Optional property on an object can created with the symbol \u0026lsquo;?\u0026rsquo; let obj: { key1: number; key2?: string; // ? indicates, it is an optional property on the object }; obj = { key1: 100 }; obj = { key1: 100, key2: \u0026#34;Optional key value\u0026#34; }; obj = { key1: 100, greeting: true }; obj = { key1: 100, 10: true }; // as all the keys in object are stored as string 10 is considered as string \u0026#39;10\u0026#39; Property declared as a readonly in an object, will follow the rules of \u0026lsquo;const\u0026rsquo; keyword Readonly property on an object can created with the prefix readonly const obj: { key1: number; readonly key2: string; } = { key1: 100, key2: \u0026#34;Optional key value\u0026#34; }; obj.key2 = \u0026#34;Hello\u0026#34;; // key2 is readonly and not allowed to be reassigned 👉 Index Signature [key: string]: boolean; where \u0026lsquo;key\u0026rsquo; is just used for semantic purpose\n10. Type aliases Type alias is a user defined type which can be type literal or a type type Age = number; // Age is an alias for number let age: Age; age = 100; type Point = { // Point alias for object of type { x: number, y: number } x: number; y: number; }; const coordinate: Point = { x: 100, y: 100 };\rType alias will be useful and powerful when used as the union of different types type ID = number | string; // ID alias indicates the type can be either number or string let userId: ID; userId = 11; userId = \u0026#34;11\u0026#34;; type Color = \u0026#34;red\u0026#34; | \u0026#34;blue\u0026#34; | \u0026#34;green\u0026#34;; // Color alias indicates the type can be one of the values let color: Color; color = \u0026#34;red\u0026#34;; color = \u0026#34;yellow\u0026#34;; // ERROR: other string values are not allowed 👉 type aliases are block-scoped\n11. Arrays Array has two types syntaxes: T[] and Array The general rule of thumb is to keep arrays homogeneous. let array: string[]; // array of strings only // let array: Array\u0026lt;string\u0026gt;; const array = [1, 2, \u0026#34;helo\u0026#34;]; // type infered array of \u0026#39;number\u0026#39; and \u0026#39;string\u0026#39; When array is declared empty, it makes the array type as \u0026lsquo;any\u0026rsquo; and the type narrows down depending on the value type pushed into the array. This is known as \u0026lsquo;Gradual typing\u0026rsquo; const array = []; // array has \u0026#39;any\u0026#39; type array.push(1); // array has \u0026#39;number[]\u0026#39; type array.push(\u0026#34;hello\u0026#34;); // array has (string | number)[] type 👉 Though an empty array type widens when values are added, TypeScript will assign it a final type that can’t be expanded anymore, once it leaves the scope it was defined in.\n12. Tuples Tuples are arrays having have fixed lengths, where the values at each index have types let tuple: [string, number]; tuple = [\u0026#34;id\u0026#34;, 1]; tuple = [\u0026#34;id\u0026#34;, \u0026#34;one\u0026#34;]; // ERROR Tuples can have optional slots denoted by \u0026lsquo;?\u0026rsquo; type Attribute = [string, string?]; // Equivalent to ([string] | [string, string]) const atrributes1: Attribute = [\u0026#34;class\u0026#34;, \u0026#34;container\u0026#34;]; const atrributes2: Attribute = [\u0026#34;disabled\u0026#34;];\r👉 Tuple can be readonly as well with the modifier \u0026lsquo;readonly\u0026rsquo; (let tuple: readonly [number] = [5];)\n13. Enums Enums allows for describing a value which could be one of a set of possible named constants Enum properties when not assigned will have incremental numeric integer values starting from 0 enum Agreement { No, // 0 Yes // 1 } hasUserAgreed = Agreement.Yes; enum Direction { Up = 1, Down, // 2 Left, // 3 Right // 4 } direction: Direction = Direction.Down;\rEnums can also be string, computed values or heterogeneous mix as well enum Color { Blue = 1, Red = \u0026#34;2\u0026#34;, White = \u0026#34;25\u0026#34; + \u0026#34;5\u0026#34; // computed value } const colorName = Color[255]; // reverse lookup Enums can be declared as \u0026lsquo;const\u0026rsquo; which will not allow reverse lookups, and also doesn’t generate any JavaScript code instead inlines the enum member’s value. const enum Language { English = 1, French = 2, Russian } const language = Lanugage.French; // language will be assigned with value 2 in compile time rather than run time 👉 String Enums are useful. But numeric Enums have problems and leak bugs. So the usage of Enums are not recommended in general unless it is String Enums\nℹ️ More coming soon\n","date":"0001-01-01","id":121,"permalink":"/resources/ts/","summary":"\u003ch3 id=\"table-of-contents\"\u003eTable of Contents\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"#1-What-is-TypeScript\"\u003eWhat is TypeScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#2-Working-of-TypeScript\"\u003eWorking of TypeScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#3-Difference-between-JavaScript-and-TypeScript\"\u003eDifference between JavaScript and TypeScript\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#4-Type-System\"\u003eType System\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#5-Declaring-primitives\"\u003eDeclaring primitives\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#6-Type-literals\"\u003eType literals\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#7-Any-and-Unknown\"\u003eAny and Unknown\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#8-Objects\"\u003eObjects\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#9-Object-property-modifiers\"\u003eObject property modifiers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#10-Type-aliases\"\u003eType aliases\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#11-Arrays\"\u003eArrays\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#12-Tuples\"\u003eTuples\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"#13-Enums\"\u003eEnums\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eℹ️ More coming soon\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"1-what-is-typescript\"\u003e1. What is TypeScript\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003eTypeScript is JavaScript with syntax for types\u003c/li\u003e\n\u003cli\u003eTypeScript is a superset of JavaScript i.e any JavaScript code is a TypeScript (not vice-versa)\u003c/li\u003e\n\u003cli\u003eTypeScript is a language which compiles and gives JavaScript as output\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e👉   As TypeScript is a superset, existing JS codebase can be gradually migrated to TS without requiring a complete migration at once\u003c/p\u003e","tags":[],"title":"TypeScript for Humans"}]